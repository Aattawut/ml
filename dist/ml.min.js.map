{"version":3,"file":"ml.min.js","sources":["../node_modules/is-any-array/src/index.js","../node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-rescale/lib-es6/index.js","../node_modules/ml-matrix/src/util.js","../node_modules/ml-matrix/src/stat.js","../node_modules/ml-matrix/src/inspect.js","../node_modules/ml-matrix/src/mathOperations.js","../node_modules/ml-matrix/src/matrix.js","../node_modules/ml-matrix/src/views/base.js","../node_modules/ml-matrix/src/views/column.js","../node_modules/ml-matrix/src/views/columnSelection.js","../node_modules/ml-matrix/src/views/flipColumn.js","../node_modules/ml-matrix/src/views/flipRow.js","../node_modules/ml-matrix/src/views/row.js","../node_modules/ml-matrix/src/views/rowSelection.js","../node_modules/ml-matrix/src/views/selection.js","../node_modules/ml-matrix/src/views/sub.js","../node_modules/ml-matrix/src/views/transpose.js","../node_modules/ml-matrix/src/wrap/WrapperMatrix1D.js","../node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js","../node_modules/ml-matrix/src/wrap/wrap.js","../node_modules/ml-matrix/src/dc/lu.js","../node_modules/ml-matrix/src/dc/util.js","../node_modules/ml-matrix/src/dc/qr.js","../node_modules/ml-matrix/src/dc/svd.js","../node_modules/ml-matrix/src/decompositions.js","../node_modules/ml-matrix/src/determinant.js","../node_modules/ml-matrix/src/linearDependencies.js","../node_modules/ml-matrix/src/pseudoInverse.js","../node_modules/ml-matrix/src/covariance.js","../node_modules/ml-matrix/src/correlation.js","../node_modules/ml-matrix/src/dc/evd.js","../node_modules/ml-matrix/src/dc/cholesky.js","../node_modules/ml-array-mean/lib-es6/index.js","../node_modules/ml-cart/src/utils.js","../node_modules/ml-cart/src/TreeNode.js","../node_modules/ml-cart/src/DecisionTreeClassifier.js","../node_modules/ml-cart/src/DecisionTreeRegression.js","../node_modules/random-js/dist/random-js.esm.js","../node_modules/ml-random-forest/src/utils.js","../node_modules/ml-random-forest/src/RandomForestBase.js","../node_modules/ml-random-forest/src/RandomForestClassifier.js","../node_modules/median-quickselect/lib/median-quickselect.min.js","../node_modules/ml-array-median/lib-es6/index.js","../node_modules/ml-random-forest/src/RandomForestRegression.js","../node_modules/ml-pca/src/pca.js","../node_modules/ml-distance-euclidean/lib-es6/euclidean.js","../node_modules/ml-distance-matrix/src/index.js","../node_modules/heap/lib/heap.js","../node_modules/heap/index.js","../node_modules/ml-hclust/src/Cluster.js","../node_modules/ml-hclust/src/ClusterLeaf.js","../node_modules/ml-hclust/src/agnes.js","../node_modules/ml-hclust/src/diana.js","../node_modules/ml-nearest-vector/lib-es6/index.js","../node_modules/ml-kmeans/src/utils.js","../node_modules/ml-xsadd/lib-es6/xsadd.js","../node_modules/ml-random/lib-es6/choice.js","../node_modules/ml-random/lib-es6/index.js","../node_modules/ml-kmeans/src/initialization.js","../node_modules/ml-kmeans/src/KMeansResult.js","../node_modules/ml-kmeans/src/kmeans.js","../node_modules/ml-naivebayes/src/utils.js","../node_modules/ml-naivebayes/src/GaussianNB.js","../node_modules/ml-naivebayes/src/MultinomialNB.js","../node_modules/ml-knn/src/KDTree.js","../node_modules/ml-knn/src/index.js","../node_modules/ml-pls/src/utils.js","../node_modules/ml-pls/src/pls.js","../node_modules/ml-pls/src/kopls.js","../node_modules/ml-confusion-matrix/src/index.js","../node_modules/ml-combinations/src/index.js","../node_modules/ml-cross-validation/src/index.js","../node_modules/ml-fnn/FeedForwardNeuralNetwork.js","../node_modules/ml-som/src/node-square.js","../node_modules/ml-som/src/node-hexagonal.js","../node_modules/ml-som/src/index.js","../node_modules/ml-regression-base/src/maybeToPrecision.js","../node_modules/ml-regression-base/src/checkArrayLength.js","../node_modules/ml-regression-base/src/index.js","../node_modules/ml-regression-polynomial/src/index.js","../node_modules/ml-regression-simple-linear/src/index.js","../node_modules/ml-regression-exponential/src/index.js","../node_modules/ml-regression-power/src/index.js","../node_modules/ml-regression-multivariate-linear/src/index.js","../node_modules/ml-kernel-gaussian/gaussian-kernel.js","../node_modules/ml-kernel-polynomial/polynomial-kernel.js","../node_modules/ml-kernel-sigmoid/sigmoid-kernel.js","../node_modules/ml-kernel/src/kernels/anova-kernel.js","../node_modules/ml-kernel/src/kernels/cauchy-kernel.js","../node_modules/ml-kernel/src/kernels/exponential-kernel.js","../node_modules/ml-kernel/src/kernels/histogram-intersection-kernel.js","../node_modules/ml-kernel/src/kernels/laplacian-kernel.js","../node_modules/ml-kernel/src/kernels/multiquadratic-kernel.js","../node_modules/ml-kernel/src/kernels/rational-quadratic-kernel.js","../node_modules/ml-kernel/src/kernel.js","../node_modules/ml-regression-theil-sen/src/index.js","../node_modules/ml-regression-robust-polynomial/src/index.js","../node_modules/ml-levenberg-marquardt/src/errorCalculation.js","../node_modules/ml-levenberg-marquardt/src/step.js","../node_modules/ml-levenberg-marquardt/src/index.js","../node_modules/binary-search/index.js","../node_modules/num-sort/index.js","../node_modules/ml-hash-table/src/primeFinder.js","../node_modules/ml-hash-table/src/HashTable.js","../node_modules/ml-sparse-matrix/src/index.js","../node_modules/ml-distance/src/distances/additiveSymmetric.js","../node_modules/ml-distance/src/distances/avg.js","../node_modules/ml-distance/src/distances/bhattacharyya.js","../node_modules/ml-distance/src/distances/canberra.js","../node_modules/ml-distance/src/distances/chebyshev.js","../node_modules/ml-distance/src/distances/clark.js","../node_modules/ml-distance/src/similarities/czekanowski.js","../node_modules/ml-distance/src/distances/czekanowski.js","../node_modules/ml-distance/src/distances/dice.js","../node_modules/ml-distance/src/distances/divergence.js","../node_modules/ml-distance/src/distances/fidelity.js","../node_modules/ml-distance/src/distances/gower.js","../node_modules/ml-distance/src/distances/harmonicMean.js","../node_modules/ml-distance/src/distances/hellinger.js","../node_modules/ml-distance/src/distances/innerProduct.js","../node_modules/ml-distance/src/distances/intersection.js","../node_modules/ml-distance/src/distances/jaccard.js","../node_modules/ml-distance/src/distances/jeffreys.js","../node_modules/ml-distance/src/distances/jensenDifference.js","../node_modules/ml-distance/src/distances/jensenShannon.js","../node_modules/ml-distance/src/distances/kdivergence.js","../node_modules/ml-distance/src/distances/kulczynski.js","../node_modules/ml-distance/src/distances/kullbackLeibler.js","../node_modules/ml-distance/src/distances/kumarHassebrook.js","../node_modules/ml-distance/src/distances/kumarJohnson.js","../node_modules/ml-distance/src/distances/lorentzian.js","../node_modules/ml-distance/src/distances/manhattan.js","../node_modules/ml-distance/src/distances/matusita.js","../node_modules/ml-distance/src/distances/minkowski.js","../node_modules/ml-distance/src/distances/motyka.js","../node_modules/ml-distance/src/distances/neyman.js","../node_modules/ml-distance/src/distances/pearson.js","../node_modules/ml-distance/src/distances/probabilisticSymmetric.js","../node_modules/ml-distance/src/distances/ruzicka.js","../node_modules/ml-distance/src/distances/soergel.js","../node_modules/ml-distance/src/distances/sorensen.js","../node_modules/ml-distance/src/distances/squared.js","../node_modules/ml-distance/src/distances/squaredChord.js","../node_modules/ml-distance/src/distances/taneja.js","../node_modules/ml-distance/src/similarities/tanimoto.js","../node_modules/ml-distance/src/distances/tanimoto.js","../node_modules/ml-distance/src/distances/topsoe.js","../node_modules/ml-distance/src/distances/waveHedges.js","../node_modules/ml-tree-similarity/src/createTree.js","../node_modules/ml-tree-similarity/src/getSimilarity.js","../node_modules/ml-tree-similarity/src/index.js","../node_modules/ml-distance/src/similarities/cosine.js","../node_modules/ml-distance/src/similarities/dice.js","../node_modules/ml-distance/src/similarities/intersection.js","../node_modules/ml-distance/src/similarities/jaccard.js","../node_modules/ml-distance/src/similarities/kulczynski.js","../node_modules/ml-distance/src/similarities/motyka.js","../node_modules/ml-distance/src/similarities/pearson.js","../node_modules/ml-distance/src/similarities/squaredChord.js","../node_modules/ml-performance/src/measures.js","../node_modules/ml-performance/src/index.js","../node_modules/ml-pad-array/src/index.js","../node_modules/ml-savitzky-golay/src/index.js","../node_modules/ml-bit-array/src/creator.js","../node_modules/ml-bit-array/src/index.js","../node_modules/ml-array-mode/lib-es6/index.js","../node_modules/ml-array-normed/lib-es6/index.js","../node_modules/ml-array-sequential-fill/lib-es6/index.js","../node_modules/ml-array-variance/lib-es6/index.js","../node_modules/ml-array-standard-deviation/lib-es6/index.js","../node_modules/ml-array-xy-centroids-merge/src/index.js","../node_modules/ml-arrayxy-closestx/src/index.js","../node_modules/ml-array-xy-max-merge/src/index.js","../node_modules/ml-array-xy-max-y/src/index.js","../node_modules/ml-array-xy-sort-x/src/index.js","../node_modules/ml-arrayxy-uniquex/src/index.js","../node_modules/ml-array-xy-weighted-merge/src/index.js","../node_modules/ml-array-xy-equally-spaced/src/integral.js","../node_modules/ml-array-xy-equally-spaced/src/equallySpacedSmooth.js","../node_modules/ml-array-xy-equally-spaced/src/equallySpacedSlot.js","../node_modules/ml-array-xy-equally-spaced/src/getZones.js","../node_modules/ml-array-xy-equally-spaced/src/index.js","../node_modules/ml-array-xy-filter-x/src/getZones.js","../node_modules/ml-array-xy-filter-x/src/index.js","../src/index.js"],"sourcesContent":["'use strict';\n\nconst toString = Object.prototype.toString;\n\nfunction isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n\nmodule.exports = isAnyArray;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the maximum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction max(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var max = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] > max) max = input[i];\n  }\n\n  return max;\n}\n\nexport default max;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the minimum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction min(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var min = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] < min) min = input[i];\n  }\n\n  return min;\n}\n\nexport default min;\n","import max from 'ml-array-max';\nimport min from 'ml-array-min';\nimport isArray from 'is-any-array';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport default rescale;\n","/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  var max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  var max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns'\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices)\n  };\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  var rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  var columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function newArray(length, value = 0) {\n  var array = [];\n  for (var i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n","import { newArray } from './util';\n\nexport function sumByRow(matrix) {\n  var sum = newArray(matrix.rows);\n  for (var i = 0; i < matrix.rows; ++i) {\n    for (var j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  var sum = newArray(matrix.columns);\n  for (var i = 0; i < matrix.rows; ++i) {\n    for (var j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  var v = 0;\n  for (var i = 0; i < matrix.rows; i++) {\n    for (var j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function productByRow(matrix) {\n  var sum = newArray(matrix.rows, 1);\n  for (var i = 0; i < matrix.rows; ++i) {\n    for (var j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productByColumn(matrix) {\n  var sum = newArray(matrix.columns, 1);\n  for (var i = 0; i < matrix.rows; ++i) {\n    for (var j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productAll(matrix) {\n  var v = 1;\n  for (var i = 0; i < matrix.rows; i++) {\n    for (var j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (var i = 0; i < rows; i++) {\n    var sum1 = 0;\n    var sum2 = 0;\n    var x = 0;\n    for (var j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (var j = 0; j < cols; j++) {\n    var sum1 = 0;\n    var sum2 = 0;\n    var x = 0;\n    for (var i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  var sum1 = 0;\n  var sum2 = 0;\n  var x = 0;\n  for (var i = 0; i < rows; i++) {\n    for (var j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n","export function inspectMatrix() {\n  const indent = ' '.repeat(2);\n  const indentData = ' '.repeat(4);\n  return `${this.constructor.name} {\n${indent}[\n${indentData}${inspectData(this, indentData)}\n${indent}]\n${indent}rows: ${this.rows}\n${indent}columns: ${this.columns}\n}`;\n}\n\nconst maxRows = 15;\nconst maxColumns = 10;\nconst maxNumSize = 8;\n\nfunction inspectData(matrix, indent) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n  for (var i = 0; i < maxI; i++) {\n    let line = [];\n    for (var j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j)));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indent}`);\n}\n\nfunction formatNumber(num) {\n  const numStr = String(num);\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n  const precise = num.toPrecision(maxNumSize - 2);\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.substring(eIndex);\n  return exponential.substring(0, maxNumSize - e.length) + e;\n}\n","export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    var newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n","import rescale from 'ml-array-rescale';\n\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkIndices\n} from './util';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll\n} from './stat';\nimport { inspectMatrix } from './inspect';\nimport { installMathOperations } from './mathOperations';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    var length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    var newMatrix = new Matrix(newRows, newColumns);\n    for (var row = 0; row < newRows; row++) {\n      for (var column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    var vector = new Matrix(1, newData.length);\n    for (var i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    var vector = new Matrix(newData.length, 1);\n    for (var i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    var matrix = new Matrix(rows, columns);\n    for (var i = 0; i < rows; i++) {\n      for (var j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    var interval = max - min;\n    var matrix = new Matrix(rows, columns);\n    for (var i = 0; i < rows; i++) {\n      for (var j = 0; j < columns; j++) {\n        var value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    var min = Math.min(rows, columns);\n    var matrix = this.zeros(rows, columns);\n    for (var i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    var l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    var min = Math.min(l, rows, columns);\n    var matrix = this.zeros(rows, columns);\n    for (var i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    var rows = matrix1.rows;\n    var columns = matrix1.columns;\n    var result = new Matrix(rows, columns);\n    for (var i = 0; i < rows; i++) {\n      for (var j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    var rows = matrix1.rows;\n    var columns = matrix1.columns;\n    var result = new this(rows, columns);\n    for (var i = 0; i < rows; i++) {\n      for (var j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    var array = [];\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    var copy = [];\n    for (var i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (var j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while ((h < result.rows) && (k < result.columns)) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while ((p < n) && (pivot === false)) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    var matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (var i = 0; i < rows; i++) {\n      for (var j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    var row = [];\n    for (var i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (var i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (var i = 0; i < this.columns; i++) {\n      var temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    var column = [];\n    for (var i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (var i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (var i = 0; i < this.rows; i++) {\n      var temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (var i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (var i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max() {\n    var v = this.get(0, 0);\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  maxIndex() {\n    var v = this.get(0, 0);\n    var idx = [0, 0];\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min() {\n    var v = this.get(0, 0);\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  minIndex() {\n    var v = this.get(0, 0);\n    var idx = [0, 0];\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    var v = this.get(row, 0);\n    for (var i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    var v = this.get(row, 0);\n    var idx = [row, 0];\n    for (var i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    var v = this.get(row, 0);\n    for (var i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    var v = this.get(row, 0);\n    var idx = [row, 0];\n    for (var i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    var v = this.get(0, column);\n    for (var i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    var v = this.get(0, column);\n    var idx = [0, column];\n    for (var i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    var v = this.get(0, column);\n    for (var i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    var v = this.get(0, column);\n    var idx = [0, column];\n    for (var i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    var min = Math.min(this.rows, this.columns);\n    var diag = [];\n    for (var i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    var result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    var sum = 0;\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    var vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    var dot = 0;\n    for (var i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    var m = this.rows;\n    var n = this.columns;\n    var p = other.columns;\n\n    var result = new Matrix(m, p);\n\n    var Bcolj = new Float64Array(n);\n    for (var j = 0; j < p; j++) {\n      for (var k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (var i = 0; i < m; i++) {\n        var s = 0;\n        for (k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    var result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    var result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    var x = this.clone();\n    var r1 = x.rows;\n    var c1 = x.columns;\n    var r2 = y.rows;\n    var c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      var r = mat.rows;\n      var c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        var resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    var r = Math.max(r1, r2);\n    var c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      var halfRows = parseInt(a.rows / 2, 10);\n      var halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      var m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols\n      );\n      var m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      var m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      var m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      var m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      var m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols\n      );\n      var m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols\n      );\n\n      // Combine intermediate values into the output.\n      var c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      var c12 = AbstractMatrix.add(m3, m5);\n      var c21 = AbstractMatrix.add(m2, m4);\n      var c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      var resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    var newMatrix = new Matrix(this.rows, this.columns);\n    for (var i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      rescale(row, { min, max, output: row });\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    var newMatrix = new Matrix(this.rows, this.columns);\n    for (var i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      rescale(column, {\n        min: min,\n        max: max,\n        output: column\n      });\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < middle; j++) {\n        var first = this.get(i, j);\n        var last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (var j = 0; j < this.columns; j++) {\n      for (var i = 0; i < middle; i++) {\n        var first = this.get(i, j);\n        var last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    var m = this.rows;\n    var n = this.columns;\n    var p = other.rows;\n    var q = other.columns;\n\n    var result = new Matrix(m * p, n * q);\n    for (var i = 0; i < m; i++) {\n      for (var j = 0; j < n; j++) {\n        for (var k = 0; k < p; k++) {\n          for (var l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  transpose() {\n    var result = new Matrix(this.columns, this.rows);\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (var i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (var i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    var newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1\n    );\n    for (var i = startRow; i <= endRow; i++) {\n      for (var j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    var newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (var i = 0; i < indices.length; i++) {\n      for (var j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    var newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (var i = 0; i < indices.length; i++) {\n      for (var j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    var endRow = startRow + matrix.rows - 1;\n    var endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (var i = 0; i < matrix.rows; i++) {\n      for (var j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    var indices = checkIndices(this, rowIndices, columnIndices);\n    var newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (var i = 0; i < indices.row.length; i++) {\n      var rowIndex = indices.row[i];\n      for (var j = 0; j < indices.column.length; j++) {\n        var columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    var min = Math.min(this.rows, this.columns);\n    var trace = 0;\n    for (var i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    var newMatrix = new Matrix(this.rows, this.columns);\n    for (var row = 0; row < this.rows; row++) {\n      for (var column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (var i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      } case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[\n    Symbol.for('nodejs.util.inspect.custom')\n  ] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows > 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns > 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = arrayData[0].length;\n      if (typeof nColumns !== 'number' || nColumns === 0) {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element'\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array'\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n    return this;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    if (this.rows === 1) {\n      throw new RangeError('A matrix cannot have less than one row');\n    }\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array, true));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    if (this.columns === 1) {\n      throw new RangeError('A matrix cannot have less than one column');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (var i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n","import { AbstractMatrix } from '../matrix';\n\nexport default class BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\n","import { checkColumnIndex } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    checkColumnIndex(matrix, column);\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n","import { checkColumnIndices } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixColumnSelectionView extends BaseView {\r\n  constructor(matrix, columnIndices) {\r\n    columnIndices = checkColumnIndices(matrix, columnIndices);\r\n    super(matrix, matrix.rows, columnIndices.length);\r\n    this.columnIndices = columnIndices;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\r\n  }\r\n}\r\n","import BaseView from './base';\r\n\r\nexport default class MatrixFlipColumnView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.rows, matrix.columns);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\r\n  }\r\n}\r\n","import BaseView from './base';\r\n\r\nexport default class MatrixFlipRowView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.rows, matrix.columns);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\r\n  }\r\n}\r\n","import { checkRowIndex } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    checkRowIndex(matrix, row);\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n","import { checkRowIndices } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixRowSelectionView extends BaseView {\r\n  constructor(matrix, rowIndices) {\r\n    rowIndices = checkRowIndices(matrix, rowIndices);\r\n    super(matrix, rowIndices.length, matrix.columns);\r\n    this.rowIndices = rowIndices;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\r\n  }\r\n}\r\n","import { checkIndices } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixSelectionView extends BaseView {\r\n  constructor(matrix, rowIndices, columnIndices) {\r\n    var indices = checkIndices(matrix, rowIndices, columnIndices);\r\n    super(matrix, indices.row.length, indices.column.length);\r\n    this.rowIndices = indices.row;\r\n    this.columnIndices = indices.column;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(\r\n      this.rowIndices[rowIndex],\r\n      this.columnIndices[columnIndex],\r\n      value\r\n    );\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(\r\n      this.rowIndices[rowIndex],\r\n      this.columnIndices[columnIndex]\r\n    );\r\n  }\r\n}\r\n","import { checkRange } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixSubView extends BaseView {\r\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\r\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\r\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\r\n    this.startRow = startRow;\r\n    this.startColumn = startColumn;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(\r\n      this.startRow + rowIndex,\r\n      this.startColumn + columnIndex,\r\n      value\r\n    );\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(\r\n      this.startRow + rowIndex,\r\n      this.startColumn + columnIndex\r\n    );\r\n  }\r\n}\r\n","import BaseView from './base';\r\n\r\nexport default class MatrixTransposeView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.columns, matrix.rows);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(columnIndex, rowIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(columnIndex, rowIndex);\r\n  }\r\n}\r\n","import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    var index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    var index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\n","import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n","import WrapperMatrix1D from './WrapperMatrix1D';\nimport WrapperMatrix2D from './WrapperMatrix2D';\n\nexport function wrap(array, options) {\n  if (Array.isArray(array)) {\n    if (array[0] && Array.isArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    var lu = matrix.clone();\n    var rows = lu.rows;\n    var columns = lu.columns;\n    var pivotVector = new Float64Array(rows);\n    var pivotSign = 1;\n    var i, j, k, p, s, t, v;\n    var LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    var data = this.LU;\n    var col = data.columns;\n    for (var j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    var lu = this.LU;\n    var rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    var count = value.columns;\n    var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    var columns = lu.columns;\n    var i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    var data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    var determinant = this.pivotSign;\n    var col = data.columns;\n    for (var j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    var data = this.LU;\n    var rows = data.rows;\n    var columns = data.columns;\n    var X = new Matrix(rows, columns);\n    for (var i = 0; i < rows; i++) {\n      for (var j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    var data = this.LU;\n    var rows = data.rows;\n    var columns = data.columns;\n    var X = new Matrix(rows, columns);\n    for (var i = 0; i < rows; i++) {\n      for (var j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n","export function hypotenuse(a, b) {\n  var r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    var qr = value.clone();\n    var m = value.rows;\n    var n = value.columns;\n    var rdiag = new Float64Array(n);\n    var i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      var nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    var qr = this.QR;\n    var m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    var count = value.columns;\n    var X = value.clone();\n    var n = qr.columns;\n    var i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    var columns = this.QR.columns;\n    for (var i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    var qr = this.QR;\n    var n = qr.columns;\n    var X = new Matrix(n, n);\n    var i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    var qr = this.QR;\n    var rows = qr.rows;\n    var columns = qr.columns;\n    var X = new Matrix(rows, columns);\n    var i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr[k][k];\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    var m = value.rows;\n    var n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false\n    } = options;\n\n    var wantu = Boolean(computeLeftSingularVectors);\n    var wantv = Boolean(computeRightSingularVectors);\n\n    var swapped = false;\n    var a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose'\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        var aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    var nu = Math.min(m, n);\n    var ni = Math.min(m + 1, n);\n    var s = new Float64Array(ni);\n    var U = new Matrix(m, nu);\n    var V = new Matrix(n, n);\n\n    var e = new Float64Array(n);\n    var work = new Float64Array(m);\n\n    var si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n    var mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    var pp = p - 1;\n    var iter = 0;\n    var eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k])\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          iter = iter + 1;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      var tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    var Y = value;\n    var e = this.threshold;\n    var scols = this.s.length;\n    var Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    var U = this.U;\n    var V = this.rightSingularVectors;\n\n    var VL = V.mmul(Ls);\n    var vrows = V.rows;\n    var urows = U.rows;\n    var VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    var V = this.V;\n    var e = this.threshold;\n    var vrows = V.rows;\n    var vcols = V.columns;\n    var X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    var U = this.U;\n\n    var urows = U.rows;\n    var ucols = U.columns;\n    var Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    var tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    var r = 0;\n    var s = this.s;\n    for (var i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n","import LuDecomposition from './dc/lu';\nimport QrDecomposition from './dc/qr';\nimport SingularValueDecomposition from './dc/svd';\nimport Matrix from './matrix';\nimport WrapperMatrix2D from './wrap/WrapperMatrix2D';\n\nexport function inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nexport function solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n","import Matrix from './matrix';\nimport LuDecomposition from './dc/lu';\nimport MatrixSelectionView from './views/selection';\n\nexport function determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    var a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      var subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n\n      return (\n        a * determinant(subMatrix0) -\n        b * determinant(subMatrix1) +\n        c * determinant(subMatrix2)\n      );\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\n","import Matrix from './matrix';\nimport SingularValueDecomposition from './dc/svd';\n\nfunction xrange(n, exception) {\n  var range = [];\n  for (var i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    var returnArray = matrix.addRow(index, [0]);\n    for (var i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\nexport function linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n  matrix = Matrix.checkMatrix(matrix);\n\n  var n = matrix.rows;\n  var results = new Matrix(n, n);\n\n  for (var i = 0; i < n; i++) {\n    var b = Matrix.columnVector(matrix.getRow(i));\n    var Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\n    var svd = new SingularValueDecomposition(Abis);\n    var x = svd.solve(b);\n    var error = Matrix.sub(b, Abis.mmul(x))\n      .abs()\n      .max();\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError)\n    );\n  }\n  return results;\n}\n","import SVD from './dc/svd';\nimport Matrix from './matrix';\n\nexport function pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  var svdSolution = new SVD(matrix, { autoTranspose: true });\n\n  var U = svdSolution.leftSingularVectors;\n  var V = svdSolution.rightSingularVectors;\n  var s = svdSolution.diagonal;\n\n  for (var i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\n","import Matrix from './matrix';\n\nexport function covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = Matrix.checkMatrix(xMatrix);\n  let yIsSame = false;\n  if (typeof yMatrix === 'object' && !Matrix.isMatrix(yMatrix) && !Array.isArray(yMatrix)) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = Matrix.checkMatrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const { center = true } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const covariance = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < covariance.rows; i++) {\n    for (let j = 0; j < covariance.columns; j++) {\n      covariance.set(i, j, covariance.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return covariance;\n}\n","import Matrix from './matrix';\n\nexport function correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = Matrix.checkMatrix(xMatrix);\n  let yIsSame = false;\n  if (typeof yMatrix === 'object' && !Matrix.isMatrix(yMatrix) && !Array.isArray(yMatrix)) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = Matrix.checkMatrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const { center = true, scale = true } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\n  const sdy = yIsSame ? sdx : yMatrix.standardDeviation('column', { unbiased: true });\n\n  const correlation = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < correlation.rows; i++) {\n    for (let j = 0; j < correlation.columns; j++) {\n      correlation.set(i, j, correlation.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return correlation;\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns;\n    var V = new Matrix(n, n);\n    var d = new Float64Array(n);\n    var e = new Float64Array(n);\n    var value = matrix;\n    var i, j;\n\n    var isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      var H = new Matrix(n, n);\n      var ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    var n = this.n;\n    var e = this.e;\n    var d = this.d;\n    var X = new Matrix(n, n);\n    var i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  var f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  var g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2, iter;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  var f = 0;\n  var tst1 = 0;\n  var eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      iter = 0;\n      do {\n        iter = iter + 1;\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  var low = 0;\n  var high = n - 1;\n  var f, g, h, i, j, m;\n  var scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  var n = nn - 1;\n  var low = 0;\n  var high = nn - 1;\n  var eps = Number.EPSILON;\n  var exshift = 0;\n  var norm = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var z = 0;\n  var iter = 0;\n  var i, j, k, l, m, t, w, x, y;\n  var ra, sa, vr, vi;\n  var notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H.get(m - 1, m - 1)) +\n                Math.abs(z) +\n                Math.abs(H.get(m + 1, m + 1))))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(\n              i + 1,\n              n,\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z\n            );\n          }\n\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n\n        w = H.get(i, i) - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi\n            );\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(\n                i + 1,\n                n - 1,\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x\n              );\n              H.set(\n                i + 1,\n                n,\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x\n              );\n            } else {\n              cdivres = cdiv(\n                -r - y * H.get(i, n - 1),\n                -s - y * H.get(i, n),\n                z,\n                q\n              );\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  var r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    var a = value;\n    var dimension = a.rows;\n    var l = new Matrix(dimension, dimension);\n    var positiveDefinite = true;\n    var i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      var d = 0;\n      for (k = 0; k < j; k++) {\n        var s = 0;\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n\n    if (!positiveDefinite) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n  }\n\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    var l = this.L;\n    var dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n\n    var count = value.columns;\n    var B = value.clone();\n    var i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    return B;\n  }\n\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n","import isArray from 'is-any-array';\n\n/**\n * Computes the mean of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction mean(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var sum = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    sum += input[i];\n  }\n\n  return sum / input.length;\n}\n\nexport default mean;\n","import Matrix from 'ml-matrix';\nimport meanArray from 'ml-array-mean';\n\n/**\n * @private\n * return an array of probabilities of each class\n * @param {Array} array - contains the classes\n * @param {number} numberOfClasses\n * @return {Matrix} - rowVector of probabilities.\n */\nexport function toDiscreteDistribution(array, numberOfClasses) {\n  var counts = new Array(numberOfClasses).fill(0);\n  for (var i = 0; i < array.length; ++i) {\n    counts[array[i]] += 1 / array.length;\n  }\n\n  return Matrix.rowVector(counts);\n}\n\n/**\n * @private\n * Retrieves the impurity of array of predictions\n * @param {Array} array - predictions.\n * @return {number} Gini impurity\n */\nexport function giniImpurity(array) {\n  if (array.length === 0) {\n    return 0;\n  }\n\n  var probabilities = toDiscreteDistribution(\n    array,\n    getNumberOfClasses(array)\n  ).getRow(0);\n\n  var sum = 0.0;\n  for (var i = 0; i < probabilities.length; ++i) {\n    sum += probabilities[i] * probabilities[i];\n  }\n\n  return 1 - sum;\n}\n\n/**\n * @private\n * Return the number of classes given the array of predictions.\n * @param {Array} array - predictions.\n * @return {number} Number of classes.\n */\nexport function getNumberOfClasses(array) {\n  return array.filter(function (val, i, arr) {\n    return arr.indexOf(val) === i;\n  }).length;\n}\n\n/**\n * @private\n * Calculates the Gini Gain of an array of predictions and those predictions splitted by a feature.\n * @para {Array} array - Predictions\n * @param {object} splitted - Object with elements \"greater\" and \"lesser\" that contains an array of predictions splitted.\n * @return {number} - Gini Gain.\n */\n\nexport function giniGain(array, splitted) {\n  var splitsImpurity = 0.0;\n  var splits = ['greater', 'lesser'];\n\n  for (var i = 0; i < splits.length; ++i) {\n    var currentSplit = splitted[splits[i]];\n    splitsImpurity +=\n      (giniImpurity(currentSplit) * currentSplit.length) / array.length;\n  }\n\n  return giniImpurity(array) - splitsImpurity;\n}\n\n/**\n * @private\n * Calculates the squared error of a predictions values.\n * @param {Array} array - predictions values\n * @return {number} squared error.\n */\nexport function squaredError(array) {\n  var l = array.length;\n\n  var m = meanArray(array);\n  var squaredError = 0.0;\n\n  for (var i = 0; i < l; ++i) {\n    var currentElement = array[i];\n    squaredError += (currentElement - m) * (currentElement - m);\n  }\n\n  return squaredError;\n}\n\n/**\n * @private\n * Calculates the sum of squared error of the two arrays that contains the splitted values.\n * @param {Array} array - this argument is no necessary but is used to fit with the main interface.\n * @param {object} splitted - Object with elements \"greater\" and \"lesser\" that contains an array of predictions splitted.\n * @return {number} - sum of squared errors.\n */\nexport function regressionError(array, splitted) {\n  var error = 0.0;\n  var splits = ['greater', 'lesser'];\n\n  for (var i = 0; i < splits.length; ++i) {\n    var currentSplit = splitted[splits[i]];\n    error += squaredError(currentSplit);\n  }\n  return error;\n}\n\n/**\n * @private\n * Split the training set and values from a given column of the training set if is less than a value\n * @param {Matrix} X - Training set.\n * @param {Array} y - Training values.\n * @param {number} column - Column to split.\n * @param {number} value - value to split the Training set and values.\n * @return {object} - Object that contains the splitted values.\n */\nexport function matrixSplitter(X, y, column, value) {\n  var lesserX = [];\n  var greaterX = [];\n  var lesserY = [];\n  var greaterY = [];\n\n  for (var i = 0; i < X.rows; ++i) {\n    if (X.get(i, column) < value) {\n      lesserX.push(X.getRow(i));\n      lesserY.push(y[i]);\n    } else {\n      greaterX.push(X.getRow(i));\n      greaterY.push(y[i]);\n    }\n  }\n\n  return {\n    greaterX: greaterX,\n    greaterY: greaterY,\n    lesserX: lesserX,\n    lesserY: lesserY\n  };\n}\n\n/**\n * @private\n * Calculates the mean between two values\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nexport function mean(a, b) {\n  return (a + b) / 2;\n}\n\n/**\n * @private\n * Returns a list of tuples that contains the i-th element of each array.\n * @param {Array} a\n * @param {Array} b\n * @return {Array} list of tuples.\n */\nexport function zip(a, b) {\n  if (a.length !== b.length) {\n    throw new TypeError(\n      `Error on zip: the size of a: ${a.length} is different from b: ${\n        b.length\n      }`\n    );\n  }\n\n  var ret = new Array(a.length);\n  for (var i = 0; i < a.length; ++i) {\n    ret[i] = [a[i], b[i]];\n  }\n\n  return ret;\n}\n","import Matrix from 'ml-matrix';\nimport mean from 'ml-array-mean';\n\nimport * as Utils from './utils';\n\nconst gainFunctions = {\n  gini: Utils.giniGain,\n  regression: Utils.regressionError\n};\n\nconst splitFunctions = {\n  mean: Utils.mean\n};\n\nexport default class TreeNode {\n  /**\n   * @private\n   * Constructor for a tree node given the options received on the main classes (DecisionTreeClassifier, DecisionTreeRegression)\n   * @param {object|TreeNode} options for loading\n   * @constructor\n   */\n  constructor(options) {\n    // options parameters\n    this.kind = options.kind;\n    this.gainFunction = options.gainFunction;\n    this.splitFunction = options.splitFunction;\n    this.minNumSamples = options.minNumSamples;\n    this.maxDepth = options.maxDepth;\n  }\n\n  /**\n   * @private\n   * Function that retrieve the best feature to make the split.\n   * @param {Matrix} XTranspose - Training set transposed\n   * @param {Array} y - labels or values (depending of the decision tree)\n   * @return {object} - return tree values, the best gain, column and the split value.\n   */\n  bestSplit(XTranspose, y) {\n    // Depending in the node tree class, we set the variables to check information gain (to classify)\n    // or error (for regression)\n\n    var bestGain = this.kind === 'classifier' ? -Infinity : Infinity;\n    var check = this.kind === 'classifier' ? (a, b) => a > b : (a, b) => a < b;\n\n    var maxColumn;\n    var maxValue;\n\n    for (var i = 0; i < XTranspose.rows; ++i) {\n      var currentFeature = XTranspose.getRow(i);\n      var splitValues = this.featureSplit(currentFeature, y);\n      for (var j = 0; j < splitValues.length; ++j) {\n        var currentSplitVal = splitValues[j];\n        var splitted = this.split(currentFeature, y, currentSplitVal);\n\n        var gain = gainFunctions[this.gainFunction](y, splitted);\n        if (check(gain, bestGain)) {\n          maxColumn = i;\n          maxValue = currentSplitVal;\n          bestGain = gain;\n        }\n      }\n    }\n\n    return {\n      maxGain: bestGain,\n      maxColumn: maxColumn,\n      maxValue: maxValue\n    };\n  }\n\n  /**\n   * @private\n   * Makes the split of the training labels or values from the training set feature given a split value.\n   * @param {Array} x - Training set feature\n   * @param {Array} y - Training set value or label\n   * @param {number} splitValue\n   * @return {object}\n   */\n  split(x, y, splitValue) {\n    var lesser = [];\n    var greater = [];\n\n    for (var i = 0; i < x.length; ++i) {\n      if (x[i] < splitValue) {\n        lesser.push(y[i]);\n      } else {\n        greater.push(y[i]);\n      }\n    }\n\n    return {\n      greater: greater,\n      lesser: lesser\n    };\n  }\n\n  /**\n   * @private\n   * Calculates the possible points to split over the tree given a training set feature and corresponding labels or values.\n   * @param {Array} x - Training set feature\n   * @param {Array} y - Training set value or label\n   * @return {Array} possible split values.\n   */\n  featureSplit(x, y) {\n    var splitValues = [];\n    var arr = Utils.zip(x, y);\n    arr.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    for (var i = 1; i < arr.length; ++i) {\n      if (arr[i - 1][1] !== arr[i][1]) {\n        splitValues.push(\n          splitFunctions[this.splitFunction](arr[i - 1][0], arr[i][0])\n        );\n      }\n    }\n\n    return splitValues;\n  }\n\n  /**\n   * @private\n   * Calculate the predictions of a leaf tree node given the training labels or values\n   * @param {Array} y\n   */\n  calculatePrediction(y) {\n    if (this.kind === 'classifier') {\n      this.distribution = Utils.toDiscreteDistribution(\n        y,\n        Utils.getNumberOfClasses(y)\n      );\n      if (this.distribution.columns === 0) {\n        throw new TypeError('Error on calculate the prediction');\n      }\n    } else {\n      this.distribution = mean(y);\n    }\n  }\n\n  /**\n   * @private\n   * Train a node given the training set and labels, because it trains recursively, it also receive\n   * the current depth of the node, parent gain to avoid infinite recursion and boolean value to check if\n   * the training set is transposed.\n   * @param {Matrix} X - Training set (could be transposed or not given transposed).\n   * @param {Array} y - Training labels or values.\n   * @param {number} currentDepth - Current depth of the node.\n   * @param {number} parentGain - parent node gain or error.\n   */\n  train(X, y, currentDepth, parentGain) {\n    if (X.rows <= this.minNumSamples) {\n      this.calculatePrediction(y);\n      return;\n    }\n    if (parentGain === undefined) parentGain = 0.0;\n\n    var XTranspose = X.transpose();\n    var split = this.bestSplit(XTranspose, y);\n\n    this.splitValue = split.maxValue;\n    this.splitColumn = split.maxColumn;\n    this.gain = split.maxGain;\n\n    var splittedMatrix = Utils.matrixSplitter(\n      X,\n      y,\n      this.splitColumn,\n      this.splitValue\n    );\n\n    if (\n      currentDepth < this.maxDepth &&\n      (this.gain > 0.01 && this.gain !== parentGain) &&\n      (splittedMatrix.lesserX.length > 0 && splittedMatrix.greaterX.length > 0)\n    ) {\n      this.left = new TreeNode(this);\n      this.right = new TreeNode(this);\n\n      var lesserX = new Matrix(splittedMatrix.lesserX);\n      var greaterX = new Matrix(splittedMatrix.greaterX);\n\n      this.left.train(\n        lesserX,\n        splittedMatrix.lesserY,\n        currentDepth + 1,\n        this.gain\n      );\n      this.right.train(\n        greaterX,\n        splittedMatrix.greaterY,\n        currentDepth + 1,\n        this.gain\n      );\n    } else {\n      this.calculatePrediction(y);\n    }\n  }\n\n  /**\n   * @private\n   * Calculates the prediction of a given element.\n   * @param {Array} row\n   * @return {number|Array} prediction\n   *          * if a node is a classifier returns an array of probabilities of each class.\n   *          * if a node is for regression returns a number with the prediction.\n   */\n  classify(row) {\n    if (this.right && this.left) {\n      if (row[this.splitColumn] < this.splitValue) {\n        return this.left.classify(row);\n      } else {\n        return this.right.classify(row);\n      }\n    }\n\n    return this.distribution;\n  }\n\n  /**\n   * @private\n   * Set the parameter of the current node and their children.\n   * @param {object} node - parameters of the current node and the children.\n   */\n  setNodeParameters(node) {\n    if (node.distribution !== undefined) {\n      this.distribution =\n        node.distribution.constructor === Array\n          ? new Matrix(node.distribution)\n          : node.distribution;\n    } else {\n      this.distribution = undefined;\n      this.splitValue = node.splitValue;\n      this.splitColumn = node.splitColumn;\n      this.gain = node.gain;\n\n      this.left = new TreeNode(this);\n      this.right = new TreeNode(this);\n\n      if (node.left !== {}) {\n        this.left.setNodeParameters(node.left);\n      }\n      if (node.right !== {}) {\n        this.right.setNodeParameters(node.right);\n      }\n    }\n  }\n}\n","import Matrix from 'ml-matrix';\n\nimport Tree from './TreeNode';\n\nconst defaultOptions = {\n  gainFunction: 'gini',\n  splitFunction: 'mean',\n  minNumSamples: 3,\n  maxDepth: Infinity\n};\n\nexport class DecisionTreeClassifier {\n  /**\n   * Create new Decision Tree Classifier with CART implementation with the given options\n   * @param {object} options\n   * @param {string} [options.gainFunction=\"gini\"] - gain function to get the best split, \"gini\" the only one supported.\n   * @param {string} [options.splitFunction=\"mean\"] - given two integers from a split feature, get the value to split, \"mean\" the only one supported.\n   * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.\n   * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.\n   * @param {object} model - for load purposes.\n   * @constructor\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.options = model.options;\n      this.root = new Tree(model.options);\n      this.root.setNodeParameters(model.root);\n    } else {\n      this.options = Object.assign({}, defaultOptions, options);\n      this.options.kind = 'classifier';\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and labels.\n   * @param {Matrix|MatrixTransposeView|Array} trainingSet\n   * @param {Array} trainingLabels\n   */\n  train(trainingSet, trainingLabels) {\n    this.root = new Tree(this.options);\n    trainingSet = Matrix.checkMatrix(trainingSet);\n    this.root.train(trainingSet, trainingLabels, 0, null);\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Matrix|MatrixTransposeView|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    toPredict = Matrix.checkMatrix(toPredict);\n    var predictions = new Array(toPredict.rows);\n\n    for (var i = 0; i < toPredict.rows; ++i) {\n      predictions[i] = this.root\n        .classify(toPredict.getRow(i))\n        .maxRowIndex(0)[1];\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      options: this.options,\n      root: this.root,\n      name: 'DTClassifier'\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {DecisionTreeClassifier}\n   */\n  static load(model) {\n    if (model.name !== 'DTClassifier') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new DecisionTreeClassifier(true, model);\n  }\n}\n","import Matrix from 'ml-matrix';\n\nimport Tree from './TreeNode';\n\nconst defaultOptions = {\n  gainFunction: 'regression',\n  splitFunction: 'mean',\n  minNumSamples: 3,\n  maxDepth: Infinity\n};\n\nexport class DecisionTreeRegression {\n  /**\n   * Create new Decision Tree Regression with CART implementation with the given options.\n   * @param {object} options\n   * @param {string} [options.gainFunction=\"regression\"] - gain function to get the best split, \"regression\" the only one supported.\n   * @param {string} [options.splitFunction=\"mean\"] - given two integers from a split feature, get the value to split, \"mean\" the only one supported.\n   * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.\n   * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.options = model.options;\n      this.root = new Tree(model.options);\n      this.root.setNodeParameters(model.root);\n    } else {\n      this.options = Object.assign({}, defaultOptions, options);\n      this.options.kind = 'regression';\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and values.\n   * @param {Matrix|MatrixTransposeView|Array} trainingSet\n   * @param {Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    this.root = new Tree(this.options);\n\n    if (typeof trainingSet[0] !== 'undefined' && trainingSet[0].length === undefined) {\n      trainingSet = Matrix.columnVector(trainingSet);\n    } else {\n      trainingSet = Matrix.checkMatrix(trainingSet);\n    }\n    this.root.train(trainingSet, trainingValues, 0);\n  }\n\n  /**\n   * Predicts the values given the matrix to predict.\n   * @param {Matrix|MatrixTransposeView|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    if (typeof toPredict[0] !== 'undefined' && toPredict[0].length === undefined) {\n      toPredict = Matrix.columnVector(toPredict);\n    }\n    toPredict = Matrix.checkMatrix(toPredict);\n\n    var predictions = new Array(toPredict.rows);\n    for (var i = 0; i < toPredict.rows; ++i) {\n      predictions[i] = this.root.classify(toPredict.getRow(i));\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      options: this.options,\n      root: this.root,\n      name: 'DTRegression'\n    };\n  }\n\n  /**\n   * Load a Decision tree regression with the given model.\n   * @param {object} model\n   * @return {DecisionTreeRegression}\n   */\n  static load(model) {\n    if (model.name !== 'DTRegression') {\n      throw new RangeError(`Invalid model:${model.name}`);\n    }\n\n    return new DecisionTreeRegression(true, model);\n  }\n}\n","const SMALLEST_UNSAFE_INTEGER = 0x20000000000000;\r\nconst LARGEST_SAFE_INTEGER = SMALLEST_UNSAFE_INTEGER - 1;\r\nconst UINT32_MAX = -1 >>> 0;\r\nconst UINT32_SIZE = UINT32_MAX + 1;\r\nconst INT32_SIZE = UINT32_SIZE / 2;\r\nconst INT32_MAX = INT32_SIZE - 1;\r\nconst UINT21_SIZE = 1 << 21;\r\nconst UINT21_MAX = UINT21_SIZE - 1;\n\n/**\r\n * Returns a value within [-0x80000000, 0x7fffffff]\r\n */\r\nfunction int32(engine) {\r\n    return engine.next() | 0;\r\n}\n\nfunction add(distribution, addend) {\r\n    if (addend === 0) {\r\n        return distribution;\r\n    }\r\n    else {\r\n        return engine => distribution(engine) + addend;\r\n    }\r\n}\n\n/**\r\n * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n */\r\nfunction int53(engine) {\r\n    const high = engine.next() | 0;\r\n    const low = engine.next() >>> 0;\r\n    return ((high & UINT21_MAX) * UINT32_SIZE +\r\n        low +\r\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0));\r\n}\n\n/**\r\n * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n */\r\nfunction int53Full(engine) {\r\n    while (true) {\r\n        const high = engine.next() | 0;\r\n        if (high & 0x400000) {\r\n            if ((high & 0x7fffff) === 0x400000 && (engine.next() | 0) === 0) {\r\n                return SMALLEST_UNSAFE_INTEGER;\r\n            }\r\n        }\r\n        else {\r\n            const low = engine.next() >>> 0;\r\n            return ((high & UINT21_MAX) * UINT32_SIZE +\r\n                low +\r\n                (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0));\r\n        }\r\n    }\r\n}\n\n/**\r\n * Returns a value within [0, 0xffffffff]\r\n */\r\nfunction uint32(engine) {\r\n    return engine.next() >>> 0;\r\n}\n\n/**\r\n * Returns a value within [0, 0x1fffffffffffff]\r\n */\r\nfunction uint53(engine) {\r\n    const high = engine.next() & UINT21_MAX;\r\n    const low = engine.next() >>> 0;\r\n    return high * UINT32_SIZE + low;\r\n}\n\n/**\r\n * Returns a value within [0, 0x20000000000000]\r\n */\r\nfunction uint53Full(engine) {\r\n    while (true) {\r\n        const high = engine.next() | 0;\r\n        if (high & UINT21_SIZE) {\r\n            if ((high & UINT21_MAX) === 0 && (engine.next() | 0) === 0) {\r\n                return SMALLEST_UNSAFE_INTEGER;\r\n            }\r\n        }\r\n        else {\r\n            const low = engine.next() >>> 0;\r\n            return (high & UINT21_MAX) * UINT32_SIZE + low;\r\n        }\r\n    }\r\n}\n\nfunction isPowerOfTwoMinusOne(value) {\r\n    return ((value + 1) & value) === 0;\r\n}\r\nfunction bitmask(masking) {\r\n    return (engine) => engine.next() & masking;\r\n}\r\nfunction downscaleToLoopCheckedRange(range) {\r\n    const extendedRange = range + 1;\r\n    const maximum = extendedRange * Math.floor(UINT32_SIZE / extendedRange);\r\n    return engine => {\r\n        let value = 0;\r\n        do {\r\n            value = engine.next() >>> 0;\r\n        } while (value >= maximum);\r\n        return value % extendedRange;\r\n    };\r\n}\r\nfunction downscaleToRange(range) {\r\n    if (isPowerOfTwoMinusOne(range)) {\r\n        return bitmask(range);\r\n    }\r\n    else {\r\n        return downscaleToLoopCheckedRange(range);\r\n    }\r\n}\r\nfunction isEvenlyDivisibleByMaxInt32(value) {\r\n    return (value | 0) === 0;\r\n}\r\nfunction upscaleWithHighMasking(masking) {\r\n    return engine => {\r\n        const high = engine.next() & masking;\r\n        const low = engine.next() >>> 0;\r\n        return high * UINT32_SIZE + low;\r\n    };\r\n}\r\nfunction upscaleToLoopCheckedRange(extendedRange) {\r\n    const maximum = extendedRange * Math.floor(SMALLEST_UNSAFE_INTEGER / extendedRange);\r\n    return engine => {\r\n        let ret = 0;\r\n        do {\r\n            const high = engine.next() & UINT21_MAX;\r\n            const low = engine.next() >>> 0;\r\n            ret = high * UINT32_SIZE + low;\r\n        } while (ret >= maximum);\r\n        return ret % extendedRange;\r\n    };\r\n}\r\nfunction upscaleWithinU53(range) {\r\n    const extendedRange = range + 1;\r\n    if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\r\n        const highRange = ((extendedRange / UINT32_SIZE) | 0) - 1;\r\n        if (isPowerOfTwoMinusOne(highRange)) {\r\n            return upscaleWithHighMasking(highRange);\r\n        }\r\n    }\r\n    return upscaleToLoopCheckedRange(extendedRange);\r\n}\r\nfunction upscaleWithinI53AndLoopCheck(min, max) {\r\n    return engine => {\r\n        let ret = 0;\r\n        do {\r\n            const high = engine.next() | 0;\r\n            const low = engine.next() >>> 0;\r\n            ret =\r\n                (high & UINT21_MAX) * UINT32_SIZE +\r\n                    low +\r\n                    (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\r\n        } while (ret < min || ret > max);\r\n        return ret;\r\n    };\r\n}\r\n/**\r\n * Returns a Distribution to return a value within [min, max]\r\n * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n */\r\nfunction integer(min, max) {\r\n    min = Math.floor(min);\r\n    max = Math.floor(max);\r\n    if (min < -SMALLEST_UNSAFE_INTEGER || !isFinite(min)) {\r\n        throw new RangeError(`Expected min to be at least ${-SMALLEST_UNSAFE_INTEGER}`);\r\n    }\r\n    else if (max > SMALLEST_UNSAFE_INTEGER || !isFinite(max)) {\r\n        throw new RangeError(`Expected max to be at most ${SMALLEST_UNSAFE_INTEGER}`);\r\n    }\r\n    const range = max - min;\r\n    if (range <= 0 || !isFinite(range)) {\r\n        return () => min;\r\n    }\r\n    else if (range === UINT32_MAX) {\r\n        if (min === 0) {\r\n            return uint32;\r\n        }\r\n        else {\r\n            return add(int32, min + INT32_SIZE);\r\n        }\r\n    }\r\n    else if (range < UINT32_MAX) {\r\n        return add(downscaleToRange(range), min);\r\n    }\r\n    else if (range === LARGEST_SAFE_INTEGER) {\r\n        return add(uint53, min);\r\n    }\r\n    else if (range < LARGEST_SAFE_INTEGER) {\r\n        return add(upscaleWithinU53(range), min);\r\n    }\r\n    else if (max - 1 - min === LARGEST_SAFE_INTEGER) {\r\n        return add(uint53Full, min);\r\n    }\r\n    else if (min === -SMALLEST_UNSAFE_INTEGER &&\r\n        max === SMALLEST_UNSAFE_INTEGER) {\r\n        return int53Full;\r\n    }\r\n    else if (min === -SMALLEST_UNSAFE_INTEGER && max === LARGEST_SAFE_INTEGER) {\r\n        return int53;\r\n    }\r\n    else if (min === -LARGEST_SAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {\r\n        return add(int53, 1);\r\n    }\r\n    else if (max === SMALLEST_UNSAFE_INTEGER) {\r\n        return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\r\n    }\r\n    else {\r\n        return upscaleWithinI53AndLoopCheck(min, max);\r\n    }\r\n}\n\nfunction isLeastBitTrue(engine) {\r\n    return (engine.next() & 1) === 1;\r\n}\r\nfunction lessThan(distribution, value) {\r\n    return engine => distribution(engine) < value;\r\n}\r\nfunction probability(percentage) {\r\n    if (percentage <= 0) {\r\n        return () => false;\r\n    }\r\n    else if (percentage >= 1) {\r\n        return () => true;\r\n    }\r\n    else {\r\n        const scaled = percentage * UINT32_SIZE;\r\n        if (scaled % 1 === 0) {\r\n            return lessThan(int32, (scaled - INT32_SIZE) | 0);\r\n        }\r\n        else {\r\n            return lessThan(uint53, Math.round(percentage * SMALLEST_UNSAFE_INTEGER));\r\n        }\r\n    }\r\n}\r\nfunction bool(numerator, denominator) {\r\n    if (denominator == null) {\r\n        if (numerator == null) {\r\n            return isLeastBitTrue;\r\n        }\r\n        return probability(numerator);\r\n    }\r\n    else {\r\n        if (numerator <= 0) {\r\n            return () => false;\r\n        }\r\n        else if (numerator >= denominator) {\r\n            return () => true;\r\n        }\r\n        return lessThan(integer(0, denominator - 1), numerator);\r\n    }\r\n}\n\n/**\r\n * Returns a Distribution that returns a random `Date` within the inclusive\r\n * range of [`start`, `end`].\r\n * @param start The minimum `Date`\r\n * @param end The maximum `Date`\r\n */\r\nfunction date(start, end) {\r\n    const distribution = integer(+start, +end);\r\n    return engine => new Date(distribution(engine));\r\n}\n\n/**\r\n * Returns a Distribution to return a value within [1, sideCount]\r\n * @param sideCount The number of sides of the die\r\n */\r\nfunction die(sideCount) {\r\n    return integer(1, sideCount);\r\n}\n\n/**\r\n * Returns a distribution that returns an array of length `dieCount` of values\r\n * within [1, `sideCount`]\r\n * @param sideCount The number of sides of each die\r\n * @param dieCount The number of dice\r\n */\r\nfunction dice(sideCount, dieCount) {\r\n    const distribution = die(sideCount);\r\n    return engine => {\r\n        const result = [];\r\n        for (let i = 0; i < dieCount; ++i) {\r\n            result.push(distribution(engine));\r\n        }\r\n        return result;\r\n    };\r\n}\n\n// tslint:disable:unified-signatures\r\n// has 2**x chars, for faster uniform distribution\r\nconst DEFAULT_STRING_POOL = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\r\nfunction string(pool = DEFAULT_STRING_POOL) {\r\n    const poolLength = pool.length;\r\n    if (!poolLength) {\r\n        throw new Error(\"Expected pool not to be an empty string\");\r\n    }\r\n    const distribution = integer(0, poolLength - 1);\r\n    return (engine, length) => {\r\n        let result = \"\";\r\n        for (let i = 0; i < length; ++i) {\r\n            const j = distribution(engine);\r\n            result += pool.charAt(j);\r\n        }\r\n        return result;\r\n    };\r\n}\n\nconst LOWER_HEX_POOL = \"0123456789abcdef\";\r\nconst lowerHex = string(LOWER_HEX_POOL);\r\nconst upperHex = string(LOWER_HEX_POOL.toUpperCase());\r\n/**\r\n * Returns a Distribution that returns a random string comprised of numbers\r\n * or the characters `abcdef` (or `ABCDEF`) of length `length`.\r\n * @param length Length of the result string\r\n * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n */\r\nfunction hex(uppercase) {\r\n    if (uppercase) {\r\n        return upperHex;\r\n    }\r\n    else {\r\n        return lowerHex;\r\n    }\r\n}\n\nfunction convertSliceArgument(value, length) {\r\n    if (value < 0) {\r\n        return Math.max(value + length, 0);\r\n    }\r\n    else {\r\n        return Math.min(value, length);\r\n    }\r\n}\n\nfunction toInteger(value) {\r\n    const num = +value;\r\n    if (num < 0) {\r\n        return Math.ceil(num);\r\n    }\r\n    else {\r\n        return Math.floor(num);\r\n    }\r\n}\n\n/**\r\n * Returns a random value within the provided `source` within the sliced\r\n * bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\r\nfunction pick(engine, source, begin, end) {\r\n    const length = source.length;\r\n    if (length === 0) {\r\n        throw new RangeError(\"Cannot pick from an empty array\");\r\n    }\r\n    const start = begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\r\n    const finish = end === void 0 ? length : convertSliceArgument(toInteger(end), length);\r\n    if (start >= finish) {\r\n        throw new RangeError(`Cannot pick between bounds ${start} and ${finish}`);\r\n    }\r\n    const distribution = integer(start, finish - 1);\r\n    return source[distribution(engine)];\r\n}\n\nfunction multiply(distribution, multiplier) {\r\n    if (multiplier === 1) {\r\n        return distribution;\r\n    }\r\n    else if (multiplier === 0) {\r\n        return () => 0;\r\n    }\r\n    else {\r\n        return engine => distribution(engine) * multiplier;\r\n    }\r\n}\n\n/**\r\n * Returns a floating-point value within [0.0, 1.0)\r\n */\r\nfunction realZeroToOneExclusive(engine) {\r\n    return uint53(engine) / SMALLEST_UNSAFE_INTEGER;\r\n}\n\n/**\r\n * Returns a floating-point value within [0.0, 1.0]\r\n */\r\nfunction realZeroToOneInclusive(engine) {\r\n    return uint53Full(engine) / SMALLEST_UNSAFE_INTEGER;\r\n}\n\n/**\r\n * Returns a floating-point value within [min, max) or [min, max]\r\n * @param min The minimum floating-point value, inclusive.\r\n * @param max The maximum floating-point value.\r\n * @param inclusive If true, `max` will be inclusive.\r\n */\r\nfunction real(min, max, inclusive = false) {\r\n    if (!isFinite(min)) {\r\n        throw new RangeError(\"Expected min to be a finite number\");\r\n    }\r\n    else if (!isFinite(max)) {\r\n        throw new RangeError(\"Expected max to be a finite number\");\r\n    }\r\n    return add(multiply(inclusive ? realZeroToOneInclusive : realZeroToOneExclusive, max - min), min);\r\n}\n\nconst sliceArray = Array.prototype.slice;\n\n/**\r\n * Shuffles an array in-place\r\n * @param engine The Engine to use when choosing random values\r\n * @param array The array to shuffle\r\n * @param downTo minimum index to shuffle. Only used internally.\r\n */\r\nfunction shuffle(engine, array, downTo = 0) {\r\n    const length = array.length;\r\n    if (length) {\r\n        for (let i = (length - 1) >>> 0; i > downTo; --i) {\r\n            const distribution = integer(0, i);\r\n            const j = distribution(engine);\r\n            if (i !== j) {\r\n                const tmp = array[i];\r\n                array[i] = array[j];\r\n                array[j] = tmp;\r\n            }\r\n        }\r\n    }\r\n    return array;\r\n}\n\n/**\r\n * From the population array, produce an array with sampleSize elements that\r\n * are randomly chosen without repeats.\r\n * @param engine The Engine to use when choosing random values\r\n * @param population An array that has items to choose a sample from\r\n * @param sampleSize The size of the result array\r\n */\r\nfunction sample(engine, population, sampleSize) {\r\n    if (sampleSize < 0 ||\r\n        sampleSize > population.length ||\r\n        !isFinite(sampleSize)) {\r\n        throw new RangeError(\"Expected sampleSize to be within 0 and the length of the population\");\r\n    }\r\n    if (sampleSize === 0) {\r\n        return [];\r\n    }\r\n    const clone = sliceArray.call(population);\r\n    const length = clone.length;\r\n    if (length === sampleSize) {\r\n        return shuffle(engine, clone, 0);\r\n    }\r\n    const tailLength = length - sampleSize;\r\n    return shuffle(engine, clone, tailLength - 1).slice(tailLength);\r\n}\n\nconst stringRepeat = (() => {\r\n    try {\r\n        if (\"x\".repeat(3) === \"xxx\") {\r\n            return (pattern, count) => pattern.repeat(count);\r\n        }\r\n    }\r\n    catch (_) {\r\n        // nothing to do here\r\n    }\r\n    return (pattern, count) => {\r\n        let result = \"\";\r\n        while (count > 0) {\r\n            if (count & 1) {\r\n                result += pattern;\r\n            }\r\n            count >>= 1;\r\n            pattern += pattern;\r\n        }\r\n        return result;\r\n    };\r\n})();\n\nfunction zeroPad(text, zeroCount) {\r\n    return stringRepeat(\"0\", zeroCount - text.length) + text;\r\n}\r\n/**\r\n * Returns a Universally Unique Identifier Version 4.\r\n *\r\n * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n */\r\nfunction uuid4(engine) {\r\n    const a = engine.next() >>> 0;\r\n    const b = engine.next() | 0;\r\n    const c = engine.next() | 0;\r\n    const d = engine.next() >>> 0;\r\n    return (zeroPad(a.toString(16), 8) +\r\n        \"-\" +\r\n        zeroPad((b & 0xffff).toString(16), 4) +\r\n        \"-\" +\r\n        zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\r\n        \"-\" +\r\n        zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\r\n        \"-\" +\r\n        zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\r\n        zeroPad(d.toString(16), 8));\r\n}\n\n/**\r\n * An int32-producing Engine that uses `Math.random()`\r\n */\r\nconst nativeMath = {\r\n    next() {\r\n        return (Math.random() * UINT32_SIZE) | 0;\r\n    }\r\n};\n\n// tslint:disable:unified-signatures\r\n/**\r\n * A wrapper around an Engine that provides easy-to-use methods for\r\n * producing values based on known distributions\r\n */\r\nclass Random {\r\n    /**\r\n     * Creates a new Random wrapper\r\n     * @param engine The engine to use (defaults to a `Math.random`-based implementation)\r\n     */\r\n    constructor(engine = nativeMath) {\r\n        this.engine = engine;\r\n    }\r\n    /**\r\n     * Returns a value within [-0x80000000, 0x7fffffff]\r\n     */\r\n    int32() {\r\n        return int32(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [0, 0xffffffff]\r\n     */\r\n    uint32() {\r\n        return uint32(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [0, 0x1fffffffffffff]\r\n     */\r\n    uint53() {\r\n        return uint53(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [0, 0x20000000000000]\r\n     */\r\n    uint53Full() {\r\n        return uint53Full(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n     */\r\n    int53() {\r\n        return int53(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n     */\r\n    int53Full() {\r\n        return int53Full(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [min, max]\r\n     * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n     * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n     */\r\n    integer(min, max) {\r\n        return integer(min, max)(this.engine);\r\n    }\r\n    /**\r\n     * Returns a floating-point value within [0.0, 1.0]\r\n     */\r\n    realZeroToOneInclusive() {\r\n        return realZeroToOneInclusive(this.engine);\r\n    }\r\n    /**\r\n     * Returns a floating-point value within [0.0, 1.0)\r\n     */\r\n    realZeroToOneExclusive() {\r\n        return realZeroToOneExclusive(this.engine);\r\n    }\r\n    /**\r\n     * Returns a floating-point value within [min, max) or [min, max]\r\n     * @param min The minimum floating-point value, inclusive.\r\n     * @param max The maximum floating-point value.\r\n     * @param inclusive If true, `max` will be inclusive.\r\n     */\r\n    real(min, max, inclusive = false) {\r\n        return real(min, max, inclusive)(this.engine);\r\n    }\r\n    bool(numerator, denominator) {\r\n        return bool(numerator, denominator)(this.engine);\r\n    }\r\n    /**\r\n     * Return a random value within the provided `source` within the sliced\r\n     * bounds of `begin` and `end`.\r\n     * @param source an array of items to pick from\r\n     * @param begin the beginning slice index (defaults to `0`)\r\n     * @param end the ending slice index (defaults to `source.length`)\r\n     */\r\n    pick(source, begin, end) {\r\n        return pick(this.engine, source, begin, end);\r\n    }\r\n    /**\r\n     * Shuffles an array in-place\r\n     * @param array The array to shuffle\r\n     */\r\n    shuffle(array) {\r\n        return shuffle(this.engine, array);\r\n    }\r\n    /**\r\n     * From the population array, returns an array with sampleSize elements that\r\n     * are randomly chosen without repeats.\r\n     * @param population An array that has items to choose a sample from\r\n     * @param sampleSize The size of the result array\r\n     */\r\n    sample(population, sampleSize) {\r\n        return sample(this.engine, population, sampleSize);\r\n    }\r\n    /**\r\n     * Returns a value within [1, sideCount]\r\n     * @param sideCount The number of sides of the die\r\n     */\r\n    die(sideCount) {\r\n        return die(sideCount)(this.engine);\r\n    }\r\n    /**\r\n     * Returns an array of length `dieCount` of values within [1, sideCount]\r\n     * @param sideCount The number of sides of each die\r\n     * @param dieCount The number of dice\r\n     */\r\n    dice(sideCount, dieCount) {\r\n        return dice(sideCount, dieCount)(this.engine);\r\n    }\r\n    /**\r\n     * Returns a Universally Unique Identifier Version 4.\r\n     *\r\n     * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n     */\r\n    uuid4() {\r\n        return uuid4(this.engine);\r\n    }\r\n    string(length, pool) {\r\n        return string(pool)(this.engine, length);\r\n    }\r\n    /**\r\n     * Returns a random string comprised of numbers or the characters `abcdef`\r\n     * (or `ABCDEF`) of length `length`.\r\n     * @param length Length of the result string\r\n     * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n     */\r\n    hex(length, uppercase) {\r\n        return hex(uppercase)(this.engine, length);\r\n    }\r\n    /**\r\n     * Returns a random `Date` within the inclusive range of [`start`, `end`].\r\n     * @param start The minimum `Date`\r\n     * @param end The maximum `Date`\r\n     */\r\n    date(start, end) {\r\n        return date(start, end)(this.engine);\r\n    }\r\n}\n\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\r\n */\r\nconst I32Array = (() => {\r\n    try {\r\n        const buffer = new ArrayBuffer(4);\r\n        const view = new Int32Array(buffer);\r\n        view[0] = INT32_SIZE;\r\n        if (view[0] === -INT32_SIZE) {\r\n            return Int32Array;\r\n        }\r\n    }\r\n    catch (_) {\r\n        // nothing to do here\r\n    }\r\n    return Array;\r\n})();\n\nlet data = null;\r\nconst COUNT = 128;\r\nlet index = COUNT;\r\n/**\r\n * An Engine that relies on the globally-available `crypto.getRandomValues`,\r\n * which is typically available in modern browsers.\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\r\n *\r\n * If unavailable or otherwise non-functioning, then `browserCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\r\nconst browserCrypto = {\r\n    next() {\r\n        if (index >= COUNT) {\r\n            if (data === null) {\r\n                data = new I32Array(COUNT);\r\n            }\r\n            crypto.getRandomValues(data);\r\n            index = 0;\r\n        }\r\n        return data[index++] | 0;\r\n    }\r\n};\n\n/**\r\n * Returns an array of random int32 values, based on current time\r\n * and a random number engine\r\n *\r\n * @param engine an Engine to pull random values from, default `nativeMath`\r\n * @param length the length of the Array, minimum 1, default 16\r\n */\r\nfunction createEntropy(engine = nativeMath, length = 16) {\r\n    const array = [];\r\n    array.push(new Date().getTime() | 0);\r\n    for (let i = 1; i < length; ++i) {\r\n        array[i] = engine.next() | 0;\r\n    }\r\n    return array;\r\n}\n\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\r\n */\r\nconst imul = (() => {\r\n    try {\r\n        if (Math.imul(UINT32_MAX, 5) === -5) {\r\n            return Math.imul;\r\n        }\r\n    }\r\n    catch (_) {\r\n        // nothing to do here\r\n    }\r\n    const UINT16_MAX = 0xffff;\r\n    return (a, b) => {\r\n        const ah = (a >>> 16) & UINT16_MAX;\r\n        const al = a & UINT16_MAX;\r\n        const bh = (b >>> 16) & UINT16_MAX;\r\n        const bl = b & UINT16_MAX;\r\n        // the shift by 0 fixes the sign on the high part\r\n        // the final |0 converts the unsigned value into a signed value\r\n        return (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;\r\n    };\r\n})();\n\nconst ARRAY_SIZE = 624;\r\nconst ARRAY_MAX = ARRAY_SIZE - 1;\r\nconst M = 397;\r\nconst ARRAY_SIZE_MINUS_M = ARRAY_SIZE - M;\r\nconst A = 0x9908b0df;\r\n/**\r\n * An Engine that is a pseudorandom number generator using the Mersenne\r\n * Twister algorithm based on the prime 2**19937 − 1\r\n *\r\n * See http://en.wikipedia.org/wiki/Mersenne_twister\r\n */\r\nclass MersenneTwister19937 {\r\n    /**\r\n     * MersenneTwister19937 should not be instantiated directly.\r\n     * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.\r\n     */\r\n    constructor() {\r\n        this.data = new I32Array(ARRAY_SIZE);\r\n        this.index = 0; // integer within [0, 624]\r\n        this.uses = 0;\r\n    }\r\n    /**\r\n     * Returns a MersenneTwister19937 seeded with an initial int32 value\r\n     * @param initial the initial seed value\r\n     */\r\n    static seed(initial) {\r\n        return new MersenneTwister19937().seed(initial);\r\n    }\r\n    /**\r\n     * Returns a MersenneTwister19937 seeded with zero or more int32 values\r\n     * @param source A series of int32 values\r\n     */\r\n    static seedWithArray(source) {\r\n        return new MersenneTwister19937().seedWithArray(source);\r\n    }\r\n    /**\r\n     * Returns a MersenneTwister19937 seeded with the current time and\r\n     * a series of natively-generated random values\r\n     */\r\n    static autoSeed() {\r\n        return MersenneTwister19937.seedWithArray(createEntropy());\r\n    }\r\n    /**\r\n     * Returns the next int32 value of the sequence\r\n     */\r\n    next() {\r\n        if ((this.index | 0) >= ARRAY_SIZE) {\r\n            refreshData(this.data);\r\n            this.index = 0;\r\n        }\r\n        const value = this.data[this.index];\r\n        this.index = (this.index + 1) | 0;\r\n        this.uses += 1;\r\n        return temper(value) | 0;\r\n    }\r\n    /**\r\n     * Returns the number of times that the Engine has been used.\r\n     *\r\n     * This can be provided to an unused MersenneTwister19937 with the same\r\n     * seed, bringing it to the exact point that was left off.\r\n     */\r\n    getUseCount() {\r\n        return this.uses;\r\n    }\r\n    /**\r\n     * Discards one or more items from the engine\r\n     * @param count The count of items to discard\r\n     */\r\n    discard(count) {\r\n        if (count <= 0) {\r\n            return this;\r\n        }\r\n        this.uses += count;\r\n        if ((this.index | 0) >= ARRAY_SIZE) {\r\n            refreshData(this.data);\r\n            this.index = 0;\r\n        }\r\n        while (count + this.index > ARRAY_SIZE) {\r\n            count -= ARRAY_SIZE - this.index;\r\n            refreshData(this.data);\r\n            this.index = 0;\r\n        }\r\n        this.index = (this.index + count) | 0;\r\n        return this;\r\n    }\r\n    seed(initial) {\r\n        let previous = 0;\r\n        this.data[0] = previous = initial | 0;\r\n        for (let i = 1; i < ARRAY_SIZE; i = (i + 1) | 0) {\r\n            this.data[i] = previous =\r\n                (imul(previous ^ (previous >>> 30), 0x6c078965) + i) | 0;\r\n        }\r\n        this.index = ARRAY_SIZE;\r\n        this.uses = 0;\r\n        return this;\r\n    }\r\n    seedWithArray(source) {\r\n        this.seed(0x012bd6aa);\r\n        seedWithArray(this.data, source);\r\n        return this;\r\n    }\r\n}\r\nfunction refreshData(data) {\r\n    let k = 0;\r\n    let tmp = 0;\r\n    for (; (k | 0) < ARRAY_SIZE_MINUS_M; k = (k + 1) | 0) {\r\n        tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\r\n        data[k] = data[(k + M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n    }\r\n    for (; (k | 0) < ARRAY_MAX; k = (k + 1) | 0) {\r\n        tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\r\n        data[k] =\r\n            data[(k - ARRAY_SIZE_MINUS_M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n    }\r\n    tmp = (data[ARRAY_MAX] & INT32_SIZE) | (data[0] & INT32_MAX);\r\n    data[ARRAY_MAX] = data[M - 1] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n}\r\nfunction temper(value) {\r\n    value ^= value >>> 11;\r\n    value ^= (value << 7) & 0x9d2c5680;\r\n    value ^= (value << 15) & 0xefc60000;\r\n    return value ^ (value >>> 18);\r\n}\r\nfunction seedWithArray(data, source) {\r\n    let i = 1;\r\n    let j = 0;\r\n    const sourceLength = source.length;\r\n    let k = Math.max(sourceLength, ARRAY_SIZE) | 0;\r\n    let previous = data[0] | 0;\r\n    for (; (k | 0) > 0; --k) {\r\n        data[i] = previous =\r\n            ((data[i] ^ imul(previous ^ (previous >>> 30), 0x0019660d)) +\r\n                (source[j] | 0) +\r\n                (j | 0)) |\r\n                0;\r\n        i = (i + 1) | 0;\r\n        ++j;\r\n        if ((i | 0) > ARRAY_MAX) {\r\n            data[0] = data[ARRAY_MAX];\r\n            i = 1;\r\n        }\r\n        if (j >= sourceLength) {\r\n            j = 0;\r\n        }\r\n    }\r\n    for (k = ARRAY_MAX; (k | 0) > 0; --k) {\r\n        data[i] = previous =\r\n            ((data[i] ^ imul(previous ^ (previous >>> 30), 0x5d588b65)) - i) | 0;\r\n        i = (i + 1) | 0;\r\n        if ((i | 0) > ARRAY_MAX) {\r\n            data[0] = data[ARRAY_MAX];\r\n            i = 1;\r\n        }\r\n    }\r\n    data[0] = INT32_SIZE;\r\n}\n\nlet data$1 = null;\r\nconst COUNT$1 = 128;\r\nlet index$1 = COUNT$1;\r\n/**\r\n * An Engine that relies on the node-available\r\n * `require('crypto').randomBytes`, which has been available since 0.58.\r\n *\r\n * See https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\r\n *\r\n * If unavailable or otherwise non-functioning, then `nodeCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\r\nconst nodeCrypto = {\r\n    next() {\r\n        if (index$1 >= COUNT$1) {\r\n            data$1 = new Int32Array(new Int8Array(require(\"crypto\").randomBytes(4 * COUNT$1)).buffer);\r\n            index$1 = 0;\r\n        }\r\n        return data$1[index$1++] | 0;\r\n    }\r\n};\n\n/**\r\n * Returns a Distribution to random value within the provided `source`\r\n * within the sliced bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\r\nfunction picker(source, begin, end) {\r\n    const clone = sliceArray.call(source, begin, end);\r\n    if (clone.length === 0) {\r\n        throw new RangeError(`Cannot pick from a source with no items`);\r\n    }\r\n    const distribution = integer(0, clone.length - 1);\r\n    return engine => clone[distribution(engine)];\r\n}\n\nexport { Random, browserCrypto, nativeMath, MersenneTwister19937, nodeCrypto, bool, date, dice, die, hex, int32, int53, int53Full, integer, pick, picker, real, realZeroToOneExclusive, realZeroToOneInclusive, sample, shuffle, string, uint32, uint53, uint53Full, uuid4, createEntropy };\n//# sourceMappingURL=random-js.esm.js.map\n","import * as Random from 'random-js';\nimport Matrix from 'ml-matrix';\n\nexport function checkFloat(n) {\n  return n > 0.0 && n <= 1.0;\n}\n\n\n/**\n * Select n with replacement elements on the training set and values, where n is the size of the training set.\n * @ignore\n * @param {Matrix} trainingSet\n * @param {Array} trainingValue\n * @param {number} seed - seed for the random selection, must be a 32-bit integer.\n * @return {object} with new X and y.\n */\nexport function examplesBaggingWithReplacement(\n  trainingSet,\n  trainingValue,\n  seed\n) {\n  var engine;\n  var distribution = Random.integer(0, trainingSet.rows - 1);\n  if (seed === undefined) {\n    engine = Random.MersenneTwister19937.autoSeed();\n  } else if (Number.isInteger(seed)) {\n    engine = Random.MersenneTwister19937.seed(seed);\n  } else {\n    throw new RangeError(\n      `Expected seed must be undefined or integer not ${seed}`\n    );\n  }\n\n  var Xr = new Array(trainingSet.rows);\n  var yr = new Array(trainingSet.rows);\n\n  for (var i = 0; i < trainingSet.rows; ++i) {\n    var index = distribution(engine);\n    Xr[i] = trainingSet.getRow(index);\n    yr[i] = trainingValue[index];\n  }\n\n  return {\n    X: new Matrix(Xr),\n    y: yr\n  };\n}\n\n/**\n * selects n features from the training set with or without replacement, returns the new training set and the indexes used.\n * @ignore\n * @param {Matrix} trainingSet\n * @param {number} n - features.\n * @param {boolean} replacement\n * @param {number} seed - seed for the random selection, must be a 32-bit integer.\n * @return {object}\n */\nexport function featureBagging(trainingSet, n, replacement, seed) {\n  if (trainingSet.columns < n) {\n    throw new RangeError(\n      'N should be less or equal to the number of columns of X'\n    );\n  }\n\n  var distribution = Random.integer(0, trainingSet.columns - 1);\n  var engine;\n  if (seed === undefined) {\n    engine = Random.MersenneTwister19937.autoSeed();\n  } else if (Number.isInteger(seed)) {\n    engine = Random.MersenneTwister19937.seed(seed);\n  } else {\n    throw new RangeError(\n      `Expected seed must be undefined or integer not ${seed}`\n    );\n  }\n\n  var toRet = new Matrix(trainingSet.rows, n);\n\n  if (replacement) {\n    var usedIndex = new Array(n);\n    for (var i = 0; i < n; ++i) {\n      var index = distribution(engine);\n      usedIndex[i] = index;\n      toRet.setColumn(i, trainingSet.getColumn(index));\n    }\n  } else {\n    usedIndex = new Set();\n    index = distribution(engine);\n    for (i = 0; i < n; ++i) {\n      while (usedIndex.has(index)) {\n        index = distribution(engine);\n      }\n      toRet.setColumn(i, trainingSet.getColumn(index));\n      usedIndex.add(index);\n    }\n    usedIndex = Array.from(usedIndex);\n  }\n\n  return {\n    X: toRet,\n    usedIndex: usedIndex\n  };\n}\n","import {\n  DecisionTreeClassifier as DTClassifier,\n  DecisionTreeRegression as DTRegression\n} from 'ml-cart';\nimport { Matrix, WrapperMatrix2D, MatrixTransposeView, MatrixColumnSelectionView } from 'ml-matrix';\n\nimport * as Utils from './utils';\n\n/**\n * @class RandomForestBase\n */\nexport class RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number|String} [options.maxFeatures] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement] - use replacement over the sample features.\n   * @param {number} [options.seed] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators] - number of estimator to use.\n   * @param {object} [options.treeOptions] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {boolean} [options.isClassifier] - boolean to check if is a classifier or regression model (used by subclasses).\n   * @param {boolean} [options.useSampleBagging] - use bagging over training samples.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.replacement = model.replacement;\n      this.maxFeatures = model.maxFeatures;\n      this.nEstimators = model.nEstimators;\n      this.treeOptions = model.treeOptions;\n      this.isClassifier = model.isClassifier;\n      this.seed = model.seed;\n      this.n = model.n;\n      this.indexes = model.indexes;\n      this.useSampleBagging = model.useSampleBagging;\n\n      var Estimator = this.isClassifier ? DTClassifier : DTRegression;\n      this.estimators = model.estimators.map((est) => Estimator.load(est));\n    } else {\n      this.replacement = options.replacement;\n      this.maxFeatures = options.maxFeatures;\n      this.nEstimators = options.nEstimators;\n      this.treeOptions = options.treeOptions;\n      this.isClassifier = options.isClassifier;\n      this.seed = options.seed;\n      this.useSampleBagging = options.useSampleBagging;\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and labels.\n   * @param {Matrix|Array} trainingSet\n   * @param {Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n\n    this.maxFeatures = this.maxFeatures || trainingSet.columns;\n\n    if (Utils.checkFloat(this.maxFeatures)) {\n      this.n = Math.floor(trainingSet.columns * this.maxFeatures);\n    } else if (Number.isInteger(this.maxFeatures)) {\n      if (this.maxFeatures > trainingSet.columns) {\n        throw new RangeError(\n          `The maxFeatures parameter should be less than ${trainingSet.columns}`\n        );\n      } else {\n        this.n = this.maxFeatures;\n      }\n    } else {\n      throw new RangeError(\n        `Cannot process the maxFeatures parameter ${this.maxFeatures}`\n      );\n    }\n\n    if (this.isClassifier) {\n      var Estimator = DTClassifier;\n    } else {\n      Estimator = DTRegression;\n    }\n\n    this.estimators = new Array(this.nEstimators);\n    this.indexes = new Array(this.nEstimators);\n\n    for (var i = 0; i < this.nEstimators; ++i) {\n      var res = this.useSampleBagging\n        ? Utils.examplesBaggingWithReplacement(\n          trainingSet,\n          trainingValues,\n          this.seed\n        )\n        : { X: trainingSet, y: trainingValues };\n      var X = res.X;\n      var y = res.y;\n\n      res = Utils.featureBagging(X, this.n, this.replacement, this.seed);\n      X = res.X;\n\n      this.indexes[i] = res.usedIndex;\n      this.estimators[i] = new Estimator(this.treeOptions);\n      this.estimators[i].train(X, y);\n    }\n  }\n\n  /**\n   * Method that returns the way the algorithm generates the predictions, for example, in classification\n   * you can return the mode of all predictions retrieved by the trees, or in case of regression you can\n   * use the mean or the median.\n   * @abstract\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction.\n   */\n  // eslint-disable-next-line no-unused-vars\n  selection(values) {\n    throw new Error(\"Abstract method 'selection' not implemented!\");\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Matrix|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    var predictionValues = new Array(this.nEstimators);\n    toPredict = Matrix.checkMatrix(toPredict);\n    for (var i = 0; i < this.nEstimators; ++i) {\n      var X = new MatrixColumnSelectionView(toPredict, this.indexes[i]); // get features for estimator\n      predictionValues[i] = this.estimators[i].predict(X);\n    }\n\n    predictionValues = new MatrixTransposeView(new WrapperMatrix2D(predictionValues));\n    var predictions = new Array(predictionValues.rows);\n    for (i = 0; i < predictionValues.rows; ++i) {\n      predictions[i] = this.selection(predictionValues.getRow(i));\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      indexes: this.indexes,\n      n: this.n,\n      replacement: this.replacement,\n      maxFeatures: this.maxFeatures,\n      nEstimators: this.nEstimators,\n      treeOptions: this.treeOptions,\n      isClassifier: this.isClassifier,\n      seed: this.seed,\n      estimators: this.estimators.map((est) => est.toJSON()),\n      useSampleBagging: this.useSampleBagging\n    };\n  }\n}\n","import { RandomForestBase } from './RandomForestBase';\n\nconst defaultOptions = {\n  maxFeatures: 1.0,\n  replacement: true,\n  nEstimators: 10,\n  seed: 42,\n  useSampleBagging: false\n};\n\n/**\n * @class RandomForestClassifier\n * @augments RandomForestBase\n */\nexport class RandomForestClassifier extends RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement=true] - use replacement over the sample features.\n   * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators=10] - number of estimator to use.\n   * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {boolean} [options.useSampleBagging=false] - use bagging over training samples.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      super(true, model.baseModel);\n    } else {\n      options = Object.assign({}, defaultOptions, options);\n      options.isClassifier = true;\n      super(options);\n    }\n  }\n\n  /**\n   * retrieve the prediction given the selection method.\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction\n   */\n  selection(values) {\n    return mode(values);\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    var baseModel = super.toJSON();\n    return {\n      baseModel: baseModel,\n      name: 'RFClassifier'\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {RandomForestClassifier}\n   */\n  static load(model) {\n    if (model.name !== 'RFClassifier') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new RandomForestClassifier(true, model);\n  }\n}\n\n/**\n * Return the most repeated element on the array.\n * @param {Array} arr\n * @return {number} mode\n */\nfunction mode(arr) {\n  return arr\n    .sort(\n      (a, b) =>\n        arr.filter((v) => v === a).length - arr.filter((v) => v === b).length\n    )\n    .pop();\n}\n","(function(){function a(d){for(var e=0,f=d.length-1,g=void 0,h=void 0,i=void 0,j=c(e,f);!0;){if(f<=e)return d[j];if(f==e+1)return d[e]>d[f]&&b(d,e,f),d[j];for(g=c(e,f),d[g]>d[f]&&b(d,g,f),d[e]>d[f]&&b(d,e,f),d[g]>d[e]&&b(d,g,e),b(d,g,e+1),h=e+1,i=f;!0;){do h++;while(d[e]>d[h]);do i--;while(d[i]>d[e]);if(i<h)break;b(d,h,i)}b(d,e,i),i<=j&&(e=h),i>=j&&(f=i-1)}}var b=function b(d,e,f){var _ref;return _ref=[d[f],d[e]],d[e]=_ref[0],d[f]=_ref[1],_ref},c=function c(d,e){return~~((d+e)/2)};'undefined'!=typeof module&&module.exports?module.exports=a:window.median=a})();\n","import quickSelectMedian from 'median-quickselect';\nimport isArray from 'is-any-array';\n\n/**\n * Computes the median of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction median(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  return quickSelectMedian(input.slice());\n}\n\nexport default median;\n","import arrayMean from 'ml-array-mean';\nimport arrayMedian from 'ml-array-median';\n\nimport { RandomForestBase } from './RandomForestBase';\n\nconst selectionMethods = {\n  mean: arrayMean,\n  median: arrayMedian\n};\n\nconst defaultOptions = {\n  maxFeatures: 1.0,\n  replacement: false,\n  nEstimators: 10,\n  treeOptions: {},\n  selectionMethod: 'mean',\n  seed: 42,\n  useSampleBagging: false\n};\n\n/**\n * @class RandomForestRegression\n * @augments RandomForestBase\n */\nexport class RandomForestRegression extends RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement=true] - use replacement over the sample features.\n   * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators=10] - number of estimator to use.\n   * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {string} [options.selectionMethod=\"mean\"] - the way to calculate the prediction from estimators, \"mean\" and \"median\" are supported.\n   * @param {boolean} [options.useSampleBagging=false] - use bagging over training samples.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      super(true, model.baseModel);\n      this.selectionMethod = model.selectionMethod;\n    } else {\n      options = Object.assign({}, defaultOptions, options);\n\n      if (\n        !(\n          options.selectionMethod === 'mean' ||\n          options.selectionMethod === 'median'\n        )\n      ) {\n        throw new RangeError(\n          `Unsupported selection method ${options.selectionMethod}`\n        );\n      }\n\n      options.isClassifier = false;\n\n      super(options);\n      this.selectionMethod = options.selectionMethod;\n    }\n  }\n\n  /**\n   * retrieve the prediction given the selection method.\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction\n   */\n  selection(values) {\n    return selectionMethods[this.selectionMethod](values);\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    var baseModel = super.toJSON();\n    return {\n      baseModel: baseModel,\n      selectionMethod: this.selectionMethod,\n      name: 'RFRegression'\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {RandomForestRegression}\n   */\n  static load(model) {\n    if (model.name !== 'RFRegression') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new RandomForestRegression(true, model);\n  }\n}\n","import { Matrix, MatrixTransposeView, EVD, SVD } from 'ml-matrix';\n\n/**\n * Creates new PCA (Principal Component Analysis) from the dataset\n * @param {Matrix} dataset - dataset or covariance matrix\n * @param {Object} [options]\n * @param {boolean} [options.isCovarianceMatrix=false] - true if the dataset is a covariance matrix\n * @param {boolean} [options.useCovarianceMatrix=false] - force the use of the covariance matrix instead of singular value decomposition.\n * @param {boolean} [options.center=true] - should the data be centered (subtract the mean)\n * @param {boolean} [options.scale=false] - should the data be scaled (divide by the standard deviation)\n * */\nexport class PCA {\n  constructor(dataset, options = {}) {\n    if (dataset === true) {\n      const model = options;\n      this.center = model.center;\n      this.scale = model.scale;\n      this.means = model.means;\n      this.stdevs = model.stdevs;\n      this.U = Matrix.checkMatrix(model.U);\n      this.S = model.S;\n      return;\n    }\n\n    dataset = new Matrix(dataset);\n\n    const {\n      isCovarianceMatrix = false,\n      center = true,\n      scale = false\n    } = options;\n\n    this.center = center;\n    this.scale = scale;\n    this.means = null;\n    this.stdevs = null;\n\n    if (isCovarianceMatrix) {\n      // user provided a covariance matrix instead of dataset\n      this._computeFromCovarianceMatrix(dataset);\n      return;\n    }\n\n    var useCovarianceMatrix;\n    if (typeof options.useCovarianceMatrix === 'boolean') {\n      useCovarianceMatrix = options.useCovarianceMatrix;\n    } else {\n      useCovarianceMatrix = dataset.rows > dataset.columns;\n    }\n\n    if (useCovarianceMatrix) {\n      // user provided a dataset but wants us to compute and use the covariance matrix\n      this._adjust(dataset);\n      const covarianceMatrix = new MatrixTransposeView(dataset)\n        .mmul(dataset)\n        .div(dataset.rows - 1);\n      this._computeFromCovarianceMatrix(covarianceMatrix);\n    } else {\n      this._adjust(dataset);\n      var svd = new SVD(dataset, {\n        computeLeftSingularVectors: false,\n        computeRightSingularVectors: true,\n        autoTranspose: true\n      });\n\n      this.U = svd.rightSingularVectors;\n\n      const singularValues = svd.diagonal;\n      const eigenvalues = [];\n      for (const singularValue of singularValues) {\n        eigenvalues.push((singularValue * singularValue) / (dataset.rows - 1));\n      }\n      this.S = eigenvalues;\n    }\n  }\n\n  /**\n   * Load a PCA model from JSON\n   * @param {Object} model\n   * @return {PCA}\n   */\n  static load(model) {\n    if (typeof model.name !== 'string') {\n      throw new TypeError('model must have a name property');\n    }\n    if (model.name !== 'PCA') {\n      throw new RangeError(`invalid model: ${model.name}`);\n    }\n    return new PCA(true, model);\n  }\n\n  /**\n   * Project the dataset into the PCA space\n   * @param {Matrix} dataset\n   * @param {Object} options\n   * @return {Matrix} dataset projected in the PCA space\n   */\n  predict(dataset, options = {}) {\n    const { nComponents = this.U.columns } = options;\n\n    dataset = new Matrix(dataset);\n    if (this.center) {\n      dataset.subRowVector(this.means);\n      if (this.scale) {\n        dataset.divRowVector(this.stdevs);\n      }\n    }\n\n    var predictions = dataset.mmul(this.U);\n    return predictions.subMatrix(0, predictions.rows - 1, 0, nComponents - 1);\n  }\n\n  /**\n   * Returns the proportion of variance for each component\n   * @return {[number]}\n   */\n  getExplainedVariance() {\n    var sum = 0;\n    for (const s of this.S) {\n      sum += s;\n    }\n    return this.S.map((value) => value / sum);\n  }\n\n  /**\n   * Returns the cumulative proportion of variance\n   * @return {[number]}\n   */\n  getCumulativeVariance() {\n    var explained = this.getExplainedVariance();\n    for (var i = 1; i < explained.length; i++) {\n      explained[i] += explained[i - 1];\n    }\n    return explained;\n  }\n\n  /**\n   * Returns the Eigenvectors of the covariance matrix\n   * @returns {Matrix}\n   */\n  getEigenvectors() {\n    return this.U;\n  }\n\n  /**\n   * Returns the Eigenvalues (on the diagonal)\n   * @returns {[number]}\n   */\n  getEigenvalues() {\n    return this.S;\n  }\n\n  /**\n   * Returns the standard deviations of the principal components\n   * @returns {[number]}\n   */\n  getStandardDeviations() {\n    return this.S.map((x) => Math.sqrt(x));\n  }\n\n  /**\n   * Returns the loadings matrix\n   * @return {Matrix}\n   */\n  getLoadings() {\n    return this.U.transpose();\n  }\n\n  /**\n   * Export the current model to a JSON object\n   * @return {Object} model\n   */\n  toJSON() {\n    return {\n      name: 'PCA',\n      center: this.center,\n      scale: this.scale,\n      means: this.means,\n      stdevs: this.stdevs,\n      U: this.U,\n      S: this.S\n    };\n  }\n\n  _adjust(dataset) {\n    if (this.center) {\n      const mean = dataset.mean('column');\n      const stdevs = this.scale\n        ? dataset.standardDeviation('column', { mean })\n        : null;\n      this.means = mean;\n      dataset.subRowVector(mean);\n      if (this.scale) {\n        for (var i = 0; i < stdevs.length; i++) {\n          if (stdevs[i] === 0) {\n            throw new RangeError(\n              `Cannot scale the dataset (standard deviation is zero at index ${i}`\n            );\n          }\n        }\n        this.stdevs = stdevs;\n        dataset.divRowVector(stdevs);\n      }\n    }\n  }\n\n  _computeFromCovarianceMatrix(dataset) {\n    const evd = new EVD(dataset, { assumeSymmetric: true });\n    this.U = evd.eigenvectorMatrix;\n    this.U.flipRows();\n    this.S = evd.realEigenvalues;\n    this.S.reverse();\n  }\n}\n","export function squaredEuclidean(p, q) {\r\n    let d = 0;\r\n    for (let i = 0; i < p.length; i++) {\r\n        d += (p[i] - q[i]) * (p[i] - q[i]);\r\n    }\r\n    return d;\r\n}\r\nexport function euclidean(p, q) {\r\n    return Math.sqrt(squaredEuclidean(p, q));\r\n}\r\n","'use strict';\n\n\n/**\n * Computes a distance/similarity matrix given an array of data and a distance/similarity function.\n * @param {Array} data An array of data\n * @param {function} distanceFn  A function that accepts two arguments and computes a distance/similarity between them\n * @return {Array<Array>} The similarity matrix. The similarity matrix is square and has a size equal to the length of\n * the data array\n */\nfunction distanceMatrix(data, distanceFn) {\n    const length = data.length;\n    let result = Array.from({length}).map(() => Array.from({length}));\n\n    // Compute upper distance matrix\n    for (let i = 0; i < length; i++) {\n        for (let j = 0; j <= i; j++) {\n            result[i][j] = distanceFn(data[i], data[j]);\n        }\n    }\n\n    // Copy to lower distance matrix\n    for (let i = 0; i < length; i++) {\n        for (let j = i + 1; j < length; j++) {\n            result[i][j] = result[j][i];\n        }\n    }\n\n    return result;\n}\n\nmodule.exports = distanceMatrix;\n","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n","module.exports = require('./lib/heap');\n","import Heap from 'heap';\n\nexport default class Cluster {\n  constructor() {\n    this.children = [];\n    this.distance = -1;\n    this.index = [];\n  }\n\n  /**\n   * Creates an array of values where maximum distance smaller than the threshold\n   * @param {number} threshold\n   * @return {Array <Cluster>}\n   */\n  cut(threshold) {\n    if (threshold < 0) throw new RangeError('Threshold too small');\n    var root = new Cluster();\n    root.children = this.children;\n    root.distance = this.distance;\n    root.index = this.index;\n    var list = [root];\n    var ans = [];\n    while (list.length > 0) {\n      var aux = list.shift();\n      if (threshold >= aux.distance) {\n        ans.push(aux);\n      } else {\n        list = list.concat(aux.children);\n      }\n    }\n    return ans;\n  }\n\n  /**\n   * Merge the leaves in the minimum way to have 'minGroups' number of clusters\n   * @param {number} minGroups - Them minimum number of children the first level of the tree should have\n   * @return {Cluster}\n   */\n  group(minGroups) {\n    if (!Number.isInteger(minGroups) || minGroups < 1) {\n      throw new RangeError('Number of groups must be a positive integer');\n    }\n\n    const heap = new Heap(function (a, b) {\n      return b.distance - a.distance;\n    });\n\n    heap.push(this);\n\n    while (heap.size() < minGroups) {\n      var first = heap.pop();\n      if (first.children.length === 0) {\n        break;\n      }\n      first.children.forEach((child) => heap.push(child));\n    }\n\n    var root = new Cluster();\n    root.children = heap.toArray();\n    root.distance = this.distance;\n\n    return root;\n  }\n\n  /**\n   * Traverses the tree depth-first and provide callback to be called on each individual node\n   * @param {function} cb - The callback to be called on each node encounter\n   * @type {Cluster}\n   */\n  traverse(cb) {\n    function visit(root, callback) {\n      callback(root);\n      if (root.children) {\n        for (var i = root.children.length - 1; i >= 0; i--) {\n          visit(root.children[i], callback);\n        }\n      }\n    }\n    visit(this, cb);\n  }\n}\n","import Cluster from './Cluster';\n\nexport default class ClusterLeaf extends Cluster {\n  constructor(index) {\n    super();\n    this.index = index;\n    this.distance = 0;\n    this.children = [];\n  }\n}\n","import { euclidean } from 'ml-distance-euclidean';\nimport distanceMatrix from 'ml-distance-matrix';\n\nimport ClusterLeaf from './ClusterLeaf';\nimport Cluster from './Cluster';\n\n/**\n * @private\n * @param cluster1\n * @param cluster2\n * @param disFun\n * @returns {number}\n */\nfunction simpleLink(cluster1, cluster2, disFun) {\n  var m = 10e100;\n  for (var i = 0; i < cluster1.length; i++) {\n    for (var j = 0; j < cluster2.length; j++) {\n      var d = disFun[cluster1[i]][cluster2[j]];\n      m = Math.min(d, m);\n    }\n  }\n  return m;\n}\n\n/**\n * @private\n * @param cluster1\n * @param cluster2\n * @param disFun\n * @returns {number}\n */\nfunction completeLink(cluster1, cluster2, disFun) {\n  var m = -1;\n  for (var i = 0; i < cluster1.length; i++) {\n    for (var j = 0; j < cluster2.length; j++) {\n      var d = disFun[cluster1[i]][cluster2[j]];\n      m = Math.max(d, m);\n    }\n  }\n  return m;\n}\n\n/**\n * @private\n * @param cluster1\n * @param cluster2\n * @param disFun\n * @returns {number}\n */\nfunction averageLink(cluster1, cluster2, disFun) {\n  var m = 0;\n  for (var i = 0; i < cluster1.length; i++) {\n    for (var j = 0; j < cluster2.length; j++) {\n      m += disFun[cluster1[i]][cluster2[j]];\n    }\n  }\n  return m / (cluster1.length * cluster2.length);\n}\n\n/**\n * @private\n * @param cluster1\n * @param cluster2\n * @param disFun\n * @returns {*}\n */\nfunction centroidLink(cluster1, cluster2, disFun) {\n  var dist = new Array(cluster1.length * cluster2.length);\n  for (var i = 0; i < cluster1.length; i++) {\n    for (var j = 0; j < cluster2.length; j++) {\n      dist[i * cluster2.length + j] = disFun[cluster1[i]][cluster2[j]];\n    }\n  }\n  return median(dist);\n}\n\n/**\n * @private\n * @param cluster1\n * @param cluster2\n * @param disFun\n * @returns {number}\n */\nfunction wardLink(cluster1, cluster2, disFun) {\n  return (\n    (centroidLink(cluster1, cluster2, disFun) *\n      cluster1.length *\n      cluster2.length) /\n    (cluster1.length + cluster2.length)\n  );\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction median(values, alreadySorted) {\n  if (alreadySorted === undefined) alreadySorted = false;\n  if (!alreadySorted) {\n    values = [].concat(values).sort(compareNumbers);\n  }\n  var l = values.length;\n  var half = Math.floor(l / 2);\n  if (l % 2 === 0) {\n    return (values[half - 1] + values[half]) * 0.5;\n  } else {\n    return values[half];\n  }\n}\n\n/**\n * Continuously merge nodes that have the least dissimilarity\n * @param {Array<Array<number>>} distance - Array of points to be clustered\n * @param {object} [options]\n * @param {Function} [options.distanceFunction]\n * @param {string} [options.method]\n * @param {boolean} [options.isDistanceMatrix]\n * @option isDistanceMatrix: Is the input a distance matrix?\n * @constructor\n */\nexport function agnes(data, options = {}) {\n  const {\n    distanceFunction = euclidean,\n    method = 'single',\n    isDistanceMatrix = false\n  } = options;\n  let methodFunc;\n\n  var len = data.length;\n  var distance = data; // If source\n  if (!isDistanceMatrix) {\n    distance = distanceMatrix(data, distanceFunction);\n  }\n\n  // allows to use a string or a given function\n  if (typeof method === 'string') {\n    switch (method) {\n      case 'single':\n        methodFunc = simpleLink;\n        break;\n      case 'complete':\n        methodFunc = completeLink;\n        break;\n      case 'average':\n        methodFunc = averageLink;\n        break;\n      case 'centroid':\n        methodFunc = centroidLink;\n        break;\n      case 'ward':\n        methodFunc = wardLink;\n        break;\n      default:\n        throw new RangeError(`unknown clustering method: ${method}`);\n    }\n  } else if (typeof method !== 'function') {\n    throw new TypeError('method must be a string or function');\n  }\n\n  var list = new Array(len);\n  for (var i = 0; i < distance.length; i++) {\n    list[i] = new ClusterLeaf(i);\n  }\n  var min = 10e5;\n  var d = {};\n  var dis = 0;\n\n  while (list.length > 1) {\n    // calculates the minimum distance\n    d = {};\n    min = 10e5;\n    for (var j = 0; j < list.length; j++) {\n      for (var k = j + 1; k < list.length; k++) {\n        var fdistance, sdistance;\n        if (list[j] instanceof ClusterLeaf) {\n          fdistance = [list[j].index];\n        } else {\n          fdistance = new Array(list[j].index.length);\n          for (var e = 0; e < fdistance.length; e++) {\n            fdistance[e] = list[j].index[e].index;\n          }\n        }\n        if (list[k] instanceof ClusterLeaf) {\n          sdistance = [list[k].index];\n        } else {\n          sdistance = new Array(list[k].index.length);\n          for (var f = 0; f < sdistance.length; f++) {\n            sdistance[f] = list[k].index[f].index;\n          }\n        }\n        dis = methodFunc(fdistance, sdistance, distance).toFixed(4);\n        if (dis in d) {\n          d[dis].push([list[j], list[k]]);\n        } else {\n          d[dis] = [[list[j], list[k]]];\n        }\n        min = Math.min(dis, min);\n      }\n    }\n    // cluster dots\n    var dmin = d[min.toFixed(4)];\n    var clustered = new Array(dmin.length);\n    var count = 0;\n    while (dmin.length > 0) {\n      let aux = dmin.shift();\n      const filterInt = function (n) {\n        return aux.indexOf(n) !== -1;\n      };\n      const filterDiff = function (n) {\n        return aux.indexOf(n) === -1;\n      };\n      for (var q = 0; q < dmin.length; q++) {\n        var int = dmin[q].filter(filterInt);\n        if (int.length > 0) {\n          var diff = dmin[q].filter(filterDiff);\n          aux = aux.concat(diff);\n          dmin.splice(q--, 1);\n        }\n      }\n      clustered[count++] = aux;\n    }\n    clustered.length = count;\n\n    for (var ii = 0; ii < clustered.length; ii++) {\n      var obj = new Cluster();\n      obj.children = clustered[ii].concat();\n      obj.distance = min;\n      obj.index = new Array(len);\n      var indCount = 0;\n      for (var jj = 0; jj < clustered[ii].length; jj++) {\n        if (clustered[ii][jj] instanceof ClusterLeaf) {\n          obj.index[indCount++] = clustered[ii][jj];\n        } else {\n          indCount += clustered[ii][jj].index.length;\n          obj.index = clustered[ii][jj].index.concat(obj.index);\n        }\n        list.splice(list.indexOf(clustered[ii][jj]), 1);\n      }\n      obj.index.length = indCount;\n      list.push(obj);\n    }\n  }\n  return list[0];\n}\n","import { euclidean } from 'ml-distance-euclidean';\n\nimport ClusterLeaf from './ClusterLeaf';\nimport Cluster from './Cluster';\n\n/**\n * @private\n * Returns the most distant point and his distance\n * @param {Array <Array <number>>} splitting - Clusters to split\n * @param {Array <Array <number>>} data - Original data\n * @param {function} disFun - Distance function\n * @returns {{d: number, p: number}} - d: maximum difference between points, p: the point more distant\n */\nfunction diff(splitting, data, disFun) {\n  var ans = {\n    d: 0,\n    p: 0\n  };\n\n  var Ci = new Array(splitting[0].length);\n  for (var e = 0; e < splitting[0].length; e++) {\n    Ci[e] = data[splitting[0][e]];\n  }\n  var Cj = new Array(splitting[1].length);\n  for (var f = 0; f < splitting[1].length; f++) {\n    Cj[f] = data[splitting[1][f]];\n  }\n\n  var dist, ndist;\n  for (var i = 0; i < Ci.length; i++) {\n    dist = 0;\n    for (var j = 0; j < Ci.length; j++) {\n      if (i !== j) {\n        dist += disFun(Ci[i], Ci[j]);\n      }\n    }\n    dist /= Ci.length - 1;\n    ndist = 0;\n    for (var k = 0; k < Cj.length; k++) {\n      ndist += disFun(Ci[i], Cj[k]);\n    }\n    ndist /= Cj.length;\n    if (dist - ndist > ans.d) {\n      ans.d = dist - ndist;\n      ans.p = i;\n    }\n  }\n  return ans;\n}\n\n/**\n * @private\n * Intra-cluster distance\n * @param {Array} index\n * @param {Array} data\n * @param {function} disFun\n * @returns {number}\n */\nfunction intrDist(index, data, disFun) {\n  var dist = 0;\n  var count = 0;\n  for (var i = 0; i < index.length; i++) {\n    for (var j = i; j < index.length; j++) {\n      dist += disFun(data[index[i].index], data[index[j].index]);\n      count++;\n    }\n  }\n  return dist / count;\n}\n\n/**\n * Splits the higher level clusters\n * @param {Array <Array <number>>} data - Array of points to be clustered\n * @param {object} [options]\n * @param {Function} [options.distanceFunction]\n * @constructor\n */\nexport function diana(data, options = {}) {\n  const { distanceFunction = euclidean } = options;\n  var tree = new Cluster();\n  tree.children = new Array(data.length);\n  tree.index = new Array(data.length);\n  for (var ind = 0; ind < data.length; ind++) {\n    tree.children[ind] = new ClusterLeaf(ind);\n    tree.index[ind] = new ClusterLeaf(ind);\n  }\n\n  tree.distance = intrDist(tree.index, data, distanceFunction);\n  var m, M, clId, dist, rebel;\n  var list = [tree];\n  while (list.length > 0) {\n    M = 0;\n    clId = 0;\n    for (var i = 0; i < list.length; i++) {\n      m = 0;\n      for (var j = 0; j < list[i].length; j++) {\n        for (var l = j + 1; l < list[i].length; l++) {\n          m = Math.max(\n            distanceFunction(\n              data[list[i].index[j].index],\n              data[list[i].index[l].index]\n            ),\n            m\n          );\n        }\n      }\n      if (m > M) {\n        M = m;\n        clId = i;\n      }\n    }\n    M = 0;\n    if (list[clId].index.length === 2) {\n      list[clId].children = [list[clId].index[0], list[clId].index[1]];\n      list[clId].distance = distanceFunction(\n        data[list[clId].index[0].index],\n        data[list[clId].index[1].index]\n      );\n    } else if (list[clId].index.length === 3) {\n      list[clId].children = [\n        list[clId].index[0],\n        list[clId].index[1],\n        list[clId].index[2]\n      ];\n      var d = [\n        distanceFunction(\n          data[list[clId].index[0].index],\n          data[list[clId].index[1].index]\n        ),\n        distanceFunction(\n          data[list[clId].index[1].index],\n          data[list[clId].index[2].index]\n        )\n      ];\n      list[clId].distance = (d[0] + d[1]) / 2;\n    } else {\n      var C = new Cluster();\n      var sG = new Cluster();\n      var splitting = [new Array(list[clId].index.length), []];\n      for (var spl = 0; spl < splitting[0].length; spl++) {\n        splitting[0][spl] = spl;\n      }\n      for (var ii = 0; ii < splitting[0].length; ii++) {\n        dist = 0;\n        for (var jj = 0; jj < splitting[0].length; jj++) {\n          if (ii !== jj) {\n            dist += distanceFunction(\n              data[list[clId].index[splitting[0][jj]].index],\n              data[list[clId].index[splitting[0][ii]].index]\n            );\n          }\n        }\n        dist /= splitting[0].length - 1;\n        if (dist > M) {\n          M = dist;\n          rebel = ii;\n        }\n      }\n      splitting[1] = [rebel];\n      splitting[0].splice(rebel, 1);\n      dist = diff(splitting, data, distanceFunction);\n      while (dist.d > 0) {\n        splitting[1].push(splitting[0][dist.p]);\n        splitting[0].splice(dist.p, 1);\n        dist = diff(splitting, data, distanceFunction);\n      }\n      var fData = new Array(splitting[0].length);\n      C.index = new Array(splitting[0].length);\n      for (var e = 0; e < fData.length; e++) {\n        fData[e] = data[list[clId].index[splitting[0][e]].index];\n        C.index[e] = list[clId].index[splitting[0][e]];\n        C.children[e] = list[clId].index[splitting[0][e]];\n      }\n      var sData = new Array(splitting[1].length);\n      sG.index = new Array(splitting[1].length);\n      for (var f = 0; f < sData.length; f++) {\n        sData[f] = data[list[clId].index[splitting[1][f]].index];\n        sG.index[f] = list[clId].index[splitting[1][f]];\n        sG.children[f] = list[clId].index[splitting[1][f]];\n      }\n      C.distance = intrDist(C.index, data, distanceFunction);\n      sG.distance = intrDist(sG.index, data, distanceFunction);\n      list.push(C);\n      list.push(sG);\n      list[clId].children = [C, sG];\n    }\n    list.splice(clId, 1);\n  }\n  return tree;\n}\n","'use strict';\nimport { squaredEuclidean } from 'ml-distance-euclidean';\nconst defaultOptions = {\n    distanceFunction: squaredEuclidean\n};\nexport default function nearestVector(listVectors, vector, options = defaultOptions) {\n    const distanceFunction = options.distanceFunction || defaultOptions.distanceFunction;\n    const similarityFunction = options.similarityFunction || defaultOptions.similarityFunction;\n    let vectorIndex = -1;\n    if (typeof similarityFunction === 'function') {\n        // maximum similarity\n        let maxSim = Number.MIN_VALUE;\n        for (let j = 0; j < listVectors.length; j++) {\n            const sim = similarityFunction(vector, listVectors[j]);\n            if (sim > maxSim) {\n                maxSim = sim;\n                vectorIndex = j;\n            }\n        }\n    }\n    else if (typeof distanceFunction === 'function') {\n        // minimum distance\n        let minDist = Number.MAX_VALUE;\n        for (let i = 0; i < listVectors.length; i++) {\n            const dist = distanceFunction(vector, listVectors[i]);\n            if (dist < minDist) {\n                minDist = dist;\n                vectorIndex = i;\n            }\n        }\n    }\n    else {\n        throw new Error(\"A similarity or distance function it's required\");\n    }\n    return vectorIndex;\n}\nexport function findNearestVector(vectorList, vector, options = defaultOptions) {\n    const index = nearestVector(vectorList, vector, options);\n    return vectorList[index];\n}\n","import nearestVector from 'ml-nearest-vector';\n\n/**\n * Calculates the distance matrix for a given array of points\n * @ignore\n * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n * @param {function} distance - Distance function to use between the points\n * @return {Array<Array<number>>} - matrix with the distance values\n */\nexport function calculateDistanceMatrix(data, distance) {\n  var distanceMatrix = new Array(data.length);\n  for (var i = 0; i < data.length; ++i) {\n    for (var j = i; j < data.length; ++j) {\n      if (!distanceMatrix[i]) {\n        distanceMatrix[i] = new Array(data.length);\n      }\n      if (!distanceMatrix[j]) {\n        distanceMatrix[j] = new Array(data.length);\n      }\n      const dist = distance(data[i], data[j]);\n      distanceMatrix[i][j] = dist;\n      distanceMatrix[j][i] = dist;\n    }\n  }\n  return distanceMatrix;\n}\n\n/**\n * Updates the cluster identifier based in the new data\n * @ignore\n * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n * @param {Array<Array<number>>} centers - the K centers in format [x,y,z,...]\n * @param {Array <number>} clusterID - the cluster identifier for each data dot\n * @param {function} distance - Distance function to use between the points\n * @return {Array} the cluster identifier for each data dot\n */\nexport function updateClusterID(data, centers, clusterID, distance) {\n  for (var i = 0; i < data.length; i++) {\n    clusterID[i] = nearestVector(centers, data[i], {\n      distanceFunction: distance\n    });\n  }\n  return clusterID;\n}\n\n/**\n * Update the center values based in the new configurations of the clusters\n * @ignore\n * @param {Array<Array<number>>} prevCenters - Centroids from the previous iteration\n * @param {Array <Array <number>>} data - the [x,y,z,...] points to cluster\n * @param {Array <number>} clusterID - the cluster identifier for each data dot\n * @param {number} K - Number of clusters\n * @return {Array} he K centers in format [x,y,z,...]\n */\nexport function updateCenters(prevCenters, data, clusterID, K) {\n  const nDim = data[0].length;\n\n  // copy previous centers\n  var centers = new Array(K);\n  var centersLen = new Array(K);\n  for (var i = 0; i < K; i++) {\n    centers[i] = new Array(nDim);\n    centersLen[i] = 0;\n    for (var j = 0; j < nDim; j++) {\n      centers[i][j] = 0;\n    }\n  }\n\n  // add the value for all dimensions of the point\n  for (var l = 0; l < data.length; l++) {\n    centersLen[clusterID[l]]++;\n    for (var dim = 0; dim < nDim; dim++) {\n      centers[clusterID[l]][dim] += data[l][dim];\n    }\n  }\n\n  // divides by length\n  for (var id = 0; id < K; id++) {\n    for (var d = 0; d < nDim; d++) {\n      if (centersLen[id]) {\n        centers[id][d] /= centersLen[id];\n      } else {\n        centers[id][d] = prevCenters[id][d];\n      }\n    }\n  }\n  return centers;\n}\n\n/**\n * The centers have moved more than the tolerance value?\n * @ignore\n * @param {Array<Array<number>>} centers - the K centers in format [x,y,z,...]\n * @param {Array<Array<number>>} oldCenters - the K old centers in format [x,y,z,...]\n * @param {function} distanceFunction - Distance function to use between the points\n * @param {number} tolerance - Allowed distance for the centroids to move\n * @return {boolean}\n */\nexport function hasConverged(centers, oldCenters, distanceFunction, tolerance) {\n  for (var i = 0; i < centers.length; i++) {\n    if (distanceFunction(centers[i], oldCenters[i]) > tolerance) {\n      return false;\n    }\n  }\n  return true;\n}\n","const LOOP = 8;\nconst FLOAT_MUL = 1 / 16777216;\nconst sh1 = 15;\nconst sh2 = 18;\nconst sh3 = 11;\nfunction multiply_uint32(n, m) {\n    n >>>= 0;\n    m >>>= 0;\n    const nlo = n & 0xffff;\n    const nhi = n - nlo;\n    return (((nhi * m) >>> 0) + nlo * m) >>> 0;\n}\nexport default class XSadd {\n    constructor(seed = Date.now()) {\n        this.state = new Uint32Array(4);\n        this.init(seed);\n        this.random = this.getFloat.bind(this);\n    }\n    /**\n     * Returns a 32-bit integer r (0 <= r < 2^32)\n     */\n    getUint32() {\n        this.nextState();\n        return (this.state[3] + this.state[2]) >>> 0;\n    }\n    /**\n     * Returns a floating point number r (0.0 <= r < 1.0)\n     */\n    getFloat() {\n        return (this.getUint32() >>> 8) * FLOAT_MUL;\n    }\n    init(seed) {\n        if (!Number.isInteger(seed)) {\n            throw new TypeError('seed must be an integer');\n        }\n        this.state[0] = seed;\n        this.state[1] = 0;\n        this.state[2] = 0;\n        this.state[3] = 0;\n        for (let i = 1; i < LOOP; i++) {\n            this.state[i & 3] ^=\n                (i +\n                    multiply_uint32(1812433253, this.state[(i - 1) & 3] ^ ((this.state[(i - 1) & 3] >>> 30) >>> 0))) >>>\n                    0;\n        }\n        this.periodCertification();\n        for (let i = 0; i < LOOP; i++) {\n            this.nextState();\n        }\n    }\n    periodCertification() {\n        if (this.state[0] === 0 &&\n            this.state[1] === 0 &&\n            this.state[2] === 0 &&\n            this.state[3] === 0) {\n            this.state[0] = 88; // X\n            this.state[1] = 83; // S\n            this.state[2] = 65; // A\n            this.state[3] = 68; // D\n        }\n    }\n    nextState() {\n        let t = this.state[0];\n        t ^= t << sh1;\n        t ^= t >>> sh2;\n        t ^= this.state[3] << sh3;\n        this.state[0] = this.state[1];\n        this.state[1] = this.state[2];\n        this.state[2] = this.state[3];\n        this.state[3] = t;\n    }\n}\n","const PROB_TOLERANCE = 0.00000001;\nfunction randomChoice(values, options = {}, random = Math.random) {\n    const { size = 1, replace = false, probabilities } = options;\n    let valuesArr;\n    let cumSum;\n    if (typeof values === 'number') {\n        valuesArr = getArray(values);\n    }\n    else {\n        valuesArr = values.slice();\n    }\n    if (probabilities) {\n        if (!replace) {\n            throw new Error('choice with probabilities and no replacement is not implemented');\n        }\n        // check input is sane\n        if (probabilities.length !== valuesArr.length) {\n            throw new Error('the length of probabilities option should be equal to the number of choices');\n        }\n        cumSum = [probabilities[0]];\n        for (let i = 1; i < probabilities.length; i++) {\n            cumSum[i] = cumSum[i - 1] + probabilities[i];\n        }\n        if (Math.abs(1 - cumSum[cumSum.length - 1]) > PROB_TOLERANCE) {\n            throw new Error(`probabilities should sum to 1, but instead sums to ${cumSum[cumSum.length - 1]}`);\n        }\n    }\n    if (replace === false && size > valuesArr.length) {\n        throw new Error('size option is too large');\n    }\n    const result = [];\n    for (let i = 0; i < size; i++) {\n        const index = randomIndex(valuesArr.length, random, cumSum);\n        result.push(valuesArr[index]);\n        if (!replace) {\n            valuesArr.splice(index, 1);\n        }\n    }\n    return result;\n}\nfunction getArray(n) {\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(i);\n    }\n    return arr;\n}\nfunction randomIndex(n, random, cumSum) {\n    const rand = random();\n    if (!cumSum) {\n        return Math.floor(rand * n);\n    }\n    else {\n        let idx = 0;\n        while (rand > cumSum[idx]) {\n            idx++;\n        }\n        return idx;\n    }\n}\nexport default randomChoice;\n","// tslint:disable-next-line\nimport XSAdd from 'ml-xsadd';\nimport choice from './choice';\n/**\n * @classdesc Random class\n */\nexport default class Random {\n    /**\n     * @param [seedOrRandom=Math.random] - Control the random number generator used by the Random class instance. Pass a random number generator function with a uniform distribution over the half-open interval [0, 1[. If seed will pass it to ml-xsadd to create a seeded random number generator. If undefined will use Math.random.\n     */\n    constructor(seedOrRandom = Math.random) {\n        if (typeof seedOrRandom === 'number') {\n            const xsadd = new XSAdd(seedOrRandom);\n            this.randomGenerator = xsadd.random;\n        }\n        else {\n            this.randomGenerator = seedOrRandom;\n        }\n    }\n    choice(values, options) {\n        if (typeof values === 'number') {\n            return choice(values, options, this.randomGenerator);\n        }\n        return choice(values, options, this.randomGenerator);\n    }\n    /**\n     * Draw a random number from a uniform distribution on [0,1)\n     * @return The random number\n     */\n    random() {\n        return this.randomGenerator();\n    }\n    /**\n     * Draw a random integer from a uniform distribution on [low, high). If only low is specified, the number is drawn on [0, low)\n     * @param low - The lower bound of the uniform distribution interval.\n     * @param high - The higher bound of the uniform distribution interval.\n     */\n    randInt(low, high) {\n        if (high === undefined) {\n            high = low;\n            low = 0;\n        }\n        return low + Math.floor(this.randomGenerator() * (high - low));\n    }\n    /**\n     * Draw several random number from a uniform distribution on [0, 1)\n     * @param size - The number of number to draw\n     * @return - The list of drawn numbers.\n     */\n    randomSample(size) {\n        const result = [];\n        for (let i = 0; i < size; i++) {\n            result.push(this.random());\n        }\n        return result;\n    }\n}\n","import Random from 'ml-random';\nimport { squaredEuclidean } from 'ml-distance-euclidean';\nimport { Matrix } from 'ml-matrix';\n\n/**\n * Choose K different random points from the original data\n * @ignore\n * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {number} K - number of clusters\n * @param {number} seed - seed for random number generation\n * @return {Array<Array<number>>} - Initial random points\n */\nexport function random(data, K, seed) {\n  const random = new Random(seed);\n  return random.choice(data, { size: K });\n}\n\n/**\n * Chooses the most distant points to a first random pick\n * @ignore\n * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {number} K - number of clusters\n * @param {Array<Array<number>>} distanceMatrix - matrix with the distance values\n * @param {number} seed - seed for random number generation\n * @return {Array<Array<number>>} - Initial random points\n */\nexport function mostDistant(data, K, distanceMatrix, seed) {\n  const random = new Random(seed);\n  var ans = new Array(K);\n  // chooses a random point as initial cluster\n  ans[0] = Math.floor(random.random() * data.length);\n\n  if (K > 1) {\n    // chooses the more distant point\n    var maxDist = { dist: -1, index: -1 };\n    for (var l = 0; l < data.length; ++l) {\n      if (distanceMatrix[ans[0]][l] > maxDist.dist) {\n        maxDist.dist = distanceMatrix[ans[0]][l];\n        maxDist.index = l;\n      }\n    }\n    ans[1] = maxDist.index;\n\n    if (K > 2) {\n      // chooses the set of points that maximises the min distance\n      for (var k = 2; k < K; ++k) {\n        var center = { dist: -1, index: -1 };\n        for (var m = 0; m < data.length; ++m) {\n          // minimum distance to centers\n          var minDistCent = { dist: Number.MAX_VALUE, index: -1 };\n          for (var n = 0; n < k; ++n) {\n            if (\n              distanceMatrix[n][m] < minDistCent.dist &&\n              ans.indexOf(m) === -1\n            ) {\n              minDistCent = {\n                dist: distanceMatrix[n][m],\n                index: m\n              };\n            }\n          }\n\n          if (\n            minDistCent.dist !== Number.MAX_VALUE &&\n            minDistCent.dist > center.dist\n          ) {\n            center = Object.assign({}, minDistCent);\n          }\n        }\n\n        ans[k] = center.index;\n      }\n    }\n  }\n\n  return ans.map((index) => data[index]);\n}\n\n// Implementation inspired from scikit\nexport function kmeanspp(X, K, options = {}) {\n  X = new Matrix(X);\n  const nSamples = X.rows;\n  const random = new Random(options.seed);\n  // Set the number of trials\n  const centers = [];\n  const localTrials = options.localTrials || 2 + Math.floor(Math.log(K));\n\n  // Pick the first center at random from the dataset\n  const firstCenterIdx = random.randInt(nSamples);\n  centers.push(X.getRow(firstCenterIdx));\n\n  // Init closest distances\n  let closestDistSquared = new Matrix(1, X.rows);\n  for (let i = 0; i < X.rows; i++) {\n    closestDistSquared.set(0, i, squaredEuclidean(X.getRow(i), centers[0]));\n  }\n  let cumSumClosestDistSquared = [cumSum(closestDistSquared.getRow(0))];\n  const factor = 1 / cumSumClosestDistSquared[0][nSamples - 1];\n  let probabilities = Matrix.mul(closestDistSquared, factor);\n\n  // Iterate over the remaining centers\n  for (let i = 1; i < K; i++) {\n    const candidateIdx = random.choice(nSamples, {\n      replace: true,\n      size: localTrials,\n      probabilities: probabilities[0]\n    });\n\n    const candidates = X.selection(candidateIdx, range(X.columns));\n    const distanceToCandidates = euclideanDistances(candidates, X);\n\n    let bestCandidate;\n    let bestPot;\n    let bestDistSquared;\n\n    for (let j = 0; j < localTrials; j++) {\n      const newDistSquared = Matrix.min(closestDistSquared, [distanceToCandidates.getRow(j)]);\n      const newPot = newDistSquared.sum();\n      if (bestCandidate === undefined || newPot < bestPot) {\n        bestCandidate = candidateIdx[j];\n        bestPot = newPot;\n        bestDistSquared = newDistSquared;\n      }\n    }\n    centers[i] = X.getRow(bestCandidate);\n    closestDistSquared = bestDistSquared;\n    cumSumClosestDistSquared = [cumSum(closestDistSquared.getRow(0))];\n    probabilities = Matrix.mul(\n      closestDistSquared,\n      1 / cumSumClosestDistSquared[0][nSamples - 1]\n    );\n  }\n  return centers;\n}\n\nfunction euclideanDistances(A, B) {\n  const result = new Matrix(A.rows, B.rows);\n  for (let i = 0; i < A.rows; i++) {\n    for (let j = 0; j < B.rows; j++) {\n      result.set(i, j, squaredEuclidean(A.getRow(i), B.getRow(j)));\n    }\n  }\n  return result;\n}\n\nfunction range(l) {\n  let r = [];\n  for (let i = 0; i < l; i++) {\n    r.push(i);\n  }\n  return r;\n}\n\nfunction cumSum(arr) {\n  let cumSum = [arr[0]];\n  for (let i = 1; i < arr.length; i++) {\n    cumSum[i] = cumSum[i - 1] + arr[i];\n  }\n  return cumSum;\n}\n","import { updateClusterID } from './utils';\n\nconst distanceSymbol = Symbol('distance');\n\nexport default class KMeansResult {\n  /**\n   * Result of the kmeans algorithm\n   * @param {Array<number>} clusters - the cluster identifier for each data dot\n   * @param {Array<Array<object>>} centroids - the K centers in format [x,y,z,...], the error and size of the cluster\n   * @param {boolean} converged - Converge criteria satisfied\n   * @param {number} iterations - Current number of iterations\n   * @param {function} distance - (*Private*) Distance function to use between the points\n   * @constructor\n   */\n  constructor(clusters, centroids, converged, iterations, distance) {\n    this.clusters = clusters;\n    this.centroids = centroids;\n    this.converged = converged;\n    this.iterations = iterations;\n    this[distanceSymbol] = distance;\n  }\n\n  /**\n   * Allows to compute for a new array of points their cluster id\n   * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n   * @return {Array<number>} - cluster id for each point\n   */\n  nearest(data) {\n    const clusterID = new Array(data.length);\n    const centroids = this.centroids.map(function (centroid) {\n      return centroid.centroid;\n    });\n    return updateClusterID(data, centroids, clusterID, this[distanceSymbol]);\n  }\n\n  /**\n   * Returns a KMeansResult with the error and size of the cluster\n   * @ignore\n   * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n   * @return {KMeansResult}\n   */\n  computeInformation(data) {\n    var enrichedCentroids = this.centroids.map(function (centroid) {\n      return {\n        centroid: centroid,\n        error: 0,\n        size: 0\n      };\n    });\n\n    for (var i = 0; i < data.length; i++) {\n      enrichedCentroids[this.clusters[i]].error += this[distanceSymbol](\n        data[i],\n        this.centroids[this.clusters[i]]\n      );\n      enrichedCentroids[this.clusters[i]].size++;\n    }\n\n    for (var j = 0; j < this.centroids.length; j++) {\n      if (enrichedCentroids[j].size) {\n        enrichedCentroids[j].error /= enrichedCentroids[j].size;\n      } else {\n        enrichedCentroids[j].error = null;\n      }\n    }\n\n    return new KMeansResult(\n      this.clusters,\n      enrichedCentroids,\n      this.converged,\n      this.iterations,\n      this[distanceSymbol]\n    );\n  }\n}\n","import { squaredEuclidean } from 'ml-distance-euclidean';\n\nimport {\n  updateClusterID,\n  updateCenters,\n  hasConverged,\n  calculateDistanceMatrix\n} from './utils';\nimport { mostDistant, random, kmeanspp } from './initialization';\nimport KMeansResult from './KMeansResult';\n\nconst defaultOptions = {\n  maxIterations: 100,\n  tolerance: 1e-6,\n  withIterations: false,\n  initialization: 'kmeans++',\n  distanceFunction: squaredEuclidean\n};\n\n/**\n * Each step operation for kmeans\n * @ignore\n * @param {Array<Array<number>>} centers - K centers in format [x,y,z,...]\n * @param {Array<Array<number>>} data - Points [x,y,z,...] to cluster\n * @param {Array<number>} clusterID - Cluster identifier for each data dot\n * @param {number} K - Number of clusters\n * @param {object} [options] - Option object\n * @param {number} iterations - Current number of iterations\n * @return {KMeansResult}\n */\nfunction step(centers, data, clusterID, K, options, iterations) {\n  clusterID = updateClusterID(\n    data,\n    centers,\n    clusterID,\n    options.distanceFunction\n  );\n  var newCenters = updateCenters(centers, data, clusterID, K);\n  var converged = hasConverged(\n    newCenters,\n    centers,\n    options.distanceFunction,\n    options.tolerance\n  );\n  return new KMeansResult(\n    clusterID,\n    newCenters,\n    converged,\n    iterations,\n    options.distanceFunction\n  );\n}\n\n/**\n * Generator version for the algorithm\n * @ignore\n * @param {Array<Array<number>>} centers - K centers in format [x,y,z,...]\n * @param {Array<Array<number>>} data - Points [x,y,z,...] to cluster\n * @param {Array<number>} clusterID - Cluster identifier for each data dot\n * @param {number} K - Number of clusters\n * @param {object} [options] - Option object\n */\nfunction* kmeansGenerator(centers, data, clusterID, K, options) {\n  var converged = false;\n  var stepNumber = 0;\n  var stepResult;\n  while (!converged && stepNumber < options.maxIterations) {\n    stepResult = step(centers, data, clusterID, K, options, ++stepNumber);\n    yield stepResult.computeInformation(data);\n    converged = stepResult.converged;\n    centers = stepResult.centroids;\n  }\n}\n\n/**\n * K-means algorithm\n * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {number} K - Number of clusters\n * @param {object} [options] - Option object\n * @param {number} [options.maxIterations = 100] - Maximum of iterations allowed\n * @param {number} [options.tolerance = 1e-6] - Error tolerance\n * @param {boolean} [options.withIterations = false] - Store clusters and centroids for each iteration\n * @param {function} [options.distanceFunction = squaredDistance] - Distance function to use between the points\n * @param {number} [options.seed] - Seed for random initialization.\n * @param {string|Array<Array<number>>} [options.initialization = 'kmeans++'] - K centers in format [x,y,z,...] or a method for initialize the data:\n *  * You can either specify your custom start centroids, or select one of the following initialization method:\n *  * `'kmeans++'` will use the kmeans++ method as described by http://ilpubs.stanford.edu:8090/778/1/2006-13.pdf\n *  * `'random'` will choose K random different values.\n *  * `'mostDistant'` will choose the more distant points to a first random pick\n * @return {KMeansResult} - Cluster identifier for each data dot and centroids with the following fields:\n *  * `'clusters'`: Array of indexes for the clusters.\n *  * `'centroids'`: Array with the resulting centroids.\n *  * `'iterations'`: Number of iterations that took to converge\n */\nexport default function kmeans(data, K, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  if (K <= 0 || K > data.length || !Number.isInteger(K)) {\n    throw new Error(\n      'K should be a positive integer smaller than the number of points'\n    );\n  }\n\n  var centers;\n  if (Array.isArray(options.initialization)) {\n    if (options.initialization.length !== K) {\n      throw new Error('The initial centers should have the same length as K');\n    } else {\n      centers = options.initialization;\n    }\n  } else {\n    switch (options.initialization) {\n      case 'kmeans++':\n        centers = kmeanspp(data, K, options);\n        break;\n      case 'random':\n        centers = random(data, K, options.seed);\n        break;\n      case 'mostDistant':\n        centers = mostDistant(\n          data,\n          K,\n          calculateDistanceMatrix(data, options.distanceFunction),\n          options.seed\n        );\n        break;\n      default:\n        throw new Error(\n          `Unknown initialization method: \"${options.initialization}\"`\n        );\n    }\n  }\n\n  // infinite loop until convergence\n  if (options.maxIterations === 0) {\n    options.maxIterations = Number.MAX_VALUE;\n  }\n\n  var clusterID = new Array(data.length);\n  if (options.withIterations) {\n    return kmeansGenerator(centers, data, clusterID, K, options);\n  } else {\n    var converged = false;\n    var stepNumber = 0;\n    var stepResult;\n    while (!converged && stepNumber < options.maxIterations) {\n      stepResult = step(centers, data, clusterID, K, options, ++stepNumber);\n      converged = stepResult.converged;\n      centers = stepResult.centroids;\n    }\n    return stepResult.computeInformation(data);\n  }\n}\n","import Matrix from 'ml-matrix';\n\n/**\n * @private\n * Function that retuns an array of matrices of the cases that belong to each class.\n * @param {Matrix} X - dataset\n * @param {Array} y - predictions\n * @return {Array}\n */\nexport function separateClasses(X, y) {\n  var features = X.columns;\n\n  var classes = 0;\n  var totalPerClasses = new Array(10000); // max upperbound of classes\n  for (var i = 0; i < y.length; i++) {\n    if (totalPerClasses[y[i]] === undefined) {\n      totalPerClasses[y[i]] = 0;\n      classes++;\n    }\n    totalPerClasses[y[i]]++;\n  }\n  var separatedClasses = new Array(classes);\n  var currentIndex = new Array(classes);\n  for (i = 0; i < classes; ++i) {\n    separatedClasses[i] = new Matrix(totalPerClasses[i], features);\n    currentIndex[i] = 0;\n  }\n  for (i = 0; i < X.rows; ++i) {\n    separatedClasses[y[i]].setRow(currentIndex[y[i]], X.getRow(i));\n    currentIndex[y[i]]++;\n  }\n  return separatedClasses;\n}\n","import { Matrix } from 'ml-matrix';\n\nimport { separateClasses } from './utils';\n\nexport class GaussianNB {\n  /**\n   * Constructor for the Gaussian Naive Bayes classifier, the parameters here is just for loading purposes.\n   * @constructor\n   * @param {boolean} reload\n   * @param {object} model\n   */\n  constructor(reload, model) {\n    if (reload) {\n      this.means = model.means;\n      this.calculateProbabilities = model.calculateProbabilities;\n    }\n  }\n\n  /**\n   * Function that trains the classifier with a matrix that represents the training set and an array that\n   * represents the label of each row in the training set. the labels must be numbers between 0 to n-1 where\n   * n represents the number of classes.\n   *\n   * WARNING: in the case that one class, all the cases in one or more features have the same value, the\n   * Naive Bayes classifier will not work well.\n   * @param {Matrix|Array} trainingSet\n   * @param {Matrix|Array} trainingLabels\n   */\n  train(trainingSet, trainingLabels) {\n    var C1 = Math.sqrt(2 * Math.PI); // constant to precalculate the squared root\n    trainingSet = Matrix.checkMatrix(trainingSet);\n\n    if (trainingSet.rows !== trainingLabels.length) {\n      throw new RangeError(\n        'the size of the training set and the training labels must be the same.'\n      );\n    }\n\n    var separatedClasses = separateClasses(trainingSet, trainingLabels);\n    var calculateProbabilities = new Array(separatedClasses.length);\n    this.means = new Array(separatedClasses.length);\n    for (var i = 0; i < separatedClasses.length; ++i) {\n      var means = separatedClasses[i].mean('column');\n      var std = separatedClasses[i].standardDeviation('column', {\n        mean: means\n      });\n\n      var logPriorProbability = Math.log(\n        separatedClasses[i].rows / trainingSet.rows\n      );\n      calculateProbabilities[i] = new Array(means.length + 1);\n\n      calculateProbabilities[i][0] = logPriorProbability;\n      for (var j = 1; j < means.length + 1; ++j) {\n        var currentStd = std[j - 1];\n        calculateProbabilities[i][j] = [\n          1 / (C1 * currentStd),\n          -2 * currentStd * currentStd\n        ];\n      }\n\n      this.means[i] = means;\n    }\n\n    this.calculateProbabilities = calculateProbabilities;\n  }\n\n  /**\n   * function that predicts each row of the dataset (must be a matrix).\n   *\n   * @param {Matrix|Array} dataset\n   * @return {Array}\n   */\n  predict(dataset) {\n    dataset = Matrix.checkMatrix(dataset);\n    if (dataset.rows === this.calculateProbabilities[0].length) {\n      throw new RangeError(\n        'the dataset must have the same features as the training set'\n      );\n    }\n\n    var predictions = new Array(dataset.rows);\n\n    for (var i = 0; i < predictions.length; ++i) {\n      predictions[i] = getCurrentClass(\n        dataset.getRow(i),\n        this.means,\n        this.calculateProbabilities\n      );\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Function that export the NaiveBayes model.\n   * @return {object}\n   */\n  toJSON() {\n    return {\n      modelName: 'NaiveBayes',\n      means: this.means,\n      calculateProbabilities: this.calculateProbabilities\n    };\n  }\n\n  /**\n   * Function that create a GaussianNB classifier with the given model.\n   * @param {object} model\n   * @return {GaussianNB}\n   */\n  static load(model) {\n    if (model.modelName !== 'NaiveBayes') {\n      throw new RangeError(\n        'The current model is not a Multinomial Naive Bayes, current model:',\n        model.name\n      );\n    }\n\n    return new GaussianNB(true, model);\n  }\n}\n\n/**\n * @private\n * Function the retrieves a prediction with one case.\n *\n * @param {Array} currentCase\n * @param {Array} mean - Precalculated means of each class trained\n * @param {Array} classes - Precalculated value of each class (Prior probability and probability function of each feature)\n * @return {number}\n */\nfunction getCurrentClass(currentCase, mean, classes) {\n  var maxProbability = 0;\n  var predictedClass = -1;\n\n  // going through all precalculated values for the classes\n  for (var i = 0; i < classes.length; ++i) {\n    var currentProbability = classes[i][0]; // initialize with the prior probability\n    for (var j = 1; j < classes[0][1].length + 1; ++j) {\n      currentProbability += calculateLogProbability(\n        currentCase[j - 1],\n        mean[i][j - 1],\n        classes[i][j][0],\n        classes[i][j][1]\n      );\n    }\n\n    currentProbability = Math.exp(currentProbability);\n    if (currentProbability > maxProbability) {\n      maxProbability = currentProbability;\n      predictedClass = i;\n    }\n  }\n\n  return predictedClass;\n}\n\n/**\n * @private\n * function that retrieves the probability of the feature given the class.\n * @param {number} value - value of the feature.\n * @param {number} mean - mean of the feature for the given class.\n * @param {number} C1 - precalculated value of (1 / (sqrt(2*pi) * std)).\n * @param {number} C2 - precalculated value of (2 * std^2) for the denominator of the exponential.\n * @return {number}\n */\nfunction calculateLogProbability(value, mean, C1, C2) {\n  value = value - mean;\n  return Math.log(C1 * Math.exp((value * value) / C2));\n}\n","import { Matrix } from 'ml-matrix';\n\nimport { separateClasses } from './utils';\n\nexport class MultinomialNB {\n  /**\n   * Constructor for Multinomial Naive Bayes, the model parameter is for load purposes.\n   * @constructor\n   * @param {object} model - for load purposes.\n   */\n  constructor(model) {\n    if (model) {\n      this.conditionalProbability = Matrix.checkMatrix(\n        model.conditionalProbability\n      );\n      this.priorProbability = Matrix.checkMatrix(model.priorProbability);\n    }\n  }\n\n  /**\n   * Train the classifier with the current training set and labels, the labels must be numbers between 0 and n.\n   * @param {Matrix|Array} trainingSet\n   * @param {Array} trainingLabels\n   */\n  train(trainingSet, trainingLabels) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n\n    if (trainingSet.rows !== trainingLabels.length) {\n      throw new RangeError(\n        'the size of the training set and the training labels must be the same.'\n      );\n    }\n\n    var separateClass = separateClasses(trainingSet, trainingLabels);\n\n    this.priorProbability = new Matrix(separateClass.length, 1);\n\n    for (var i = 0; i < separateClass.length; ++i) {\n      this.priorProbability.set(i, 0, Math.log(\n        separateClass[i].rows / trainingSet.rows\n      ));\n    }\n\n    var features = trainingSet.columns;\n    this.conditionalProbability = new Matrix(separateClass.length, features);\n    for (i = 0; i < separateClass.length; ++i) {\n      var classValues = Matrix.checkMatrix(separateClass[i]);\n      var total = classValues.sum();\n      var divisor = total + features;\n      this.conditionalProbability.setRow(\n        i,\n        Matrix.rowVector(classValues\n          .sum('column'))\n          .add(1)\n          .div(divisor)\n          .apply(matrixLog)\n      );\n    }\n  }\n\n  /**\n   * Retrieves the predictions for the dataset with the current model.\n   * @param {Matrix|Array} dataset\n   * @return {Array} - predictions from the dataset.\n   */\n  predict(dataset) {\n    dataset = Matrix.checkMatrix(dataset);\n    var predictions = new Array(dataset.rows);\n    for (var i = 0; i < dataset.rows; ++i) {\n      var currentElement = dataset.getRowVector(i);\n      const v = Matrix.columnVector(this.conditionalProbability\n        .clone()\n        .mulRowVector(currentElement)\n        .sum('row'));\n      predictions[i] = v\n        .add(this.priorProbability)\n        .maxIndex()[0];\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Function that saves the current model.\n   * @return {object} - model in JSON format.\n   */\n  toJSON() {\n    return {\n      name: 'MultinomialNB',\n      priorProbability: this.priorProbability,\n      conditionalProbability: this.conditionalProbability\n    };\n  }\n\n  /**\n   * Creates a new MultinomialNB from the given model\n   * @param {object} model\n   * @return {MultinomialNB}\n   */\n  static load(model) {\n    if (model.name !== 'MultinomialNB') {\n      throw new RangeError(`${model.name} is not a Multinomial Naive Bayes`);\n    }\n\n    return new MultinomialNB(model);\n  }\n}\n\nfunction matrixLog(i, j) {\n  this.set(i, j, Math.log(this.get(i, j)));\n}\n","/*\n * Original code from:\n *\n * k-d Tree JavaScript - V 1.01\n *\n * https://github.com/ubilabs/kd-tree-javascript\n *\n * @author Mircea Pricop <pricop@ubilabs.net>, 2012\n * @author Martin Kleppe <kleppe@ubilabs.net>, 2012\n * @author Ubilabs http://ubilabs.net, 2012\n * @license MIT License <http://www.opensource.org/licenses/mit-license.php>\n */\n\nfunction Node(obj, dimension, parent) {\n  this.obj = obj;\n  this.left = null;\n  this.right = null;\n  this.parent = parent;\n  this.dimension = dimension;\n}\n\nexport default class KDTree {\n  constructor(points, metric) {\n    // If points is not an array, assume we're loading a pre-built tree\n    if (!Array.isArray(points)) {\n      this.dimensions = points.dimensions;\n      this.root = points;\n      restoreParent(this.root);\n    } else {\n      this.dimensions = new Array(points[0].length);\n      for (var i = 0; i < this.dimensions.length; i++) {\n        this.dimensions[i] = i;\n      }\n      this.root = buildTree(points, 0, null, this.dimensions);\n    }\n    this.metric = metric;\n  }\n\n  // Convert to a JSON serializable structure; this just requires removing\n  // the `parent` property\n  toJSON() {\n    const result = toJSONImpl(this.root, true);\n    result.dimensions = this.dimensions;\n    return result;\n  }\n\n  nearest(point, maxNodes, maxDistance) {\n    const metric = this.metric;\n    const dimensions = this.dimensions;\n    var i;\n\n    const bestNodes = new BinaryHeap(function (e) {\n      return -e[1];\n    });\n\n    function nearestSearch(node) {\n      const dimension = dimensions[node.dimension];\n      const ownDistance = metric(point, node.obj);\n      const linearPoint = {};\n      var bestChild, linearDistance, otherChild, i;\n\n      function saveNode(node, distance) {\n        bestNodes.push([node, distance]);\n        if (bestNodes.size() > maxNodes) {\n          bestNodes.pop();\n        }\n      }\n\n      for (i = 0; i < dimensions.length; i += 1) {\n        if (i === node.dimension) {\n          linearPoint[dimensions[i]] = point[dimensions[i]];\n        } else {\n          linearPoint[dimensions[i]] = node.obj[dimensions[i]];\n        }\n      }\n\n      linearDistance = metric(linearPoint, node.obj);\n\n      if (node.right === null && node.left === null) {\n        if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n          saveNode(node, ownDistance);\n        }\n        return;\n      }\n\n      if (node.right === null) {\n        bestChild = node.left;\n      } else if (node.left === null) {\n        bestChild = node.right;\n      } else {\n        if (point[dimension] < node.obj[dimension]) {\n          bestChild = node.left;\n        } else {\n          bestChild = node.right;\n        }\n      }\n\n      nearestSearch(bestChild);\n\n      if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n        saveNode(node, ownDistance);\n      }\n\n      if (\n        bestNodes.size() < maxNodes ||\n        Math.abs(linearDistance) < bestNodes.peek()[1]\n      ) {\n        if (bestChild === node.left) {\n          otherChild = node.right;\n        } else {\n          otherChild = node.left;\n        }\n        if (otherChild !== null) {\n          nearestSearch(otherChild);\n        }\n      }\n    }\n\n    if (maxDistance) {\n      for (i = 0; i < maxNodes; i += 1) {\n        bestNodes.push([null, maxDistance]);\n      }\n    }\n\n    if (this.root) {\n      nearestSearch(this.root);\n    }\n\n    const result = [];\n    for (i = 0; i < Math.min(maxNodes, bestNodes.content.length); i += 1) {\n      if (bestNodes.content[i][0]) {\n        result.push([bestNodes.content[i][0].obj, bestNodes.content[i][1]]);\n      }\n    }\n    return result;\n  }\n}\n\nfunction toJSONImpl(src) {\n  const dest = new Node(src.obj, src.dimension, null);\n  if (src.left) dest.left = toJSONImpl(src.left);\n  if (src.right) dest.right = toJSONImpl(src.right);\n  return dest;\n}\n\nfunction buildTree(points, depth, parent, dimensions) {\n  const dim = depth % dimensions.length;\n\n  if (points.length === 0) {\n    return null;\n  }\n  if (points.length === 1) {\n    return new Node(points[0], dim, parent);\n  }\n\n  points.sort((a, b) => a[dimensions[dim]] - b[dimensions[dim]]);\n\n  const median = Math.floor(points.length / 2);\n  const node = new Node(points[median], dim, parent);\n  node.left = buildTree(points.slice(0, median), depth + 1, node, dimensions);\n  node.right = buildTree(points.slice(median + 1), depth + 1, node, dimensions);\n\n  return node;\n}\n\nfunction restoreParent(root) {\n  if (root.left) {\n    root.left.parent = root;\n    restoreParent(root.left);\n  }\n\n  if (root.right) {\n    root.right.parent = root;\n    restoreParent(root.right);\n  }\n}\n\n// Binary heap implementation from:\n// http://eloquentjavascript.net/appendix2.html\nclass BinaryHeap {\n  constructor(scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  push(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n    // Allow it to bubble up.\n    this.bubbleUp(this.content.length - 1);\n  }\n\n  pop() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return result;\n  }\n\n  peek() {\n    return this.content[0];\n  }\n\n  size() {\n    return this.content.length;\n  }\n\n  bubbleUp(n) {\n    // Fetch the element that has to be moved.\n    var element = this.content[n];\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = Math.floor((n + 1) / 2) - 1;\n      const parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      } else {\n        // Found a parent that is less, no need to move it further.\n        break;\n      }\n    }\n  }\n\n  sinkDown(n) {\n    // Look up the target element and its score.\n    var length = this.content.length;\n    var element = this.content[n];\n    var elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) * 2;\n      var child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      var swap = null;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N];\n        var child1Score = this.scoreFunction(child1);\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N];\n        var child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      } else {\n        // Otherwise, we are done.\n        break;\n      }\n    }\n  }\n}\n","import { euclidean as euclideanDistance } from 'ml-distance-euclidean';\n\nimport KDTree from './KDTree';\n\nexport default class KNN {\n  /**\n   * @param {Array} dataset\n   * @param {Array} labels\n   * @param {object} options\n   * @param {number} [options.k=numberOfClasses + 1] - Number of neighbors to classify.\n   * @param {function} [options.distance=euclideanDistance] - Distance function that takes two parameters.\n   */\n  constructor(dataset, labels, options = {}) {\n    if (dataset === true) {\n      const model = labels;\n      this.kdTree = new KDTree(model.kdTree, options);\n      this.k = model.k;\n      this.classes = new Set(model.classes);\n      this.isEuclidean = model.isEuclidean;\n      return;\n    }\n\n    const classes = new Set(labels);\n\n    const { distance = euclideanDistance, k = classes.size + 1 } = options;\n\n    const points = new Array(dataset.length);\n    for (var i = 0; i < points.length; ++i) {\n      points[i] = dataset[i].slice();\n    }\n\n    for (i = 0; i < labels.length; ++i) {\n      points[i].push(labels[i]);\n    }\n\n    this.kdTree = new KDTree(points, distance);\n    this.k = k;\n    this.classes = classes;\n    this.isEuclidean = distance === euclideanDistance;\n  }\n\n  /**\n   * Create a new KNN instance with the given model.\n   * @param {object} model\n   * @param {function} distance=euclideanDistance - distance function must be provided if the model wasn't trained with euclidean distance.\n   * @return {KNN}\n   */\n  static load(model, distance = euclideanDistance) {\n    if (model.name !== 'KNN') {\n      throw new Error(`invalid model: ${model.name}`);\n    }\n    if (!model.isEuclidean && distance === euclideanDistance) {\n      throw new Error(\n        'a custom distance function was used to create the model. Please provide it again'\n      );\n    }\n    if (model.isEuclidean && distance !== euclideanDistance) {\n      throw new Error(\n        'the model was created with the default distance function. Do not load it with another one'\n      );\n    }\n    return new KNN(true, model, distance);\n  }\n\n  /**\n   * Return a JSON containing the kd-tree model.\n   * @return {object} JSON KNN model.\n   */\n  toJSON() {\n    return {\n      name: 'KNN',\n      kdTree: this.kdTree,\n      k: this.k,\n      classes: Array.from(this.classes),\n      isEuclidean: this.isEuclidean\n    };\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Array} dataset\n   * @return {Array} predictions\n   */\n  predict(dataset) {\n    if (Array.isArray(dataset)) {\n      if (typeof dataset[0] === 'number') {\n        return getSinglePrediction(this, dataset);\n      } else if (\n        Array.isArray(dataset[0]) &&\n        typeof dataset[0][0] === 'number'\n      ) {\n        const predictions = new Array(dataset.length);\n        for (var i = 0; i < dataset.length; i++) {\n          predictions[i] = getSinglePrediction(this, dataset[i]);\n        }\n        return predictions;\n      }\n    }\n    throw new TypeError('dataset to predict must be an array or a matrix');\n  }\n}\n\nfunction getSinglePrediction(knn, currentCase) {\n  var nearestPoints = knn.kdTree.nearest(currentCase, knn.k);\n  var pointsPerClass = {};\n  var predictedClass = -1;\n  var maxPoints = -1;\n  var lastElement = nearestPoints[0][0].length - 1;\n\n  for (var element of knn.classes) {\n    pointsPerClass[element] = 0;\n  }\n\n  for (var i = 0; i < nearestPoints.length; ++i) {\n    var currentClass = nearestPoints[i][0][lastElement];\n    var currentPoints = ++pointsPerClass[currentClass];\n    if (currentPoints > maxPoints) {\n      predictedClass = currentClass;\n      maxPoints = currentPoints;\n    }\n  }\n\n  return predictedClass;\n}\n","import Matrix from 'ml-matrix';\n\n/**\n * @private\n * Function that given vector, returns its norm\n * @param {Vector} X\n * @return {number} Norm of the vector\n */\nexport function norm(X) {\n  return Math.sqrt(X.clone().apply(pow2array).sum());\n}\n\n/**\n * @private\n * Function that pow 2 each element of a Matrix or a Vector,\n * used in the apply method of the Matrix object\n * @param {number} i - index i.\n * @param {number} j - index j.\n * @return {Matrix} The Matrix object modified at the index i, j.\n * */\nexport function pow2array(i, j) {\n  this.set(i, j, this.get(i, j) ** 2);\n}\n\n/**\n * @private\n * Function that normalize the dataset and return the means and\n * standard deviation of each feature.\n * @param {Matrix} dataset\n * @return {object} dataset normalized, means and standard deviations\n */\nexport function featureNormalize(dataset) {\n  var means = dataset.mean('column');\n  var std = dataset.standardDeviation('column', { mean: means, unbiased: true });\n  var result = Matrix.checkMatrix(dataset).subRowVector(means);\n  return { result: result.divRowVector(std), means: means, std: std };\n}\n\n/**\n * @private\n * Function that initialize an array of matrices.\n * @param {Array} array\n * @param {boolean} isMatrix\n * @return {Array} array with the matrices initialized.\n */\nexport function initializeMatrices(array, isMatrix) {\n  if (isMatrix) {\n    for (var i = 0; i < array.length; ++i) {\n      for (var j = 0; j < array[i].length; ++j) {\n        var elem = array[i][j];\n        array[i][j] = elem !== null ? new Matrix(array[i][j]) : undefined;\n      }\n    }\n  } else {\n    for (i = 0; i < array.length; ++i) {\n      array[i] = new Matrix(array[i]);\n    }\n  }\n\n  return array;\n}\n","import Matrix from 'ml-matrix';\n\nimport * as Utils from './utils';\n\n/**\n * @class PLS\n */\nexport class PLS {\n  /**\n   * Constructor for Partial Least Squares (PLS)\n   * @param {object} options\n   * @param {number} [options.latentVectors] - Number of latent vector to get (if the algorithm doesn't find a good model below the tolerance)\n   * @param {number} [options.tolerance=1e-5]\n   * @param {boolean} [options.scale=true] - rescale dataset using mean.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.meanX = model.meanX;\n      this.stdDevX = model.stdDevX;\n      this.meanY = model.meanY;\n      this.stdDevY = model.stdDevY;\n      this.PBQ = Matrix.checkMatrix(model.PBQ);\n      this.R2X = model.R2X;\n      this.scale = model.scale;\n      this.scaleMethod = model.scaleMethod;\n      this.tolerance = model.tolerance;\n    } else {\n      var {\n        tolerance = 1e-5,\n        scale = true,\n      } = options;\n      this.tolerance = tolerance;\n      this.scale = scale;\n      this.latentVectors = options.latentVectors;\n    }\n  }\n\n  /**\n   * Fits the model with the given data and predictions, in this function is calculated the\n   * following outputs:\n   *\n   * T - Score matrix of X\n   * P - Loading matrix of X\n   * U - Score matrix of Y\n   * Q - Loading matrix of Y\n   * B - Matrix of regression coefficient\n   * W - Weight matrix of X\n   *\n   * @param {Matrix|Array} trainingSet\n   * @param {Matrix|Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n    trainingValues = Matrix.checkMatrix(trainingValues);\n\n    if (trainingSet.length !== trainingValues.length) {\n      throw new RangeError('The number of X rows must be equal to the number of Y rows');\n    }\n\n    this.meanX = trainingSet.mean('column');\n    this.stdDevX = trainingSet.standardDeviation('column', { mean: this.meanX, unbiased: true });\n    this.meanY = trainingValues.mean('column');\n    this.stdDevY = trainingValues.standardDeviation('column', { mean: this.meanY, unbiased: true });\n\n    if (this.scale) {\n      trainingSet = trainingSet.clone().subRowVector(this.meanX).divRowVector(this.stdDevX);\n      trainingValues = trainingValues.clone().subRowVector(this.meanY).divRowVector(this.stdDevY);\n    }\n\n    if (this.latentVectors === undefined) {\n      this.latentVectors = Math.min(trainingSet.rows - 1, trainingSet.columns);\n    }\n\n    var rx = trainingSet.rows;\n    var cx = trainingSet.columns;\n    var ry = trainingValues.rows;\n    var cy = trainingValues.columns;\n\n    var ssqXcal = trainingSet.clone().mul(trainingSet).sum(); // for the r²\n    var sumOfSquaresY = trainingValues.clone().mul(trainingValues).sum();\n\n    var tolerance = this.tolerance;\n    var n = this.latentVectors;\n    var T = Matrix.zeros(rx, n);\n    var P = Matrix.zeros(cx, n);\n    var U = Matrix.zeros(ry, n);\n    var Q = Matrix.zeros(cy, n);\n    var B = Matrix.zeros(n, n);\n    var W = P.clone();\n    var k = 0;\n\n    while (Utils.norm(trainingValues) > tolerance && k < n) {\n      var transposeX = trainingSet.transpose();\n      var transposeY = trainingValues.transpose();\n\n      var tIndex = maxSumColIndex(trainingSet.clone().mul(trainingSet));\n      var uIndex = maxSumColIndex(trainingValues.clone().mul(trainingValues));\n\n      var t1 = trainingSet.getColumnVector(tIndex);\n      var u = trainingValues.getColumnVector(uIndex);\n      var t = Matrix.zeros(rx, 1);\n\n      while (Utils.norm(t1.clone().sub(t)) > tolerance) {\n        var w = transposeX.mmul(u);\n        w.div(Utils.norm(w));\n        t = t1;\n        t1 = trainingSet.mmul(w);\n        var q = transposeY.mmul(t1);\n        q.div(Utils.norm(q));\n        u = trainingValues.mmul(q);\n      }\n\n      t = t1;\n      var num = transposeX.mmul(t);\n      var den = t.transpose().mmul(t).get(0, 0);\n      var p = num.div(den);\n      var pnorm = Utils.norm(p);\n      p.div(pnorm);\n      t.mul(pnorm);\n      w.mul(pnorm);\n\n      num = u.transpose().mmul(t);\n      den = t.transpose().mmul(t).get(0, 0);\n      var b = num.div(den).get(0, 0);\n      trainingSet.sub(t.mmul(p.transpose()));\n      trainingValues.sub(t.clone().mul(b).mmul(q.transpose()));\n\n      T.setColumn(k, t);\n      P.setColumn(k, p);\n      U.setColumn(k, u);\n      Q.setColumn(k, q);\n      W.setColumn(k, w);\n\n      B.set(k, k, b);\n      k++;\n    }\n\n    k--;\n    T = T.subMatrix(0, T.rows - 1, 0, k);\n    P = P.subMatrix(0, P.rows - 1, 0, k);\n    U = U.subMatrix(0, U.rows - 1, 0, k);\n    Q = Q.subMatrix(0, Q.rows - 1, 0, k);\n    W = W.subMatrix(0, W.rows - 1, 0, k);\n    B = B.subMatrix(0, k, 0, k);\n\n    // TODO: review of R2Y\n    // this.R2Y = t.transpose().mmul(t).mul(q[k][0]*q[k][0]).divS(ssqYcal)[0][0];\n    //\n    this.ssqYcal = sumOfSquaresY;\n    this.E = trainingSet;\n    this.F = trainingValues;\n    this.T = T;\n    this.P = P;\n    this.U = U;\n    this.Q = Q;\n    this.W = W;\n    this.B = B;\n    this.PBQ = P.mmul(B).mmul(Q.transpose());\n    this.R2X = t.transpose().mmul(t).mmul(p.transpose().mmul(p)).div(ssqXcal).get(0, 0);\n  }\n\n  /**\n   * Predicts the behavior of the given dataset.\n   * @param {Matrix|Array} dataset - data to be predicted.\n   * @return {Matrix} - predictions of each element of the dataset.\n   */\n  predict(dataset) {\n    var X = Matrix.checkMatrix(dataset);\n    if (this.scale) {\n      X = X.subRowVector(this.meanX).divRowVector(this.stdDevX);\n    }\n    var Y = X.mmul(this.PBQ);\n    Y = Y.mulRowVector(this.stdDevY).addRowVector(this.meanY);\n    return Y;\n  }\n\n  /**\n   * Returns the explained variance on training of the PLS model\n   * @return {number}\n   */\n  getExplainedVariance() {\n    return this.R2X;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      name: 'PLS',\n      R2X: this.R2X,\n      meanX: this.meanX,\n      stdDevX: this.stdDevX,\n      meanY: this.meanY,\n      stdDevY: this.stdDevY,\n      PBQ: this.PBQ,\n      tolerance: this.tolerance,\n      scale: this.scale,\n    };\n  }\n\n  /**\n   * Load a PLS model from a JSON Object\n   * @param {object} model\n   * @return {PLS} - PLS object from the given model\n   */\n  static load(model) {\n    if (model.name !== 'PLS') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n    return new PLS(true, model);\n  }\n}\n\n/**\n * @private\n * Function that returns the index where the sum of each\n * column vector is maximum.\n * @param {Matrix} data\n * @return {number} index of the maximum\n */\nfunction maxSumColIndex(data) {\n  return Matrix.rowVector(data.sum('column')).maxIndex()[0];\n}\n","import { Matrix, SingularValueDecomposition, inverse } from 'ml-matrix';\n\nimport { initializeMatrices } from './utils';\n\n/**\n * @class KOPLS\n */\nexport class KOPLS {\n  /**\n     * Constructor for Kernel-based Orthogonal Projections to Latent Structures (K-OPLS)\n     * @param {object} options\n     * @param {number} [options.predictiveComponents] - Number of predictive components to use.\n     * @param {number} [options.orthogonalComponents] - Number of Y-Orthogonal components.\n     * @param {Kernel} [options.kernel] - Kernel object to apply, see [ml-kernel](https://github.com/mljs/kernel).\n     * @param {object} model - for load purposes.\n     */\n  constructor(options, model) {\n    if (options === true) {\n      this.trainingSet = new Matrix(model.trainingSet);\n      this.YLoadingMat = new Matrix(model.YLoadingMat);\n      this.SigmaPow = new Matrix(model.SigmaPow);\n      this.YScoreMat = new Matrix(model.YScoreMat);\n      this.predScoreMat = initializeMatrices(model.predScoreMat, false);\n      this.YOrthLoadingVec = initializeMatrices(model.YOrthLoadingVec, false);\n      this.YOrthEigen = model.YOrthEigen;\n      this.YOrthScoreMat = initializeMatrices(model.YOrthScoreMat, false);\n      this.toNorm = initializeMatrices(model.toNorm, false);\n      this.TURegressionCoeff = initializeMatrices(model.TURegressionCoeff, false);\n      this.kernelX = initializeMatrices(model.kernelX, true);\n      this.kernel = model.kernel;\n      this.orthogonalComp = model.orthogonalComp;\n      this.predictiveComp = model.predictiveComp;\n    } else {\n      if (options.predictiveComponents === undefined) {\n        throw new RangeError('no predictive components found!');\n      }\n      if (options.orthogonalComponents === undefined) {\n        throw new RangeError('no orthogonal components found!');\n      }\n      if (options.kernel === undefined) {\n        throw new RangeError('no kernel found!');\n      }\n\n      this.orthogonalComp = options.orthogonalComponents;\n      this.predictiveComp = options.predictiveComponents;\n      this.kernel = options.kernel;\n    }\n  }\n\n  /**\n     * Train the K-OPLS model with the given training set and labels.\n     * @param {Matrix|Array} trainingSet\n     * @param {Matrix|Array} trainingValues\n     */\n  train(trainingSet, trainingValues) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n    trainingValues = Matrix.checkMatrix(trainingValues);\n\n    // to save and compute kernel with the prediction dataset.\n    this.trainingSet = trainingSet.clone();\n\n    var kernelX = this.kernel.compute(trainingSet);\n\n    var Identity = Matrix.eye(kernelX.rows, kernelX.rows, 1);\n    var temp = kernelX;\n    kernelX = new Array(this.orthogonalComp + 1);\n    for (let i = 0; i < this.orthogonalComp + 1; i++) {\n      kernelX[i] = new Array(this.orthogonalComp + 1);\n    }\n    kernelX[0][0] = temp;\n\n    var result = new SingularValueDecomposition(trainingValues.transpose().mmul(kernelX[0][0]).mmul(trainingValues), {\n      computeLeftSingularVectors: true,\n      computeRightSingularVectors: false\n    });\n    var YLoadingMat = result.leftSingularVectors;\n    var Sigma = result.diagonalMatrix;\n\n    YLoadingMat = YLoadingMat.subMatrix(0, YLoadingMat.rows - 1, 0, this.predictiveComp - 1);\n    Sigma = Sigma.subMatrix(0, this.predictiveComp - 1, 0, this.predictiveComp - 1);\n\n    var YScoreMat = trainingValues.mmul(YLoadingMat);\n\n    var predScoreMat = new Array(this.orthogonalComp + 1);\n    var TURegressionCoeff = new Array(this.orthogonalComp + 1);\n    var YOrthScoreMat = new Array(this.orthogonalComp);\n    var YOrthLoadingVec = new Array(this.orthogonalComp);\n    var YOrthEigen = new Array(this.orthogonalComp);\n    var YOrthScoreNorm = new Array(this.orthogonalComp);\n\n    var SigmaPow = Matrix.pow(Sigma, -0.5);\n    // to avoid errors, check infinity\n    SigmaPow.apply(function (i, j) {\n      if (this.get(i, j) === Infinity) {\n        this.set(i, j, 0);\n      }\n    });\n\n    for (var i = 0; i < this.orthogonalComp; ++i) {\n      predScoreMat[i] = kernelX[0][i].transpose().mmul(YScoreMat).mmul(SigmaPow);\n\n      var TpiPrime = predScoreMat[i].transpose();\n      TURegressionCoeff[i] = inverse(TpiPrime.mmul(predScoreMat[i])).mmul(TpiPrime).mmul(YScoreMat);\n\n      result = new SingularValueDecomposition(TpiPrime.mmul(Matrix.sub(kernelX[i][i], predScoreMat[i].mmul(TpiPrime))).mmul(predScoreMat[i]), {\n        computeLeftSingularVectors: true,\n        computeRightSingularVectors: false\n      });\n      var CoTemp = result.leftSingularVectors;\n      var SoTemp = result.diagonalMatrix;\n\n      YOrthLoadingVec[i] = CoTemp.subMatrix(0, CoTemp.rows - 1, 0, 0);\n      YOrthEigen[i] = SoTemp.get(0, 0);\n\n      YOrthScoreMat[i] = Matrix.sub(kernelX[i][i], predScoreMat[i].mmul(TpiPrime)).mmul(predScoreMat[i]).mmul(YOrthLoadingVec[i]).mul(Math.pow(YOrthEigen[i], -0.5));\n\n      var toiPrime = YOrthScoreMat[i].transpose();\n      YOrthScoreNorm[i] = Matrix.sqrt(toiPrime.mmul(YOrthScoreMat[i]));\n\n      YOrthScoreMat[i] = YOrthScoreMat[i].divRowVector(YOrthScoreNorm[i]);\n\n      var ITo = Matrix.sub(Identity, YOrthScoreMat[i].mmul(YOrthScoreMat[i].transpose()));\n\n      kernelX[0][i + 1] = kernelX[0][i].mmul(ITo);\n      kernelX[i + 1][i + 1] = ITo.mmul(kernelX[i][i]).mmul(ITo);\n    }\n\n    var lastScoreMat = predScoreMat[this.orthogonalComp] = kernelX[0][this.orthogonalComp].transpose().mmul(YScoreMat).mmul(SigmaPow);\n\n    var lastTpPrime = lastScoreMat.transpose();\n    TURegressionCoeff[this.orthogonalComp] = inverse(lastTpPrime.mmul(lastScoreMat)).mmul(lastTpPrime).mmul(YScoreMat);\n\n    this.YLoadingMat = YLoadingMat;\n    this.SigmaPow = SigmaPow;\n    this.YScoreMat = YScoreMat;\n    this.predScoreMat = predScoreMat;\n    this.YOrthLoadingVec = YOrthLoadingVec;\n    this.YOrthEigen = YOrthEigen;\n    this.YOrthScoreMat = YOrthScoreMat;\n    this.toNorm = YOrthScoreNorm;\n    this.TURegressionCoeff = TURegressionCoeff;\n    this.kernelX = kernelX;\n  }\n\n  /**\n     * Predicts the output given the matrix to predict.\n     * @param {Matrix|Array} toPredict\n     * @return {{y: Matrix, predScoreMat: Array<Matrix>, predYOrthVectors: Array<Matrix>}} predictions\n     */\n  predict(toPredict) {\n    var KTestTrain = this.kernel.compute(toPredict, this.trainingSet);\n\n    var temp = KTestTrain;\n    KTestTrain = new Array(this.orthogonalComp + 1);\n    for (let i = 0; i < this.orthogonalComp + 1; i++) {\n      KTestTrain[i] = new Array(this.orthogonalComp + 1);\n    }\n    KTestTrain[0][0] = temp;\n\n    var YOrthScoreVector = new Array(this.orthogonalComp);\n    var predScoreMat = new Array(this.orthogonalComp);\n\n    var i;\n    for (i = 0; i < this.orthogonalComp; ++i) {\n      predScoreMat[i] = KTestTrain[i][0].mmul(this.YScoreMat).mmul(this.SigmaPow);\n\n      YOrthScoreVector[i] = Matrix.sub(KTestTrain[i][i], predScoreMat[i].mmul(this.predScoreMat[i].transpose())).mmul(this.predScoreMat[i]).mmul(this.YOrthLoadingVec[i]).mul(Math.pow(this.YOrthEigen[i], -0.5));\n\n      YOrthScoreVector[i] = YOrthScoreVector[i].divRowVector(this.toNorm[i]);\n\n      var scoreMatPrime = this.YOrthScoreMat[i].transpose();\n      KTestTrain[i + 1][0] = Matrix.sub(KTestTrain[i][0], YOrthScoreVector[i].mmul(scoreMatPrime).mmul(this.kernelX[0][i].transpose()));\n\n      var p1 = Matrix.sub(KTestTrain[i][0], KTestTrain[i][i].mmul(this.YOrthScoreMat[i]).mmul(scoreMatPrime));\n      var p2 = YOrthScoreVector[i].mmul(scoreMatPrime).mmul(this.kernelX[i][i]);\n      var p3 = p2.mmul(this.YOrthScoreMat[i]).mmul(scoreMatPrime);\n\n      KTestTrain[i + 1][i + 1] = p1.sub(p2).add(p3);\n    }\n\n    predScoreMat[i] = KTestTrain[i][0].mmul(this.YScoreMat).mmul(this.SigmaPow);\n    var prediction = predScoreMat[i].mmul(this.TURegressionCoeff[i]).mmul(this.YLoadingMat.transpose());\n\n    return {\n      prediction: prediction,\n      predScoreMat: predScoreMat,\n      predYOrthVectors: YOrthScoreVector\n    };\n  }\n\n  /**\n     * Export the current model to JSON.\n     * @return {object} - Current model.\n     */\n  toJSON() {\n    return {\n      name: 'K-OPLS',\n      YLoadingMat: this.YLoadingMat,\n      SigmaPow: this.SigmaPow,\n      YScoreMat: this.YScoreMat,\n      predScoreMat: this.predScoreMat,\n      YOrthLoadingVec: this.YOrthLoadingVec,\n      YOrthEigen: this.YOrthEigen,\n      YOrthScoreMat: this.YOrthScoreMat,\n      toNorm: this.toNorm,\n      TURegressionCoeff: this.TURegressionCoeff,\n      kernelX: this.kernelX,\n      trainingSet: this.trainingSet,\n      orthogonalComp: this.orthogonalComp,\n      predictiveComp: this.predictiveComp\n    };\n  }\n\n  /**\n     * Load a K-OPLS with the given model.\n     * @param {object} model\n     * @param {Kernel} kernel - kernel used on the model, see [ml-kernel](https://github.com/mljs/kernel).\n     * @return {KOPLS}\n     */\n  static load(model, kernel) {\n    if (model.name !== 'K-OPLS') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    if (!kernel) {\n      throw new RangeError('You must provide a kernel for the model!');\n    }\n\n    model.kernel = kernel;\n    return new KOPLS(true, model);\n  }\n}\n","/**\n *  Constructs a confusion matrix\n * @class ConfusionMatrix\n * @example\n * const CM = new ConfusionMatrix([[13, 2], [10, 5]], ['cat', 'dog'])\n * @param {Array<Array<number>>} matrix - The confusion matrix, a 2D Array. Rows represent the actual label and columns\n *     the predicted label.\n * @param {Array<any>} labels - Labels of the confusion matrix, a 1D Array\n */\nclass ConfusionMatrix {\n    constructor(matrix, labels) {\n        if (matrix.length !== matrix[0].length) {\n            throw new Error('Confusion matrix must be square');\n        }\n        if (labels.length !== matrix.length) {\n            throw new Error('Confusion matrix and labels should have the same length');\n        }\n        this.labels = labels;\n        this.matrix = matrix;\n    }\n\n\n    /**\n     * Construct confusion matrix from the predicted and actual labels (classes). Be sure to provide the arguments in\n     * the correct order!\n     * @param {Array<any>} actual  - The predicted labels of the classification\n     * @param {Array<any>} predicted     - The actual labels of the classification. Has to be of same length as\n     *     predicted.\n     * @param {object} [options] - Additional options\n     * @param {Array<any>} [options.labels] - The list of labels that should be used. If not provided the distinct set\n     *     of labels present in predicted and actual is used. Labels are compared using the strict equality operator\n     *     '==='\n     * @return {ConfusionMatrix} - Confusion matrix\n     */\n    static fromLabels(actual, predicted, options = {}) {\n        if (predicted.length !== actual.length) {\n            throw new Error('predicted and actual must have the same length');\n        }\n        let distinctLabels;\n        if (options.labels) {\n            distinctLabels = new Set(options.labels);\n        } else {\n            distinctLabels = new Set([...actual, ...predicted]);\n        }\n        distinctLabels = Array.from(distinctLabels);\n        if (options.sort) {\n            distinctLabels.sort(options.sort);\n        }\n\n        // Create confusion matrix and fill with 0's\n        const matrix = Array.from({length: distinctLabels.length});\n        for (let i = 0; i < matrix.length; i++) {\n            matrix[i] = new Array(matrix.length);\n            matrix[i].fill(0);\n        }\n\n        for (let i = 0; i < predicted.length; i++) {\n            const actualIdx = distinctLabels.indexOf(actual[i]);\n            const predictedIdx = distinctLabels.indexOf(predicted[i]);\n            if (actualIdx >= 0 && predictedIdx >= 0) {\n                matrix[actualIdx][predictedIdx]++;\n            }\n        }\n\n        return new ConfusionMatrix(matrix, distinctLabels);\n    }\n\n    /**\n     * Get the confusion matrix\n     * @return {Array<Array<number> >}\n     */\n    getMatrix() {\n        return this.matrix;\n    }\n\n    getLabels() {\n        return this.labels;\n    }\n\n    /**\n     * Get the total number of samples\n     * @return {number}\n     */\n    getTotalCount() {\n        let predicted = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            for (var j = 0; j < this.matrix.length; j++) {\n                predicted += this.matrix[i][j];\n            }\n        }\n        return predicted;\n    }\n\n    /**\n     * Get the total number of true predictions\n     * @return {number}\n     */\n    getTrueCount() {\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            count += this.matrix[i][i];\n        }\n        return count;\n    }\n\n    /**\n     * Get the total number of false predictions.\n     * @return {number}\n     */\n    getFalseCount() {\n        return this.getTotalCount() - this.getTrueCount();\n    }\n\n    /**\n     * Get the number of true positive predictions.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getTruePositiveCount(label) {\n        const index = this.getIndex(label);\n        return this.matrix[index][index];\n    }\n\n    /**\n     * Get the number of true negative predictions\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getTrueNegativeCount(label) {\n        const index = this.getIndex(label);\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            for (var j = 0; j < this.matrix.length; j++) {\n                if (i !== index && j !== index) {\n                    count += this.matrix[i][j];\n                }\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Get the number of false positive predictions.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalsePositiveCount(label) {\n        const index = this.getIndex(label);\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            if (i !== index) {\n                count += this.matrix[i][index];\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Get the number of false negative predictions.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseNegativeCount(label) {\n        const index = this.getIndex(label);\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            if (i !== index) {\n                count += this.matrix[index][i];\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Get the number of real positive samples.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getPositiveCount(label) {\n        return this.getTruePositiveCount(label) + this.getFalseNegativeCount(label);\n    }\n\n    /**\n     * Get the number of real negative samples.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getNegativeCount(label) {\n        return this.getTrueNegativeCount(label) + this.getFalsePositiveCount(label);\n    }\n\n    /**\n     * Get the index in the confusion matrix that corresponds to the given label\n     * @param {any} label - The label to search for\n     * @throws if the label is not found\n     * @return {number}\n     */\n    getIndex(label) {\n        const index = this.labels.indexOf(label);\n        if (index === -1) throw new Error('The label does not exist');\n        return index;\n    }\n\n    /**\n     * Get the true positive rate a.k.a. sensitivity. Computes the ratio between the number of true positive predictions and the total number of positive samples.\n     * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number} - The true positive rate [0-1]\n     */\n    getTruePositiveRate(label) {\n        return this.getTruePositiveCount(label) / this.getPositiveCount(label);\n    }\n\n    /**\n     * Get the true negative rate a.k.a. specificity. Computes the ration between the number of true negative predictions and the total number of negative samples.\n     * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getTrueNegativeRate(label) {\n        return this.getTrueNegativeCount(label) / this.getNegativeCount(label);\n    }\n\n    /**\n     * Get the positive predictive value a.k.a. precision. Computes TP / (TP + FP)\n     * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getPositivePredictiveValue(label) {\n        const TP = this.getTruePositiveCount(label);\n        return TP / (TP + this.getFalsePositiveCount(label));\n    }\n\n    /**\n     * Negative predictive value\n     * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getNegativePredictiveValue(label) {\n        const TN = this.getTrueNegativeCount(label);\n        return TN / (TN + this.getFalseNegativeCount(label));\n    }\n\n    /**\n     * False negative rate a.k.a. miss rate.\n     * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseNegativeRate(label) {\n        return 1 - this.getTruePositiveRate(label);\n    }\n\n    /**\n     * False positive rate a.k.a. fall-out rate.\n     * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalsePositiveRate(label) {\n        return 1 - this.getTrueNegativeRate(label);\n    }\n\n    /**\n     * False discovery rate (FDR)\n     * {@link https://en.wikipedia.org/wiki/False_discovery_rate}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseDiscoveryRate(label) {\n        const FP = this.getFalsePositiveCount(label);\n        return FP / (FP + this.getTruePositiveCount(label));\n    }\n\n    /**\n     * False omission rate (FOR)\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseOmissionRate(label) {\n        const FN = this.getFalseNegativeCount(label);\n        return FN / (FN + this.getTruePositiveCount(label));\n    }\n\n    /**\n     * F1 score\n     * {@link https://en.wikipedia.org/wiki/F1_score}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getF1Score(label) {\n        const TP = this.getTruePositiveCount(label);\n        return 2 * TP / (2 * TP + this.getFalsePositiveCount(label) + this.getFalseNegativeCount(label));\n    }\n\n    /**\n     * Matthews correlation coefficient (MCC)\n     * {@link https://en.wikipedia.org/wiki/Matthews_correlation_coefficient}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getMatthewsCorrelationCoefficient(label) {\n        const TP = this.getTruePositiveCount(label);\n        const TN = this.getTrueNegativeCount(label);\n        const FP = this.getFalsePositiveCount(label);\n        const FN = this.getFalseNegativeCount(label);\n        return (TP * TN - FP * FN) / Math.sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN));\n    }\n\n    /**\n     * Informedness\n     * {@link https://en.wikipedia.org/wiki/Youden%27s_J_statistic}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getInformedness(label) {\n        return this.getTruePositiveRate(label) + this.getTrueNegativeRate(label) - 1;\n    }\n\n    /**\n     * Markedness\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getMarkedness(label) {\n        return this.getPositivePredictiveValue(label) + this.getNegativePredictiveValue(label) - 1;\n    }\n\n    /**\n     * Get the confusion table.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {Array<Array<number> >} - The 2x2 confusion table. [[TP, FN], [FP, TN]]\n     */\n    getConfusionTable(label) {\n        return [\n            [\n                this.getTruePositiveCount(label),\n                this.getFalseNegativeCount(label)\n            ],\n            [\n                this.getFalsePositiveCount(label),\n                this.getTrueNegativeCount(label)\n            ]\n        ];\n    }\n\n    /**\n     * Get total accuracy.\n     * @return {number} - The ratio between the number of true predictions and total number of classifications ([0-1])\n     */\n    getAccuracy() {\n        let correct = 0;\n        let incorrect = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            for (var j = 0; j < this.matrix.length; j++) {\n                if (i === j) correct += this.matrix[i][j];\n                else incorrect += this.matrix[i][j];\n            }\n        }\n        return correct / (correct + incorrect);\n    }\n\n\n    /**\n     * Returns the element in the confusion matrix that corresponds to the given actual and predicted labels.\n     * @param {any} actual - The true label\n     * @param {any} predicted - The predicted label\n     * @return {number} - The element in the confusion matrix\n     */\n    getCount(actual, predicted) {\n        const actualIndex = this.getIndex(actual);\n        const predictedIndex = this.getIndex(predicted);\n        return this.matrix[actualIndex][predictedIndex];\n    }\n\n    /**\n     * Compute the general prediction accuracy\n     * @deprecated Use getAccuracy\n     * @return {number} - The prediction accuracy ([0-1]\n     */\n    get accuracy() {\n        return this.getAccuracy();\n    }\n\n    /**\n     * Compute the number of predicted observations\n     * @deprecated Use getTotalCount\n     * @return {number}\n     */\n    get total() {\n        return this.getTotalCount();\n    }\n}\n\nmodule.exports = ConfusionMatrix;\n","'use strict';\nconst defaultOptions = {\n  mode: 'index'\n};\n\nmodule.exports = function *(M, N, options) {\n  options = Object.assign({}, defaultOptions, options);\n  var a = new Array(N);\n  var c = new Array(M);\n  var b = new Array(N);\n  var p = new Array(N + 2);\n  var x, y, z;\n\n  // init a and b\n  for (var i = 0; i < N; i++) {\n    a[i] = i;\n    if (i < N - M) b[i] = 0;\n    else b[i] = 1;\n  }\n\n  // init c\n  for (i = 0; i < M; i++) {\n    c[i] = N - M + i;\n  }\n\n  // init p\n  for (i = 0; i < p.length; i++) {\n    if (i === 0) p[i] = N + 1;\n    else if (i <= N - M) p[i] = 0;\n    else if (i <= N) p[i] = i - N + M;\n    else p[i] = -2;\n  }\n\n  function twiddle() {\n    var i, j, k;\n    j = 1;\n    while (p[j] <= 0) {\n      j++;\n    }\n    if (p[j - 1] === 0) {\n      for (i = j - 1; i !== 1; i--) {\n        p[i] = -1;\n      }\n      p[j] = 0;\n      x = z = 0;\n      p[1] = 1;\n      y = j - 1;\n    } else {\n      if (j > 1) {\n        p[j - 1] = 0;\n      }\n      do {\n        j++;\n      }\n      while (p[j] > 0);\n      k = j - 1;\n      i = j;\n      while (p[i] === 0) {\n        p[i++] = -1;\n      }\n      if (p[i] === -1) {\n        p[i] = p[k];\n        z = p[k] - 1;\n        x = i - 1;\n        y = k - 1;\n        p[k] = -1;\n      } else {\n        if (i === p[0]) {\n          return 0;\n        } else {\n          p[j] = p[i];\n          z = p[i] - 1;\n          p[i] = 0;\n          x = j - 1;\n          y = i - 1;\n        }\n      }\n    }\n    return 1;\n  }\n\n  if (options.mode === 'index') {\n    yield c.slice();\n    while (twiddle()) {\n      c[z] = a[x];\n      yield c.slice();\n    }\n  } else if (options.mode === 'mask') {\n    yield b.slice();\n    while (twiddle()) {\n      b[x] = 1;\n      b[y] = 0;\n      yield b.slice();\n    }\n  } else {\n    throw new Error('Invalid mode');\n  }\n};\n","'use strict';\n\nconst ConfusionMatrix = require('ml-confusion-matrix');\n\nconst CV = {};\nconst combinations = require('ml-combinations');\n\n/**\n * Performs a leave-one-out cross-validation (LOO-CV) of the given samples. In LOO-CV, 1 observation is used as the\n * validation set while the rest is used as the training set. This is repeated once for each observation. LOO-CV is a\n * special case of LPO-CV. @see leavePout\n * @param {function} Classifier - The classifier's constructor to use for the cross validation. Expect ml-classifier\n *     api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nCV.leaveOneOut = function (Classifier, features, labels, classifierOptions) {\n    if (typeof labels === 'function') {\n        var callback = labels;\n        labels = features;\n        features = Classifier;\n        return CV.leavePOut(features, labels, 1, callback);\n    }\n    return CV.leavePOut(Classifier, features, labels, classifierOptions, 1);\n};\n\n\n/**\n * Performs a leave-p-out cross-validation (LPO-CV) of the given samples. In LPO-CV, p observations are used as the\n * validation set while the rest is used as the training set. This is repeated as many times as there are possible\n * ways to combine p observations from the set (unordered without replacement). Be aware that for relatively small\n * data-set size this can require a very large number of training and testing to do!\n * @param {function} Classifier - The classifier's constructor to use for the cross validation. Expect ml-classifier\n *     api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @param {number} p - The size of the validation sub-samples' set\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nCV.leavePOut = function (Classifier, features, labels, classifierOptions, p) {\n    if (typeof classifierOptions === 'function') {\n        var callback = classifierOptions;\n        p = labels;\n        labels = features;\n        features = Classifier;\n    }\n    check(features, labels);\n    const distinct = getDistinct(labels);\n    const confusionMatrix = initMatrix(distinct.length, distinct.length);\n\n    var N = features.length;\n    var gen = combinations(p, N);\n    var allIdx = new Array(N);\n    for (let i = 0; i < N; i++) {\n        allIdx[i] = i;\n    }\n    for (const testIdx of gen) {\n        var trainIdx = allIdx.slice();\n\n        for (let i = testIdx.length - 1; i >= 0; i--) {\n            trainIdx.splice(testIdx[i], 1);\n        }\n\n        if (callback) {\n            validateWithCallback(features, labels, testIdx, trainIdx, confusionMatrix, distinct, callback);\n        } else {\n            validate(Classifier, features, labels, classifierOptions, testIdx, trainIdx, confusionMatrix, distinct);\n        }\n\n    }\n\n    return new ConfusionMatrix(confusionMatrix, distinct);\n};\n\n/**\n * Performs k-fold cross-validation (KF-CV). KF-CV separates the data-set into k random equally sized partitions, and\n * uses each as a validation set, with all other partitions used in the training set. Observations left over from if k\n * does not divide the number of observations are left out of the cross-validation process.\n * @param {function} Classifier - The classifier's to use for the cross validation. Expect ml-classifier api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @param {number} k - The number of partitions to create\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nCV.kFold = function (Classifier, features, labels, classifierOptions, k) {\n    if (typeof classifierOptions === 'function') {\n        var callback = classifierOptions;\n        k = labels;\n        labels = features;\n        features = Classifier;\n    }\n    check(features, labels);\n    const distinct = getDistinct(labels);\n    const confusionMatrix = initMatrix(distinct.length, distinct.length);\n    var N = features.length;\n    var allIdx = new Array(N);\n    for (var i = 0; i < N; i++) {\n        allIdx[i] = i;\n    }\n\n    var l = Math.floor(N / k);\n    // create random k-folds\n    var current = [];\n    var folds = [];\n    while (allIdx.length) {\n        var randi = Math.floor(Math.random() * allIdx.length);\n        current.push(allIdx[randi]);\n        allIdx.splice(randi, 1);\n        if (current.length === l) {\n            folds.push(current);\n            current = [];\n        }\n    }\n    if (current.length) folds.push(current);\n    folds = folds.slice(0, k);\n\n\n    for (i = 0; i < folds.length; i++) {\n        var testIdx = folds[i];\n        var trainIdx = [];\n        for (var j = 0; j < folds.length; j++) {\n            if (j !== i) trainIdx = trainIdx.concat(folds[j]);\n        }\n\n        if (callback) {\n            validateWithCallback(features, labels, testIdx, trainIdx, confusionMatrix, distinct, callback);\n        } else {\n            validate(Classifier, features, labels, classifierOptions, testIdx, trainIdx, confusionMatrix, distinct);\n        }\n    }\n\n    return new ConfusionMatrix(confusionMatrix, distinct);\n};\n\nfunction check(features, labels) {\n    if (features.length !== labels.length) {\n        throw new Error('features and labels should have the same length');\n    }\n}\n\nfunction initMatrix(rows, columns) {\n    return new Array(rows).fill(0).map(() => new Array(columns).fill(0));\n}\n\nfunction getDistinct(arr) {\n    var s = new Set();\n    for (let i = 0; i < arr.length; i++) {\n        s.add(arr[i]);\n    }\n    return Array.from(s);\n}\n\nfunction validate(Classifier, features, labels, classifierOptions, testIdx, trainIdx, confusionMatrix, distinct) {\n    const {testFeatures, trainFeatures, testLabels, trainLabels} = getTrainTest(features, labels, testIdx, trainIdx);\n\n    var classifier;\n    if (Classifier.prototype.train) {\n        classifier = new Classifier(classifierOptions);\n        classifier.train(trainFeatures, trainLabels);\n    } else {\n        classifier = new Classifier(trainFeatures, trainLabels, classifierOptions);\n    }\n\n    var predictedLabels = classifier.predict(testFeatures);\n    updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct);\n}\n\nfunction validateWithCallback(features, labels, testIdx, trainIdx, confusionMatrix, distinct, callback) {\n    const {testFeatures, trainFeatures, testLabels, trainLabels} = getTrainTest(features, labels, testIdx, trainIdx);\n    const predictedLabels = callback(trainFeatures, trainLabels, testFeatures);\n    updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct);\n}\n\nfunction updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct) {\n\n    for (var i = 0; i < predictedLabels.length; i++) {\n        const actualIdx = distinct.indexOf(testLabels[i]);\n        const predictedIdx = distinct.indexOf(predictedLabels[i]);\n        if (actualIdx < 0 || predictedIdx < 0) {\n            // eslint-disable-next-line no-console\n            console.warn(`ignore unknown predicted label ${predictedLabels[i]}`);\n        }\n        confusionMatrix[actualIdx][predictedIdx]++;\n    }\n}\n\n\nfunction getTrainTest(features, labels, testIdx, trainIdx) {\n    return {\n        testFeatures: testIdx.map(function (index) {\n            return features[index];\n        }),\n        trainFeatures: trainIdx.map(function (index) {\n            return features[index];\n        }),\n        testLabels: testIdx.map(function (index) {\n            return labels[index];\n        }),\n        trainLabels: trainIdx.map(function (index) {\n            return labels[index];\n        })\n    };\n}\n\nmodule.exports = CV;\n","'use strict';\n\nvar mlMatrix = require('ml-matrix');\n\nfunction logistic(val) {\n  return 1 / (1 + Math.exp(-val));\n}\n\nfunction expELU(val, param) {\n  return val < 0 ? param * (Math.exp(val) - 1) : val;\n}\n\nfunction softExponential(val, param) {\n  if (param < 0) {\n    return -Math.log(1 - param * (val + param)) / param;\n  }\n  if (param > 0) {\n    return ((Math.exp(param * val) - 1) / param) + param;\n  }\n  return val;\n}\n\nfunction softExponentialPrime(val, param) {\n  if (param < 0) {\n    return 1 / (1 - param * (param + val));\n  } else {\n    return Math.exp(param * val);\n  }\n}\n\nconst ACTIVATION_FUNCTIONS = {\n  tanh: {\n    activation: Math.tanh,\n    derivate: (val) => 1 - (val * val)\n  },\n  identity: {\n    activation: (val) => val,\n    derivate: () => 1\n  },\n  logistic: {\n    activation: logistic,\n    derivate: (val) => logistic(val) * (1 - logistic(val))\n  },\n  arctan: {\n    activation: Math.atan,\n    derivate: (val) => 1 / (val * val + 1)\n  },\n  softsign: {\n    activation: (val) => val / (1 + Math.abs(val)),\n    derivate: (val) => 1 / ((1 + Math.abs(val)) * (1 + Math.abs(val)))\n  },\n  relu: {\n    activation: (val) => (val < 0 ? 0 : val),\n    derivate: (val) => (val < 0 ? 0 : 1)\n  },\n  softplus: {\n    activation: (val) => Math.log(1 + Math.exp(val)),\n    derivate: (val) => 1 / (1 + Math.exp(-val))\n  },\n  bent: {\n    activation: (val) => ((Math.sqrt(val * val + 1) - 1) / 2) + val,\n    derivate: (val) => (val / (2 * Math.sqrt(val * val + 1))) + 1\n  },\n  sinusoid: {\n    activation: Math.sin,\n    derivate: Math.cos\n  },\n  sinc: {\n    activation: (val) => (val === 0 ? 1 : Math.sin(val) / val),\n    derivate: (val) => (val === 0 ? 0 : (Math.cos(val) / val) - (Math.sin(val) / (val * val)))\n  },\n  gaussian: {\n    activation: (val) => Math.exp(-(val * val)),\n    derivate: (val) => -2 * val * Math.exp(-(val * val))\n  },\n  'parametric-relu': {\n    activation: (val, param) => (val < 0 ? param * val : val),\n    derivate: (val, param) => (val < 0 ? param : 1)\n  },\n  'exponential-elu': {\n    activation: expELU,\n    derivate: (val, param) => (val < 0 ? expELU(val, param) + param : 1)\n  },\n  'soft-exponential': {\n    activation: softExponential,\n    derivate: softExponentialPrime\n  }\n};\n\nclass Layer {\n  /**\n     * @private\n     * Create a new layer with the given options\n     * @param {object} options\n     * @param {number} [options.inputSize] - Number of conections that enter the neurons.\n     * @param {number} [options.outputSize] - Number of conections that leave the neurons.\n     * @param {number} [options.regularization] - Regularization parameter.\n     * @param {number} [options.epsilon] - Learning rate parameter.\n     * @param {string} [options.activation] - Activation function parameter from the FeedForwardNeuralNetwork class.\n     * @param {number} [options.activationParam] - Activation parameter if needed.\n     */\n  constructor(options) {\n    this.inputSize = options.inputSize;\n    this.outputSize = options.outputSize;\n    this.regularization = options.regularization;\n    this.epsilon = options.epsilon;\n    this.activation = options.activation;\n    this.activationParam = options.activationParam;\n\n    var selectedFunction = ACTIVATION_FUNCTIONS[options.activation];\n    var params = selectedFunction.activation.length;\n\n    var actFunction = params > 1 ? (val) => selectedFunction.activation(val, options.activationParam) : selectedFunction.activation;\n    var derFunction = params > 1 ? (val) => selectedFunction.derivate(val, options.activationParam) : selectedFunction.derivate;\n\n    this.activationFunction = function (i, j) {\n      this.set(i, j, actFunction(this.get(i, j)));\n    };\n    this.derivate = function (i, j) {\n      this.set(i, j, derFunction(this.get(i, j)));\n    };\n\n    if (options.model) {\n      // load model\n      this.W = mlMatrix.Matrix.checkMatrix(options.W);\n      this.b = mlMatrix.Matrix.checkMatrix(options.b);\n    } else {\n      // default constructor\n      this.W = mlMatrix.Matrix.rand(this.inputSize, this.outputSize);\n      this.b = mlMatrix.Matrix.zeros(1, this.outputSize);\n\n      this.W.apply(function (i, j) {\n        this.set(i, j, this.get(i, j) / Math.sqrt(options.inputSize));\n      });\n    }\n  }\n\n  /**\n     * @private\n     * propagate the given input through the current layer.\n     * @param {Matrix} X - input.\n     * @return {Matrix} output at the current layer.\n     */\n  forward(X) {\n    var z = X.mmul(this.W).addRowVector(this.b);\n    z.apply(this.activationFunction);\n    this.a = z.clone();\n    return z;\n  }\n\n  /**\n     * @private\n     * apply backpropagation algorithm at the current layer\n     * @param {Matrix} delta - delta values estimated at the following layer.\n     * @param {Matrix} a - 'a' values from the following layer.\n     * @return {Matrix} the new delta values for the next layer.\n     */\n  backpropagation(delta, a) {\n    this.dW = a.transpose().mmul(delta);\n    this.db = mlMatrix.Matrix.rowVector(delta.sum('column'));\n\n    var aCopy = a.clone();\n    return delta.mmul(this.W.transpose()).mul(aCopy.apply(this.derivate));\n  }\n\n  /**\n     * @private\n     * Function that updates the weights at the current layer with the derivatives.\n     */\n  update() {\n    this.dW.add(this.W.clone().mul(this.regularization));\n    this.W.add(this.dW.mul(-this.epsilon));\n    this.b.add(this.db.mul(-this.epsilon));\n  }\n\n  /**\n     * @private\n     * Export the current layer to JSON.\n     * @return {object} model\n     */\n  toJSON() {\n    return {\n      model: 'Layer',\n      inputSize: this.inputSize,\n      outputSize: this.outputSize,\n      regularization: this.regularization,\n      epsilon: this.epsilon,\n      activation: this.activation,\n      W: this.W,\n      b: this.b\n    };\n  }\n\n  /**\n     * @private\n     * Creates a new Layer with the given model.\n     * @param {object} model\n     * @return {Layer}\n     */\n  static load(model) {\n    if (model.model !== 'Layer') {\n      throw new RangeError('the current model is not a Layer model');\n    }\n    return new Layer(model);\n  }\n}\n\nclass OutputLayer extends Layer {\n  constructor(options) {\n    super(options);\n\n    this.activationFunction = function (i, j) {\n      this.set(i, j, Math.exp(this.get(i, j)));\n    };\n  }\n\n  static load(model) {\n    if (model.model !== 'Layer') {\n      throw new RangeError('the current model is not a Layer model');\n    }\n\n    return new OutputLayer(model);\n  }\n}\n\nclass FeedForwardNeuralNetworks {\n  /**\n   * Create a new Feedforward neural network model.\n   * @class FeedForwardNeuralNetworks\n   * @param {object} [options]\n   * @param {Array} [options.hiddenLayers=[10]] - Array that contains the sizes of the hidden layers.\n   * @param {number} [options.iterations=50] - Number of iterations at the training step.\n   * @param {number} [options.learningRate=0.01] - Learning rate of the neural net (also known as epsilon).\n   * @param {number} [options.regularization=0.01] - Regularization parameter af the neural net.\n   * @param {string} [options.activation='tanh'] - activation function to be used. (options: 'tanh'(default),\n   * 'identity', 'logistic', 'arctan', 'softsign', 'relu', 'softplus', 'bent', 'sinusoid', 'sinc', 'gaussian').\n   * (single-parametric options: 'parametric-relu', 'exponential-relu', 'soft-exponential').\n   * @param {number} [options.activationParam=1] - if the selected activation function needs a parameter.\n   */\n  constructor(options) {\n    options = options || {};\n    if (options.model) {\n      // load network\n      this.hiddenLayers = options.hiddenLayers;\n      this.iterations = options.iterations;\n      this.learningRate = options.learningRate;\n      this.regularization = options.regularization;\n      this.dicts = options.dicts;\n      this.activation = options.activation;\n      this.activationParam = options.activationParam;\n      this.model = new Array(options.layers.length);\n\n      for (var i = 0; i < this.model.length - 1; ++i) {\n        this.model[i] = Layer.load(options.layers[i]);\n      }\n      this.model[this.model.length - 1] = OutputLayer.load(options.layers[this.model.length - 1]);\n    } else {\n      // default constructor\n      this.hiddenLayers = options.hiddenLayers || [10];\n      this.iterations = options.iterations || 50;\n\n      this.learningRate = options.learningRate || 0.01;\n      this.regularization = options.regularization || 0.01;\n\n      this.activation = options.activation || 'tanh';\n      this.activationParam = options.activationParam || 1;\n      if (!(this.activation in Object.keys(ACTIVATION_FUNCTIONS))) {\n        this.activation = 'tanh';\n      }\n    }\n  }\n\n  /**\n   * @private\n   * Function that build and initialize the neural net.\n   * @param {number} inputSize - total of features to fit.\n   * @param {number} outputSize - total of labels of the prediction set.\n   */\n  buildNetwork(inputSize, outputSize) {\n    var size = 2 + (this.hiddenLayers.length - 1);\n    this.model = new Array(size);\n\n    // input layer\n    this.model[0] = new Layer({\n      inputSize: inputSize,\n      outputSize: this.hiddenLayers[0],\n      activation: this.activation,\n      activationParam: this.activationParam,\n      regularization: this.regularization,\n      epsilon: this.learningRate\n    });\n\n    // hidden layers\n    for (var i = 1; i < this.hiddenLayers.length; ++i) {\n      this.model[i] = new Layer({\n        inputSize: this.hiddenLayers[i - 1],\n        outputSize: this.hiddenLayers[i],\n        activation: this.activation,\n        activationParam: this.activationParam,\n        regularization: this.regularization,\n        epsilon: this.learningRate\n      });\n    }\n\n    // output layer\n    this.model[size - 1] = new OutputLayer({\n      inputSize: this.hiddenLayers[this.hiddenLayers.length - 1],\n      outputSize: outputSize,\n      activation: this.activation,\n      activationParam: this.activationParam,\n      regularization: this.regularization,\n      epsilon: this.learningRate\n    });\n  }\n\n  /**\n   * Train the neural net with the given features and labels.\n   * @param {Matrix|Array} features\n   * @param {Matrix|Array} labels\n   */\n  train(features, labels) {\n    features = mlMatrix.Matrix.checkMatrix(features);\n    this.dicts = dictOutputs(labels);\n\n    var inputSize = features.columns;\n    var outputSize = Object.keys(this.dicts.inputs).length;\n\n    if (!this.model) {\n      this.buildNetwork(inputSize, outputSize);\n    }\n\n    for (var i = 0; i < this.iterations; ++i) {\n      var probabilities = this.propagate(features);\n      this.backpropagation(features, labels, probabilities);\n    }\n  }\n\n  /**\n   * @private\n   * Propagate the input(training set) and retrives the probabilities of each class.\n   * @param {Matrix} X\n   * @return {Matrix} probabilities of each class.\n   */\n  propagate(X) {\n    var input = X;\n    for (var i = 0; i < this.model.length; ++i) {\n      input = this.model[i].forward(input);\n    }\n\n    // get probabilities\n    return input.divColumnVector(input.sum('row'));\n  }\n\n  /**\n   * @private\n   * Function that applies the backpropagation algorithm on each layer of the network\n   * in order to fit the features and labels.\n   * @param {Matrix} features\n   * @param {Array} labels\n   * @param {Matrix} probabilities - probabilities of each class of the feature set.\n   */\n  backpropagation(features, labels, probabilities) {\n    for (var i = 0; i < probabilities.rows; ++i) {\n      probabilities.set(i, this.dicts.inputs[labels[i]], probabilities.get(i, this.dicts.inputs[labels[i]]) - 1);\n    }\n\n    // remember, the last delta doesn't matter\n    var delta = probabilities;\n    for (i = this.model.length - 1; i >= 0; --i) {\n      var a = i > 0 ? this.model[i - 1].a : features;\n      delta = this.model[i].backpropagation(delta, a);\n    }\n\n    for (i = 0; i < this.model.length; ++i) {\n      this.model[i].update();\n    }\n  }\n\n  /**\n   * Predict the output given the feature set.\n   * @param {Array|Matrix} features\n   * @return {Array}\n   */\n  predict(features) {\n    features = mlMatrix.Matrix.checkMatrix(features);\n    var outputs = new Array(features.rows);\n    var probabilities = this.propagate(features);\n    for (var i = 0; i < features.rows; ++i) {\n      outputs[i] = this.dicts.outputs[probabilities.maxRowIndex(i)[1]];\n    }\n\n    return outputs;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} model\n   */\n  toJSON() {\n    var model = {\n      model: 'FNN',\n      hiddenLayers: this.hiddenLayers,\n      iterations: this.iterations,\n      learningRate: this.learningRate,\n      regularization: this.regularization,\n      activation: this.activation,\n      activationParam: this.activationParam,\n      dicts: this.dicts,\n      layers: new Array(this.model.length)\n    };\n\n    for (var i = 0; i < this.model.length; ++i) {\n      model.layers[i] = this.model[i].toJSON();\n    }\n\n    return model;\n  }\n\n  /**\n   * Load a Feedforward Neural Network with the current model.\n   * @param {object} model\n   * @return {FeedForwardNeuralNetworks}\n   */\n  static load(model) {\n    if (model.model !== 'FNN') {\n      throw new RangeError('the current model is not a feed forward network');\n    }\n\n    return new FeedForwardNeuralNetworks(model);\n  }\n}\n\n/**\n * @private\n * Method that given an array of labels(predictions), returns two dictionaries, one to transform from labels to\n * numbers and other in the reverse way\n * @param {Array} array\n * @return {object}\n */\nfunction dictOutputs(array) {\n  var inputs = {};\n  var outputs = {};\n  var index = 0;\n  for (var i = 0; i < array.length; i += 1) {\n    if (inputs[array[i]] === undefined) {\n      inputs[array[i]] = index;\n      outputs[index] = array[i];\n      index++;\n    }\n  }\n\n  return {\n    inputs: inputs,\n    outputs: outputs\n  };\n}\n\nmodule.exports = FeedForwardNeuralNetworks;\n","function NodeSquare(x, y, weights, som) {\n    this.x = x;\n    this.y = y;\n    this.weights = weights;\n    this.som = som;\n    this.neighbors = {};\n}\n\nNodeSquare.prototype.adjustWeights = function adjustWeights(target, learningRate, influence) {\n    for (var i = 0, ii = this.weights.length; i < ii; i++) {\n        this.weights[i] += learningRate * influence * (target[i] - this.weights[i]);\n    }\n};\n\nNodeSquare.prototype.getDistance = function getDistance(otherNode) {\n    return Math.max(Math.abs(this.x - otherNode.x), Math.abs(this.y - otherNode.y));\n};\n\nNodeSquare.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {\n    var distX = Math.abs(this.x - otherNode.x),\n        distY = Math.abs(this.y - otherNode.y);\n    return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY));\n};\n\nNodeSquare.prototype.getNeighbors = function getNeighbors(xy) {\n    if (!this.neighbors[xy]) {\n        this.neighbors[xy] = new Array(2);\n\n        // left or bottom neighbor\n        var v;\n        if (this[xy] > 0) {\n            v = this[xy] - 1;\n        } else if (this.som.torus) {\n            v = this.som.gridDim[xy] - 1\n        }\n        if (typeof v !== 'undefined') {\n            var x, y;\n            if (xy === 'x') {\n                x = v;\n                y = this.y;\n            } else {\n                x = this.x;\n                y = v;\n            }\n            this.neighbors[xy][0] = this.som.nodes[x][y];\n        }\n\n        // top or right neighbor\n        var w;\n        if (this[xy] < (this.som.gridDim[xy] - 1)) {\n            w = this[xy] + 1;\n        } else if (this.som.torus) {\n            w = 0;\n        }\n        if (typeof w !== 'undefined') {\n            if (xy === 'x') {\n                x = w;\n                y = this.y;\n            } else {\n                x = this.x;\n                y = w;\n            }\n            this.neighbors[xy][1] = this.som.nodes[x][y];\n        }\n    }\n    return this.neighbors[xy];\n};\n\nNodeSquare.prototype.getPos = function getPos(xy, element) {\n    var neighbors = this.getNeighbors(xy),\n        distance = this.som.distance,\n        bestNeighbor,\n        direction;\n    if(neighbors[0]) {\n        if (neighbors[1]) {\n            var dist1 = distance(element, neighbors[0].weights),\n                dist2 = distance(element, neighbors[1].weights);\n            if(dist1 < dist2) {\n                bestNeighbor = neighbors[0];\n                direction = -1;\n            } else {\n                bestNeighbor = neighbors[1];\n                direction = 1;\n            }\n        } else {\n            bestNeighbor = neighbors[0];\n            direction = -1;\n        }\n    } else {\n        bestNeighbor = neighbors[1];\n        direction = 1;\n    }\n    var simA = 1 - distance(element, this.weights),\n        simB = 1 - distance(element, bestNeighbor.weights);\n    var factor = ((simA - simB) / (2 - simA - simB));\n    return 0.5 + 0.5 * factor * direction;\n};\n\nNodeSquare.prototype.getPosition = function getPosition(element) {\n    return [\n        this.getPos('x', element),\n        this.getPos('y', element)\n    ];\n};\n\nmodule.exports = NodeSquare;","var NodeSquare = require('./node-square');\n\nfunction NodeHexagonal(x, y, weights, som) {\n\n    NodeSquare.call(this, x, y, weights, som);\n\n    this.hX = x - Math.floor(y / 2);\n    this.z = 0 - this.hX - y;\n\n}\n\nNodeHexagonal.prototype = new NodeSquare;\nNodeHexagonal.prototype.constructor = NodeHexagonal;\n\nNodeHexagonal.prototype.getDistance = function getDistanceHexagonal(otherNode) {\n    return Math.max(Math.abs(this.hX - otherNode.hX), Math.abs(this.y - otherNode.y), Math.abs(this.z - otherNode.z));\n};\n\nNodeHexagonal.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {\n    var distX = Math.abs(this.hX - otherNode.hX),\n        distY = Math.abs(this.y - otherNode.y),\n        distZ = Math.abs(this.z - otherNode.z);\n    return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY), Math.min(distZ, this.som.gridDim.z - distZ));\n};\n\nNodeHexagonal.prototype.getPosition = function getPosition() {\n    throw new Error('Unimplemented : cannot get position of the points for hexagonal grid');\n};\n\nmodule.exports = NodeHexagonal;","'use strict';\n\nvar NodeSquare = require('./node-square'),\n    NodeHexagonal = require('./node-hexagonal');\n\nvar defaultOptions = {\n    fields: 3,\n    randomizer: Math.random,\n    distance: squareEuclidean,\n    iterations: 10,\n    learningRate: 0.1,\n    gridType: 'rect',\n    torus: true,\n    method: 'random'\n};\n\nfunction SOM(x, y, options, reload) {\n\n    this.x = x;\n    this.y = y;\n\n    options = options || {};\n    this.options = {};\n    for (var i in defaultOptions) {\n        if (options.hasOwnProperty(i)) {\n            this.options[i] = options[i];\n        } else {\n            this.options[i] = defaultOptions[i];\n        }\n    }\n\n    if (typeof this.options.fields === 'number') {\n        this.numWeights = this.options.fields;\n    } else if (Array.isArray(this.options.fields)) {\n        this.numWeights = this.options.fields.length;\n        var converters = getConverters(this.options.fields);\n        this.extractor = converters.extractor;\n        this.creator = converters.creator;\n    } else {\n        throw new Error('Invalid fields definition');\n    }\n\n    if (this.options.gridType === 'rect') {\n        this.nodeType = NodeSquare;\n        this.gridDim = {\n            x: x,\n            y: y\n        };\n    } else {\n        this.nodeType = NodeHexagonal;\n        var hx = this.x - Math.floor(this.y / 2);\n        this.gridDim = {\n            x: hx,\n            y: this.y,\n            z: -(0 - hx - this.y)\n        };\n    }\n\n    this.torus = this.options.torus;\n    this.distanceMethod = this.torus ? 'getDistanceTorus' : 'getDistance';\n\n    this.distance = this.options.distance;\n\n    this.maxDistance = getMaxDistance(this.distance, this.numWeights);\n\n    if (reload === true) { // For model loading\n        this.done = true;\n        return;\n    }\n    if (!(x > 0 && y > 0)) {\n        throw new Error('x and y must be positive');\n    }\n\n    this.times = {\n        findBMU: 0,\n        adjust: 0\n    };\n\n    this.randomizer = this.options.randomizer;\n\n    this.iterationCount = 0;\n    this.iterations = this.options.iterations;\n\n    this.startLearningRate = this.learningRate = this.options.learningRate;\n\n    this.mapRadius = Math.floor(Math.max(x, y) / 2);\n\n    this.algorithmMethod = this.options.method;\n\n    this._initNodes();\n\n    this.done = false;\n}\n\nSOM.load = function loadModel(model, distance) {\n    if (model.name === 'SOM') {\n        var x = model.data.length,\n            y = model.data[0].length;\n        if (distance) {\n            model.options.distance = distance;\n        } else if (model.options.distance) {\n            model.options.distance = eval('(' + model.options.distance + ')');\n        }\n        var som = new SOM(x, y, model.options, true);\n        som.nodes = new Array(x);\n        for (var i = 0; i < x; i++) {\n            som.nodes[i] = new Array(y);\n            for (var j = 0; j < y; j++) {\n                som.nodes[i][j] = new som.nodeType(i, j, model.data[i][j], som);\n            }\n        }\n        return som;\n    } else {\n        throw new Error('expecting a SOM model');\n    }\n};\n\nSOM.prototype.export = function exportModel(includeDistance) {\n    if (!this.done) {\n        throw new Error('model is not ready yet');\n    }\n    var model = {\n        name: 'SOM'\n    };\n    model.options = {\n        fields: this.options.fields,\n        gridType: this.options.gridType,\n        torus: this.options.torus\n    };\n    model.data = new Array(this.x);\n    for (var i = 0; i < this.x; i++) {\n        model.data[i] = new Array(this.y);\n        for (var j = 0; j < this.y; j++) {\n            model.data[i][j] = this.nodes[i][j].weights;\n        }\n    }\n    if (includeDistance) {\n        model.options.distance = this.distance.toString();\n    }\n    return model;\n};\n\nSOM.prototype._initNodes = function initNodes() {\n    var now = Date.now(),\n        i, j, k;\n    this.nodes = new Array(this.x);\n    for (i = 0; i < this.x; i++) {\n        this.nodes[i] = new Array(this.y);\n        for (j = 0; j < this.y; j++) {\n            var weights = new Array(this.numWeights);\n            for (k = 0; k < this.numWeights; k++) {\n                weights[k] = this.randomizer();\n            }\n            this.nodes[i][j] = new this.nodeType(i, j, weights, this);\n        }\n    }\n    this.times.initNodes = Date.now() - now;\n};\n\nSOM.prototype.setTraining = function setTraining(trainingSet) {\n    if (this.trainingSet) {\n        throw new Error('training set has already been set');\n    }\n    var now = Date.now();\n    var convertedSet = trainingSet;\n    var i, l = trainingSet.length;\n    if (this.extractor) {\n        convertedSet = new Array(l);\n        for (i = 0; i < l; i++) {\n            convertedSet[i] = this.extractor(trainingSet[i]);\n        }\n    }\n    this.numIterations = this.iterations * l;\n\n    if (this.algorithmMethod === 'random') {\n        this.timeConstant = this.numIterations / Math.log(this.mapRadius);\n    } else {\n        this.timeConstant = l / Math.log(this.mapRadius);\n    }\n    this.trainingSet = convertedSet;\n    this.times.setTraining = Date.now() - now;\n};\n\nSOM.prototype.trainOne = function trainOne() {\n    if (this.done) {\n\n        return false;\n\n    } else if (this.numIterations-- > 0) {\n\n        var neighbourhoodRadius,\n            trainingValue,\n            trainingSetFactor;\n\n        if (this.algorithmMethod === 'random') { // Pick a random value of the training set at each step\n            neighbourhoodRadius = this.mapRadius * Math.exp(-this.iterationCount / this.timeConstant);\n            trainingValue = getRandomValue(this.trainingSet, this.randomizer);\n            this._adjust(trainingValue, neighbourhoodRadius);\n            this.learningRate = this.startLearningRate * Math.exp(-this.iterationCount / this.numIterations);\n        } else { // Get next input vector\n            trainingSetFactor = -Math.floor(this.iterationCount / this.trainingSet.length);\n            neighbourhoodRadius = this.mapRadius * Math.exp(trainingSetFactor / this.timeConstant);\n            trainingValue = this.trainingSet[this.iterationCount % this.trainingSet.length];\n            this._adjust(trainingValue, neighbourhoodRadius);\n            if (((this.iterationCount + 1) % this.trainingSet.length) === 0) {\n                this.learningRate = this.startLearningRate * Math.exp(trainingSetFactor / Math.floor(this.numIterations / this.trainingSet.length));\n            }\n        }\n\n        this.iterationCount++;\n\n        return true;\n\n    } else {\n\n        this.done = true;\n        return false;\n\n    }\n};\n\nSOM.prototype._adjust = function adjust(trainingValue, neighbourhoodRadius) {\n    var now = Date.now(),\n        x, y, dist, influence;\n\n    var bmu = this._findBestMatchingUnit(trainingValue);\n\n    var now2 = Date.now();\n    this.times.findBMU += now2 - now;\n\n    var radiusLimit = Math.floor(neighbourhoodRadius);\n    var xMin = bmu.x - radiusLimit,\n        xMax = bmu.x + radiusLimit,\n        yMin = bmu.y - radiusLimit,\n        yMax = bmu.y + radiusLimit;\n\n    for (x = xMin; x <= xMax; x++) {\n        var theX = x;\n        if (x < 0) {\n            theX += this.x;\n        } else if (x >= this.x) {\n            theX -= this.x;\n        }\n        for (y = yMin; y <= yMax; y++) {\n            var theY = y;\n            if (y < 0) {\n                theY += this.y;\n            } else if (y >= this.y) {\n                theY -= this.y;\n            }\n\n            dist = bmu[this.distanceMethod](this.nodes[theX][theY]);\n\n            if (dist < neighbourhoodRadius) {\n                influence = Math.exp(-dist / (2 * neighbourhoodRadius));\n                this.nodes[theX][theY].adjustWeights(trainingValue, this.learningRate, influence);\n            }\n\n        }\n    }\n\n    this.times.adjust += (Date.now() - now2);\n\n};\n\nSOM.prototype.train = function train(trainingSet) {\n    if (!this.done) {\n        this.setTraining(trainingSet);\n        while (this.trainOne()) {\n        }\n    }\n};\n\nSOM.prototype.getConvertedNodes = function getConvertedNodes() {\n    var result = new Array(this.x);\n    for (var i = 0; i < this.x; i++) {\n        result[i] = new Array(this.y);\n        for (var j = 0; j < this.y; j++) {\n            var node = this.nodes[i][j];\n            result[i][j] = this.creator ? this.creator(node.weights) : node.weights;\n        }\n    }\n    return result;\n};\n\nSOM.prototype._findBestMatchingUnit = function findBestMatchingUnit(candidate) {\n\n    var bmu,\n        lowest = Infinity,\n        dist;\n\n    for (var i = 0; i < this.x; i++) {\n        for (var j = 0; j < this.y; j++) {\n            dist = this.distance(this.nodes[i][j].weights, candidate);\n            if (dist < lowest) {\n                lowest = dist;\n                bmu = this.nodes[i][j];\n            }\n        }\n    }\n\n    return bmu;\n\n};\n\nSOM.prototype.predict = function predict(data, computePosition) {\n    if (typeof data === 'boolean') {\n        computePosition = data;\n        data = null;\n    }\n    if (!data) {\n        data = this.trainingSet;\n    }\n    if (Array.isArray(data) && (Array.isArray(data[0]) || (typeof data[0] === 'object'))) { // predict a dataset\n        var self = this;\n        return data.map(function (element) {\n            return self._predict(element, computePosition);\n        });\n    } else { // predict a single element\n        return this._predict(data, computePosition);\n    }\n};\n\nSOM.prototype._predict = function _predict(element, computePosition) {\n    if (!Array.isArray(element)) {\n        element = this.extractor(element);\n    }\n    var bmu = this._findBestMatchingUnit(element);\n    var result = [bmu.x, bmu.y];\n    if (computePosition) {\n        result[2] = bmu.getPosition(element);\n    }\n    return result;\n};\n\n// As seen in http://www.scholarpedia.org/article/Kohonen_network\nSOM.prototype.getQuantizationError = function getQuantizationError() {\n    var fit = this.getFit(),\n        l = fit.length,\n        sum = 0;\n    for (var i = 0; i < l; i++) {\n        sum += fit[i];\n    }\n    return sum / l;\n};\n\nSOM.prototype.getFit = function getFit(dataset) {\n    if (!dataset) {\n        dataset = this.trainingSet;\n    }\n    var l = dataset.length,\n        bmu,\n        result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        bmu = this._findBestMatchingUnit(dataset[i]);\n        result[i] = Math.sqrt(this.distance(dataset[i], bmu.weights));\n    }\n    return result;\n};\n\nfunction getConverters(fields) {\n    var l = fields.length,\n        normalizers = new Array(l),\n        denormalizers = new Array(l);\n    for (var i = 0; i < l; i++) {\n        normalizers[i] = getNormalizer(fields[i].range);\n        denormalizers[i] = getDenormalizer(fields[i].range);\n    }\n    return {\n        extractor: function extractor(value) {\n            var result = new Array(l);\n            for (var i = 0; i < l; i++) {\n                result[i] = normalizers[i](value[fields[i].name]);\n            }\n            return result;\n        },\n        creator: function creator(value) {\n            var result = {};\n            for (var i = 0; i < l; i++) {\n                result[fields[i].name] = denormalizers[i](value[i]);\n            }\n            return result;\n        }\n    };\n}\n\nfunction getNormalizer(minMax) {\n    return function normalizer(value) {\n        return (value - minMax[0]) / (minMax[1] - minMax[0]);\n    };\n}\n\nfunction getDenormalizer(minMax) {\n    return function denormalizer(value) {\n        return (minMax[0] + value * (minMax[1] - minMax[0]));\n    };\n}\n\nfunction squareEuclidean(a, b) {\n    var d = 0;\n    for (var i = 0, ii = a.length; i < ii; i++) {\n        d += (a[i] - b[i]) * (a[i] - b[i]);\n    }\n    return d;\n}\n\nfunction getRandomValue(arr, randomizer) {\n    return arr[Math.floor(randomizer() * arr.length)];\n}\n\nfunction getMaxDistance(distance, numWeights) {\n    var zero = new Array(numWeights),\n        one = new Array(numWeights);\n    for (var i = 0; i < numWeights; i++) {\n        zero[i] = 0;\n        one[i] = 1;\n    }\n    return distance(zero, one);\n}\n\nmodule.exports = SOM;","export default function maybeToPrecision(value, digits) {\n  if (value < 0) {\n    value = 0 - value;\n    if (typeof digits === 'number') {\n      return `- ${value.toPrecision(digits)}`;\n    } else {\n      return `- ${value.toString()}`;\n    }\n  } else {\n    if (typeof digits === 'number') {\n      return value.toPrecision(digits);\n    } else {\n      return value.toString();\n    }\n  }\n}\n","export default function checkArraySize(x, y) {\n  if (!Array.isArray(x) || !Array.isArray(y)) {\n    throw new TypeError('x and y must be arrays');\n  }\n  if (x.length !== y.length) {\n    throw new RangeError('x and y arrays must have the same length');\n  }\n}\n","export { default as maybeToPrecision } from './maybeToPrecision';\nexport { default as checkArrayLength } from './checkArrayLength';\n\nexport default class BaseRegression {\n  constructor() {\n    if (new.target === BaseRegression) {\n      throw new Error('BaseRegression must be subclassed');\n    }\n  }\n\n  predict(x) {\n    if (typeof x === 'number') {\n      return this._predict(x);\n    } else if (Array.isArray(x)) {\n      const y = [];\n      for (let i = 0; i < x.length; i++) {\n        y.push(this._predict(x[i]));\n      }\n      return y;\n    } else {\n      throw new TypeError('x must be a number or array');\n    }\n  }\n\n  _predict() {\n    throw new Error('_predict must be implemented');\n  }\n\n  train() {\n    // Do nothing for this package\n  }\n\n  toString() {\n    return '';\n  }\n\n  toLaTeX() {\n    return '';\n  }\n\n  /**\n   * Return the correlation coefficient of determination (r) and chi-square.\n   * @param {Array<number>} x\n   * @param {Array<number>} y\n   * @return {object}\n   */\n  score(x, y) {\n    if (!Array.isArray(x) || !Array.isArray(y) || x.length !== y.length) {\n      throw new Error('x and y must be arrays of the same length');\n    }\n\n    const n = x.length;\n    const y2 = new Array(n);\n    for (let i = 0; i < n; i++) {\n      y2[i] = this._predict(x[i]);\n    }\n\n    let xSum = 0;\n    let ySum = 0;\n    let chi2 = 0;\n    let rmsd = 0;\n    let xSquared = 0;\n    let ySquared = 0;\n    let xY = 0;\n    for (let i = 0; i < n; i++) {\n      xSum += y2[i];\n      ySum += y[i];\n      xSquared += y2[i] * y2[i];\n      ySquared += y[i] * y[i];\n      xY += y2[i] * y[i];\n      if (y[i] !== 0) {\n        chi2 += ((y[i] - y2[i]) * (y[i] - y2[i])) / y[i];\n      }\n      rmsd += (y[i] - y2[i]) * (y[i] - y2[i]);\n    }\n\n    const r =\n      (n * xY - xSum * ySum) /\n      Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));\n\n    return {\n      r: r,\n      r2: r * r,\n      chi2: chi2,\n      rmsd: Math.sqrt(rmsd / n)\n    };\n  }\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport { Matrix, MatrixTransposeView, solve } from 'ml-matrix';\n\nexport default class PolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y, degree);\n    }\n  }\n\n  _predict(x) {\n    let y = 0;\n    for (let k = 0; k < this.powers.length; k++) {\n      y += this.coefficients[k] * Math.pow(x, this.powers[k]);\n    }\n    return y;\n  }\n\n  toJSON() {\n    return {\n      name: 'polynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients\n    };\n  }\n\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n\n    let fn = '';\n    let str = '';\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str =\n              `${maybeToPrecision(this.coefficients[k], precision) + times}x`;\n          } else {\n            str =\n              `${maybeToPrecision(this.coefficients[k], precision) +\n              times\n              }x${\n                sup\n              }${this.powers[k]\n              }${closeSup}`;\n          }\n        }\n\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n      fn = str + fn;\n    }\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n\n    return `f(x) = ${fn}`;\n  }\n\n  static load(json) {\n    if (json.name !== 'polynomialRegression') {\n      throw new TypeError('not a polynomial regression model');\n    }\n    return new PolynomialRegression(true, json);\n  }\n}\n\nfunction regress(pr, x, y, degree) {\n  const n = x.length;\n  let powers;\n  if (Array.isArray(degree)) {\n    powers = degree;\n    degree = powers.length;\n  } else {\n    degree++;\n    powers = new Array(degree);\n    for (let k = 0; k < degree; k++) {\n      powers[k] = k;\n    }\n  }\n  const F = new Matrix(n, degree);\n  const Y = new Matrix([y]);\n  for (let k = 0; k < degree; k++) {\n    for (let i = 0; i < n; i++) {\n      if (powers[k] === 0) {\n        F.set(i, k, 1);\n      } else {\n        F.set(i, k, Math.pow(x[i], powers[k]));\n      }\n    }\n  }\n\n  const FT = new MatrixTransposeView(F);\n  const A = FT.mmul(F);\n  const B = FT.mmul(new MatrixTransposeView(Y));\n\n  pr.degree = degree - 1;\n  pr.powers = powers;\n  pr.coefficients = solve(A, B).to1DArray();\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\n\nexport default class SimpleLinearRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = [y.intercept, y.slope];\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'simpleLinearRegression',\n      slope: this.slope,\n      intercept: this.intercept\n    };\n  }\n\n  _predict(x) {\n    return this.slope * x + this.intercept;\n  }\n\n  computeX(y) {\n    return (y - this.intercept) / this.slope;\n  }\n\n  toString(precision) {\n    let result = 'f(x) = ';\n    if (this.slope !== 0) {\n      const xFactor = maybeToPrecision(this.slope, precision);\n      result += `${xFactor === '1' ? '' : `${xFactor} * `}x`;\n      if (this.intercept !== 0) {\n        const absIntercept = Math.abs(this.intercept);\n        const operator = absIntercept === this.intercept ? '+' : '-';\n        result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n\n  static load(json) {\n    if (json.name !== 'simpleLinearRegression') {\n      throw new TypeError('not a SLR model');\n    }\n    return new SimpleLinearRegression(true, json);\n  }\n}\n\nfunction regress(slr, x, y) {\n  const n = x.length;\n  let xSum = 0;\n  let ySum = 0;\n\n  let xSquared = 0;\n  let xY = 0;\n\n  for (let i = 0; i < n; i++) {\n    xSum += x[i];\n    ySum += y[i];\n    xSquared += x[i] * x[i];\n    xY += x[i] * y[i];\n  }\n\n  const numerator = n * xY - xSum * ySum;\n  slr.slope = numerator / (n * xSquared - xSum * xSum);\n  slr.intercept = (1 / n) * ySum - slr.slope * (1 / n) * xSum;\n  slr.coefficients = [slr.intercept, slr.slope];\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\n\nexport default class ExponentialRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(input) {\n    return this.B * Math.exp(input * this.A);\n  }\n\n  toJSON() {\n    return {\n      name: 'exponentialRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n\n  toString(precision) {\n    return (\n      `f(x) = ${\n        maybeToPrecision(this.B, precision)\n      } * e^(${\n        maybeToPrecision(this.A, precision)\n      } * x)`\n    );\n  }\n\n  toLaTeX(precision) {\n    if (this.A >= 0) {\n      return (\n        `f(x) = ${\n          maybeToPrecision(this.B, precision)\n        }e^{${\n          maybeToPrecision(this.A, precision)\n        }x}`\n      );\n    } else {\n      return (\n        `f(x) = \\\\frac{${\n          maybeToPrecision(this.B, precision)\n        }}{e^{${\n          maybeToPrecision(-this.A, precision)\n        }x}}`\n      );\n    }\n  }\n\n  static load(json) {\n    if (json.name !== 'exponentialRegression') {\n      throw new TypeError('not a exponential regression model');\n    }\n    return new ExponentialRegression(true, json);\n  }\n}\n\nfunction regress(er, x, y) {\n  const n = x.length;\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(x, yl);\n  er.A = linear.slope;\n  er.B = Math.exp(linear.intercept);\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\n\nexport default class PowerRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // reloading model\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(newInputs) {\n    return this.A * Math.pow(newInputs, this.B);\n  }\n\n  toJSON() {\n    return {\n      name: 'powerRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(\n      this.A,\n      precision\n    )} * x^${maybeToPrecision(this.B, precision)}`;\n  }\n\n  toLaTeX(precision) {\n    let latex = '';\n    if (this.B >= 0) {\n      latex = `f(x) = ${maybeToPrecision(\n        this.A,\n        precision\n      )}x^{${maybeToPrecision(this.B, precision)}}`;\n    } else {\n      latex = `f(x) = \\\\frac{${maybeToPrecision(\n        this.A,\n        precision\n      )}}{x^{${maybeToPrecision(-this.B, precision)}}}`;\n    }\n    latex = latex.replace(/e([+-]?[0-9]+)/g, 'e^{$1}');\n    return latex;\n  }\n\n  static load(json) {\n    if (json.name !== 'powerRegression') {\n      throw new TypeError('not a power regression model');\n    }\n    return new PowerRegression(true, json);\n  }\n}\n\nfunction regress(pr, x, y) {\n  const n = x.length;\n  const xl = new Array(n);\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    xl[i] = Math.log(x[i]);\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(xl, yl);\n  pr.A = Math.exp(linear.intercept);\n  pr.B = linear.slope;\n}\n","import Matrix, { SVD, pseudoInverse } from 'ml-matrix';\n\nexport default class MultivariateLinearRegression {\n  constructor(x, y, options = {}) {\n    const { intercept = true, statistics = true } = options;\n    this.statistics = statistics;\n    if (x === true) {\n      this.weights = y.weights;\n      this.inputs = y.inputs;\n      this.outputs = y.outputs;\n      this.intercept = y.intercept;\n    } else {\n      x = new Matrix(x);\n      y = new Matrix(y);\n      if (intercept) {\n        x.addColumn(new Array(x.rows).fill(1));\n      }\n      let xt = x.transpose();\n      const xx = xt\n        .mmul(x);\n      const xy = xt\n        .mmul(y);\n      const invxx = new SVD(xx)\n        .inverse();\n      const beta = xy\n        .transpose()\n        .mmul(invxx)\n        .transpose();\n      this.weights = beta.to2DArray();\n      this.inputs = x.columns;\n      this.outputs = y.columns;\n      if (intercept) this.inputs--;\n      this.intercept = intercept;\n      if (statistics) {\n        /*\n         * Let's add some basic statistics about the beta's to be able to interpret them.\n         * source: http://dept.stat.lsa.umich.edu/~kshedden/Courses/Stat401/Notes/401-multreg.pdf\n         * validated against Excel Regression AddIn\n         * test: \"datamining statistics test\"\n         */\n        const fittedValues = x.mmul(beta);\n        const residuals = y.clone().addM(fittedValues.neg());\n        const variance =\n          residuals\n            .to2DArray()\n            .map((ri) => Math.pow(ri[0], 2))\n            .reduce((a, b) => a + b) /\n          (y.rows - x.columns);\n        this.stdError = Math.sqrt(variance);\n        this.stdErrorMatrix = pseudoInverse(xx).mul(variance);\n        this.stdErrors = this.stdErrorMatrix\n          .diagonal()\n          .map((d) => Math.sqrt(d));\n        this.tStats = this.weights.map((d, i) =>\n          (this.stdErrors[i] === 0 ? 0 : d[0] / this.stdErrors[i])\n        );\n      }\n    }\n  }\n\n  predict(x) {\n    if (Array.isArray(x)) {\n      if (typeof x[0] === 'number') {\n        return this._predict(x);\n      } else if (Array.isArray(x[0])) {\n        const y = new Array(x.length);\n        for (let i = 0; i < x.length; i++) {\n          y[i] = this._predict(x[i]);\n        }\n        return y;\n      }\n    } else if (Matrix.isMatrix(x)) {\n      const y = new Matrix(x.rows, this.outputs);\n      for (let i = 0; i < x.rows; i++) {\n        y.setRow(i, this._predict(x.getRow(i)));\n      }\n      return y;\n    }\n    throw new TypeError('x must be a matrix or array of numbers');\n  }\n\n  _predict(x) {\n    const result = new Array(this.outputs);\n    if (this.intercept) {\n      for (let i = 0; i < this.outputs; i++) {\n        result[i] = this.weights[this.inputs][i];\n      }\n    } else {\n      result.fill(0);\n    }\n    for (let i = 0; i < this.inputs; i++) {\n      for (let j = 0; j < this.outputs; j++) {\n        result[j] += this.weights[i][j] * x[i];\n      }\n    }\n    return result;\n  }\n\n  score() {\n    throw new Error('score method is not implemented yet');\n  }\n\n  toJSON() {\n    return {\n      name: 'multivariateLinearRegression',\n      weights: this.weights,\n      inputs: this.inputs,\n      outputs: this.outputs,\n      intercept: this.intercept,\n      summary: this.statistics\n        ? {\n          regressionStatistics: {\n            standardError: this.stdError,\n            observations: this.outputs\n          },\n          variables: this.weights.map((d, i) => {\n            return {\n              label:\n                  i === this.weights.length - 1\n                    ? 'Intercept'\n                    : `X Variable ${i + 1}`,\n              coefficients: d,\n              standardError: this.stdErrors[i],\n              tStat: this.tStats[i]\n            };\n          })\n        }\n        : undefined\n    };\n  }\n\n  static load(model) {\n    if (model.name !== 'multivariateLinearRegression') {\n      throw new Error('not a MLR model');\n    }\n    return new MultivariateLinearRegression(true, model);\n  }\n}\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass GaussianKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n    this.divisor = 2 * options.sigma * options.sigma;\n  }\n  compute(x, y) {\n    const distance = squaredEuclidean(x, y);\n    return Math.exp(-distance / this.divisor);\n  }\n}\n\nmodule.exports = GaussianKernel;\n","'use strict';\n\nconst defaultOptions = {\n  degree: 1,\n  constant: 1,\n  scale: 1\n};\n\nclass PolynomialKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n\n    this.degree = options.degree;\n    this.constant = options.constant;\n    this.scale = options.scale;\n  }\n\n  compute(x, y) {\n    var sum = 0;\n    for (var i = 0; i < x.length; i++) {\n      sum += x[i] * y[i];\n    }\n    return Math.pow(this.scale * sum + this.constant, this.degree);\n  }\n}\n\nmodule.exports = PolynomialKernel;\n","'use strict';\n\nconst defaultOptions = {\n  alpha: 0.01,\n  constant: -Math.E\n};\n\nclass SigmoidKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.alpha = options.alpha;\n    this.constant = options.constant;\n  }\n\n  compute(x, y) {\n    var sum = 0;\n    for (var i = 0; i < x.length; i++) {\n      sum += x[i] * y[i];\n    }\n    return Math.tanh(this.alpha * sum + this.constant);\n  }\n}\n\nmodule.exports = SigmoidKernel;\n","'use strict';\n\nconst defaultOptions = {\n  sigma: 1,\n  degree: 1\n};\n\nclass ANOVAKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n    this.degree = options.degree;\n  }\n\n  compute(x, y) {\n    var sum = 0;\n    var len = Math.min(x.length, y.length);\n    for (var i = 1; i <= len; ++i) {\n      sum += Math.pow(\n        Math.exp(\n          -this.sigma *\n            Math.pow(Math.pow(x[i - 1], i) - Math.pow(y[i - 1], i), 2)\n        ),\n        this.degree\n      );\n    }\n    return sum;\n  }\n}\n\nmodule.exports = ANOVAKernel;\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass CauchyKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n  }\n\n  compute(x, y) {\n    return 1 / (1 + squaredEuclidean(x, y) / (this.sigma * this.sigma));\n  }\n}\n\nmodule.exports = CauchyKernel;\n","'use strict';\n\nconst { euclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass ExponentialKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n    this.divisor = 2 * options.sigma * options.sigma;\n  }\n\n  compute(x, y) {\n    const distance = euclidean(x, y);\n    return Math.exp(-distance / this.divisor);\n  }\n}\n\nmodule.exports = ExponentialKernel;\n","'use strict';\n\nclass HistogramIntersectionKernel {\n  compute(x, y) {\n    var min = Math.min(x.length, y.length);\n    var sum = 0;\n    for (var i = 0; i < min; ++i) {\n      sum += Math.min(x[i], y[i]);\n    }\n\n    return sum;\n  }\n}\n\nmodule.exports = HistogramIntersectionKernel;\n","'use strict';\n\nconst { euclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass LaplacianKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n  }\n\n  compute(x, y) {\n    const distance = euclidean(x, y);\n    return Math.exp(-distance / this.sigma);\n  }\n}\n\nmodule.exports = LaplacianKernel;\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  constant: 1\n};\n\nclass MultiquadraticKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.constant = options.constant;\n  }\n\n  compute(x, y) {\n    return Math.sqrt(squaredEuclidean(x, y) + this.constant * this.constant);\n  }\n}\n\nmodule.exports = MultiquadraticKernel;\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  constant: 1\n};\n\nclass RationalQuadraticKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.constant = options.constant;\n  }\n\n  compute(x, y) {\n    const distance = squaredEuclidean(x, y);\n    return 1 - distance / (distance + this.constant);\n  }\n}\n\nmodule.exports = RationalQuadraticKernel;\n","'use strict';\n\nconst { Matrix, MatrixTransposeView } = require('ml-matrix');\nconst GaussianKernel = require('ml-kernel-gaussian');\nconst PolynomialKernel = require('ml-kernel-polynomial');\nconst SigmoidKernel = require('ml-kernel-sigmoid');\n\nconst ANOVAKernel = require('./kernels/anova-kernel');\nconst CauchyKernel = require('./kernels/cauchy-kernel');\nconst ExponentialKernel = require('./kernels/exponential-kernel');\nconst HistogramKernel = require('./kernels/histogram-intersection-kernel');\nconst LaplacianKernel = require('./kernels/laplacian-kernel');\nconst MultiquadraticKernel = require('./kernels/multiquadratic-kernel');\nconst RationalKernel = require('./kernels/rational-quadratic-kernel');\n\nconst kernelType = {\n  gaussian: GaussianKernel,\n  rbf: GaussianKernel,\n  polynomial: PolynomialKernel,\n  poly: PolynomialKernel,\n  anova: ANOVAKernel,\n  cauchy: CauchyKernel,\n  exponential: ExponentialKernel,\n  histogram: HistogramKernel,\n  min: HistogramKernel,\n  laplacian: LaplacianKernel,\n  multiquadratic: MultiquadraticKernel,\n  rational: RationalKernel,\n  sigmoid: SigmoidKernel,\n  mlp: SigmoidKernel\n};\n\nclass Kernel {\n  constructor(type, options) {\n    this.kernelType = type;\n    if (type === 'linear') return;\n\n    if (typeof type === 'string') {\n      type = type.toLowerCase();\n\n      var KernelConstructor = kernelType[type];\n      if (KernelConstructor) {\n        this.kernelFunction = new KernelConstructor(options);\n      } else {\n        throw new Error(`unsupported kernel type: ${type}`);\n      }\n    } else if (typeof type === 'object' && typeof type.compute === 'function') {\n      this.kernelFunction = type;\n    } else {\n      throw new TypeError(\n        'first argument must be a valid kernel type or instance'\n      );\n    }\n  }\n\n  compute(inputs, landmarks) {\n    inputs = Matrix.checkMatrix(inputs);\n    if (landmarks === undefined) {\n      landmarks = inputs;\n    } else {\n      landmarks = Matrix.checkMatrix(landmarks);\n    }\n    if (this.kernelType === 'linear') {\n      return inputs.mmul(new MatrixTransposeView(landmarks));\n    }\n\n    const kernelMatrix = new Matrix(inputs.rows, landmarks.rows);\n    if (inputs === landmarks) {\n      // fast path, matrix is symmetric\n      for (let i = 0; i < inputs.rows; i++) {\n        for (let j = i; j < inputs.rows; j++) {\n          const value = this.kernelFunction.compute(\n            inputs.getRow(i),\n            inputs.getRow(j)\n          );\n          kernelMatrix.set(i, j, value);\n          kernelMatrix.set(j, i, value);\n        }\n      }\n    } else {\n      for (let i = 0; i < inputs.rows; i++) {\n        for (let j = 0; j < landmarks.rows; j++) {\n          kernelMatrix.set(\n            i,\n            j,\n            this.kernelFunction.compute(inputs.getRow(i), landmarks.getRow(j))\n          );\n        }\n      }\n    }\n    return kernelMatrix;\n  }\n}\n\nmodule.exports = Kernel;\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport median from 'ml-array-median';\n\nexport default class TheilSenRegression extends BaseRegression {\n  /**\n   * Theil–Sen estimator\n   * https://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator\n   * @param {Array<number>|boolean} x\n   * @param {Array<number>|object} y\n   * @constructor\n   */\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // loads the model\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = y.coefficients;\n    } else {\n      // creates the model\n      checkArrayLength(x, y);\n      theilSen(this, x, y);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'TheilSenRegression',\n      slope: this.slope,\n      intercept: this.intercept\n    };\n  }\n\n  _predict(input) {\n    return this.slope * input + this.intercept;\n  }\n\n  computeX(input) {\n    return (input - this.intercept) / this.slope;\n  }\n\n  toString(precision) {\n    var result = 'f(x) = ';\n    if (this.slope) {\n      var xFactor = maybeToPrecision(this.slope, precision);\n      result += `${Math.abs(xFactor - 1) < 1e-5 ? '' : `${xFactor} * `}x`;\n      if (this.intercept) {\n        var absIntercept = Math.abs(this.intercept);\n        var operator = absIntercept === this.intercept ? '+' : '-';\n        result +=\n          ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n\n  static load(json) {\n    if (json.name !== 'TheilSenRegression') {\n      throw new TypeError('not a Theil-Sen model');\n    }\n    return new TheilSenRegression(true, json);\n  }\n}\n\nfunction theilSen(regression, x, y) {\n  let len = x.length;\n  let slopes = new Array(len * len);\n  let count = 0;\n  for (let i = 0; i < len; ++i) {\n    for (let j = i + 1; j < len; ++j) {\n      if (x[i] !== x[j]) {\n        slopes[count++] = (y[j] - y[i]) / (x[j] - x[i]);\n      }\n    }\n  }\n  slopes.length = count;\n  let medianSlope = median(slopes);\n\n  let cuts = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    cuts[i] = y[i] - medianSlope * x[i];\n  }\n\n  regression.slope = medianSlope;\n  regression.intercept = median(cuts);\n  regression.coefficients = [regression.intercept, regression.slope];\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport { solve } from 'ml-matrix';\n\n/**\n * @class RobustPolynomialRegression\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree - polynomial degree\n */\nexport default class RobustPolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      robustPolynomial(this, x, y, degree);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'robustPolynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients\n    };\n  }\n\n  _predict(x) {\n    return predict(x, this.powers, this.coefficients);\n  }\n\n  /**\n   * Display the formula\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n\n  /**\n   * Display the formula in LaTeX format\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n\n    let fn = '';\n    let str = '';\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x`;\n          } else {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x${sup}${this.powers[k]}${closeSup}`;\n          }\n        }\n\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n      fn = str + fn;\n    }\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n\n    return `f(x) = ${fn}`;\n  }\n\n  static load(json) {\n    if (json.name !== 'robustPolynomialRegression') {\n      throw new TypeError('not a RobustPolynomialRegression model');\n    }\n    return new RobustPolynomialRegression(true, json);\n  }\n}\n\nfunction robustPolynomial(regression, x, y, degree) {\n  let powers = Array(degree)\n    .fill(0)\n    .map((_, index) => index);\n\n  const tuples = getRandomTuples(x, y, degree);\n\n  var min;\n  for (var i = 0; i < tuples.length; i++) {\n    var tuple = tuples[i];\n    var coefficients = calcCoefficients(tuple, powers);\n\n    var residuals = x.slice();\n    for (var j = 0; j < x.length; j++) {\n      residuals[j] = y[j] - predict(x[j], powers, coefficients);\n      residuals[j] = {\n        residual: residuals[j] * residuals[j],\n        coefficients\n      };\n    }\n\n    var median = residualsMedian(residuals);\n    if (!min || median.residual < min.residual) {\n      min = median;\n    }\n  }\n\n  regression.degree = degree;\n  regression.powers = powers;\n  regression.coefficients = min.coefficients;\n}\n\n/**\n * @ignore\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree\n * @return {Array<{x:number,y:number}>}\n */\nfunction getRandomTuples(x, y, degree) {\n  var len = Math.floor(x.length / degree);\n  var tuples = new Array(len);\n\n  for (var i = 0; i < x.length; i++) {\n    var pos = Math.floor(Math.random() * len);\n\n    var counter = 0;\n    while (counter < x.length) {\n      if (!tuples[pos]) {\n        tuples[pos] = [\n          {\n            x: x[i],\n            y: y[i]\n          }\n        ];\n        break;\n      } else if (tuples[pos].length < degree) {\n        tuples[pos].push({\n          x: x[i],\n          y: y[i]\n        });\n        break;\n      } else {\n        counter++;\n        pos = (pos + 1) % len;\n      }\n    }\n\n    if (counter === x.length) {\n      return tuples;\n    }\n  }\n  return tuples;\n}\n\n/**\n * @ignore\n * @param {{x:number,y:number}} tuple\n * @param {Array<number>} powers\n * @return {Array<number>}\n */\nfunction calcCoefficients(tuple, powers) {\n  var X = tuple.slice();\n  var Y = tuple.slice();\n  for (var i = 0; i < X.length; i++) {\n    Y[i] = [tuple[i].y];\n    X[i] = new Array(powers.length);\n    for (var j = 0; j < powers.length; j++) {\n      X[i][j] = Math.pow(tuple[i].x, powers[j]);\n    }\n  }\n\n  return solve(X, Y).to1DArray();\n}\n\nfunction predict(x, powers, coefficients) {\n  let y = 0;\n  for (let k = 0; k < powers.length; k++) {\n    y += coefficients[k] * Math.pow(x, powers[k]);\n  }\n  return y;\n}\n\nfunction residualsMedian(residuals) {\n  residuals.sort((a, b) => a.residual - b.residual);\n\n  var l = residuals.length;\n  var half = Math.floor(l / 2);\n  return l % 2 === 0 ? residuals[half - 1] : residuals[half];\n}\n","/**\n * Calculate current error\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} parameters - Array of current parameter values\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {number}\n */\nexport default function errorCalculation(\n  data,\n  parameters,\n  parameterizedFunction\n) {\n  var error = 0;\n  const func = parameterizedFunction(parameters);\n\n  for (var i = 0; i < data.x.length; i++) {\n    error += Math.abs(data.y[i] - func(data.x[i]));\n  }\n\n  return error;\n}\n","import { inverse, Matrix } from 'ml-matrix';\n\n/**\n * Difference of the matrix function over the parameters\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} evaluatedData - Array of previous evaluated function values\n * @param {Array<number>} params - Array of previous parameter values\n * @param {number} gradientDifference - Adjustment for decrease the damping parameter\n * @param {function} paramFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {Matrix}\n */\nfunction gradientFunction(\n  data,\n  evaluatedData,\n  params,\n  gradientDifference,\n  paramFunction\n) {\n  const n = params.length;\n  const m = data.x.length;\n\n  var ans = new Array(n);\n\n  for (var param = 0; param < n; param++) {\n    ans[param] = new Array(m);\n    var auxParams = params.concat();\n    auxParams[param] += gradientDifference;\n    var funcParam = paramFunction(auxParams);\n\n    for (var point = 0; point < m; point++) {\n      ans[param][point] = evaluatedData[point] - funcParam(data.x[point]);\n    }\n  }\n  return new Matrix(ans);\n}\n\n/**\n * Matrix function over the samples\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} evaluatedData - Array of previous evaluated function values\n * @return {Matrix}\n */\nfunction matrixFunction(data, evaluatedData) {\n  const m = data.x.length;\n\n  var ans = new Array(m);\n\n  for (var point = 0; point < m; point++) {\n    ans[point] = [data.y[point] - evaluatedData[point]];\n  }\n\n  return new Matrix(ans);\n}\n\n/**\n * Iteration for Levenberg-Marquardt\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} params - Array of previous parameter values\n * @param {number} damping - Levenberg-Marquardt parameter\n * @param {number} gradientDifference - Adjustment for decrease the damping parameter\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {Array<number>}\n */\nexport default function step(\n  data,\n  params,\n  damping,\n  gradientDifference,\n  parameterizedFunction\n) {\n  var value = damping * gradientDifference * gradientDifference;\n  var identity = Matrix.eye(params.length, params.length, value);\n\n  const func = parameterizedFunction(params);\n  var evaluatedData = data.x.map((e) => func(e));\n\n  var gradientFunc = gradientFunction(\n    data,\n    evaluatedData,\n    params,\n    gradientDifference,\n    parameterizedFunction\n  );\n  var matrixFunc = matrixFunction(data, evaluatedData);\n  var inverseMatrix = inverse(\n    identity.add(gradientFunc.mmul(gradientFunc.transpose()))\n  );\n\n  params = new Matrix([params]);\n  params = params.sub(\n    inverseMatrix\n      .mmul(gradientFunc)\n      .mmul(matrixFunc)\n      .mul(gradientDifference)\n      .transpose()\n  );\n\n  return params.to1DArray();\n}\n","import errorCalculation from './errorCalculation';\nimport step from './step';\n\n/**\n * Curve fitting algorithm\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @param {object} [options] - Options object\n * @param {number} [options.damping] - Levenberg-Marquardt parameter\n * @param {number} [options.gradientDifference = 10e-2] - Adjustment for decrease the damping parameter\n * @param {Array<number>} [options.minValues] - Minimum allowed values for parameters\n * @param {Array<number>} [options.maxValues] - Maximum allowed values for parameters\n * @param {Array<number>} [options.initialValues] - Array of initial parameter values\n * @param {number} [options.maxIterations = 100] - Maximum of allowed iterations\n * @param {number} [options.errorTolerance = 10e-3] - Minimum uncertainty allowed for each point\n * @return {{parameterValues: Array<number>, parameterError: number, iterations: number}}\n */\nexport default function levenbergMarquardt(\n  data,\n  parameterizedFunction,\n  options = {}\n) {\n  let {\n    maxIterations = 100,\n    gradientDifference = 10e-2,\n    damping = 0,\n    errorTolerance = 10e-3,\n    minValues,\n    maxValues,\n    initialValues\n  } = options;\n\n  if (damping <= 0) {\n    throw new Error('The damping option must be a positive number');\n  } else if (!data.x || !data.y) {\n    throw new Error('The data parameter must have x and y elements');\n  } else if (\n    !Array.isArray(data.x) ||\n    data.x.length < 2 ||\n    !Array.isArray(data.y) ||\n    data.y.length < 2\n  ) {\n    throw new Error(\n      'The data parameter elements must be an array with more than 2 points'\n    );\n  } else if (data.x.length !== data.y.length) {\n    throw new Error('The data parameter elements must have the same size');\n  }\n\n  var parameters =\n    initialValues || new Array(parameterizedFunction.length).fill(1);\n  let parLen = parameters.length;\n  maxValues = maxValues || new Array(parLen).fill(Number.MAX_SAFE_INTEGER);\n  minValues = minValues || new Array(parLen).fill(Number.MIN_SAFE_INTEGER);\n\n  if (maxValues.length !== minValues.length) {\n    throw new Error('minValues and maxValues must be the same size');\n  }\n\n  if (!Array.isArray(parameters)) {\n    throw new Error('initialValues must be an array');\n  }\n\n  var error = errorCalculation(data, parameters, parameterizedFunction);\n\n  var converged = error <= errorTolerance;\n\n  for (\n    var iteration = 0;\n    iteration < maxIterations && !converged;\n    iteration++\n  ) {\n    parameters = step(\n      data,\n      parameters,\n      damping,\n      gradientDifference,\n      parameterizedFunction\n    );\n\n    for (let k = 0; k < parLen; k++) {\n      parameters[k] = Math.min(\n        Math.max(minValues[k], parameters[k]),\n        maxValues[k]\n      );\n    }\n\n    error = errorCalculation(data, parameters, parameterizedFunction);\n    if (isNaN(error)) break;\n    converged = error <= errorTolerance;\n  }\n\n  return {\n    parameterValues: parameters,\n    parameterError: error,\n    iterations: iteration\n  };\n}\n","module.exports = function(haystack, needle, comparator, low, high) {\n  var mid, cmp;\n\n  if(low === undefined)\n    low = 0;\n\n  else {\n    low = low|0;\n    if(low < 0 || low >= haystack.length)\n      throw new RangeError(\"invalid lower bound\");\n  }\n\n  if(high === undefined)\n    high = haystack.length - 1;\n\n  else {\n    high = high|0;\n    if(high < low || high >= haystack.length)\n      throw new RangeError(\"invalid upper bound\");\n  }\n\n  while(low <= high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + (high - low >> 1);\n    cmp = +comparator(haystack[mid], needle, mid, haystack);\n\n    /* Too low. */\n    if(cmp < 0.0)\n      low  = mid + 1;\n\n    /* Too high. */\n    else if(cmp > 0.0)\n      high = mid - 1;\n\n    /* Key found. */\n    else\n      return mid;\n  }\n\n  /* Key not found. */\n  return ~low;\n}\n","'use strict';\n\nfunction assertNumber(number) {\n\tif (typeof number !== 'number' || Number.isNaN(number)) {\n\t\tthrow new TypeError('Expected a number');\n\t}\n}\n\nexports.ascending = (left, right) => {\n\tassertNumber(left);\n\tassertNumber(right);\n\treturn left - right;\n};\n\nexports.descending = (left, right) => {\n\tassertNumber(left);\n\tassertNumber(right);\n\treturn right - left;\n};\n","import binarySearch from 'binary-search';\nimport { ascending } from 'num-sort';\n\nexport const largestPrime = 0x7fffffff;\n\nconst primeNumbers = [\n  // chunk #0\n  largestPrime, // 2^31-1\n\n  // chunk #1\n  5,\n  11,\n  23,\n  47,\n  97,\n  197,\n  397,\n  797,\n  1597,\n  3203,\n  6421,\n  12853,\n  25717,\n  51437,\n  102877,\n  205759,\n  411527,\n  823117,\n  1646237,\n  3292489,\n  6584983,\n  13169977,\n  26339969,\n  52679969,\n  105359939,\n  210719881,\n  421439783,\n  842879579,\n  1685759167,\n\n  // chunk #2\n  433,\n  877,\n  1759,\n  3527,\n  7057,\n  14143,\n  28289,\n  56591,\n  113189,\n  226379,\n  452759,\n  905551,\n  1811107,\n  3622219,\n  7244441,\n  14488931,\n  28977863,\n  57955739,\n  115911563,\n  231823147,\n  463646329,\n  927292699,\n  1854585413,\n\n  // chunk #3\n  953,\n  1907,\n  3821,\n  7643,\n  15287,\n  30577,\n  61169,\n  122347,\n  244703,\n  489407,\n  978821,\n  1957651,\n  3915341,\n  7830701,\n  15661423,\n  31322867,\n  62645741,\n  125291483,\n  250582987,\n  501165979,\n  1002331963,\n  2004663929,\n\n  // chunk #4\n  1039,\n  2081,\n  4177,\n  8363,\n  16729,\n  33461,\n  66923,\n  133853,\n  267713,\n  535481,\n  1070981,\n  2141977,\n  4283963,\n  8567929,\n  17135863,\n  34271747,\n  68543509,\n  137087021,\n  274174111,\n  548348231,\n  1096696463,\n\n  // chunk #5\n  31,\n  67,\n  137,\n  277,\n  557,\n  1117,\n  2237,\n  4481,\n  8963,\n  17929,\n  35863,\n  71741,\n  143483,\n  286973,\n  573953,\n  1147921,\n  2295859,\n  4591721,\n  9183457,\n  18366923,\n  36733847,\n  73467739,\n  146935499,\n  293871013,\n  587742049,\n  1175484103,\n\n  // chunk #6\n  599,\n  1201,\n  2411,\n  4831,\n  9677,\n  19373,\n  38747,\n  77509,\n  155027,\n  310081,\n  620171,\n  1240361,\n  2480729,\n  4961459,\n  9922933,\n  19845871,\n  39691759,\n  79383533,\n  158767069,\n  317534141,\n  635068283,\n  1270136683,\n\n  // chunk #7\n  311,\n  631,\n  1277,\n  2557,\n  5119,\n  10243,\n  20507,\n  41017,\n  82037,\n  164089,\n  328213,\n  656429,\n  1312867,\n  2625761,\n  5251529,\n  10503061,\n  21006137,\n  42012281,\n  84024581,\n  168049163,\n  336098327,\n  672196673,\n  1344393353,\n\n  // chunk #8\n  3,\n  7,\n  17,\n  37,\n  79,\n  163,\n  331,\n  673,\n  1361,\n  2729,\n  5471,\n  10949,\n  21911,\n  43853,\n  87719,\n  175447,\n  350899,\n  701819,\n  1403641,\n  2807303,\n  5614657,\n  11229331,\n  22458671,\n  44917381,\n  89834777,\n  179669557,\n  359339171,\n  718678369,\n  1437356741,\n\n  // chunk #9\n  43,\n  89,\n  179,\n  359,\n  719,\n  1439,\n  2879,\n  5779,\n  11579,\n  23159,\n  46327,\n  92657,\n  185323,\n  370661,\n  741337,\n  1482707,\n  2965421,\n  5930887,\n  11861791,\n  23723597,\n  47447201,\n  94894427,\n  189788857,\n  379577741,\n  759155483,\n  1518310967,\n\n  // chunk #10\n  379,\n  761,\n  1523,\n  3049,\n  6101,\n  12203,\n  24407,\n  48817,\n  97649,\n  195311,\n  390647,\n  781301,\n  1562611,\n  3125257,\n  6250537,\n  12501169,\n  25002389,\n  50004791,\n  100009607,\n  200019221,\n  400038451,\n  800076929,\n  1600153859,\n\n  // chunk #11\n  13,\n  29,\n  59,\n  127,\n  257,\n  521,\n  1049,\n  2099,\n  4201,\n  8419,\n  16843,\n  33703,\n  67409,\n  134837,\n  269683,\n  539389,\n  1078787,\n  2157587,\n  4315183,\n  8630387,\n  17260781,\n  34521589,\n  69043189,\n  138086407,\n  276172823,\n  552345671,\n  1104691373,\n\n  // chunk #12\n  19,\n  41,\n  83,\n  167,\n  337,\n  677,\n  1361,\n  2729,\n  5471,\n  10949,\n  21911,\n  43853,\n  87719,\n  175447,\n  350899,\n  701819,\n  1403641,\n  2807303,\n  5614657,\n  11229331,\n  22458671,\n  44917381,\n  89834777,\n  179669557,\n  359339171,\n  718678369,\n  1437356741,\n\n  // chunk #13\n  53,\n  107,\n  223,\n  449,\n  907,\n  1823,\n  3659,\n  7321,\n  14653,\n  29311,\n  58631,\n  117269,\n  234539,\n  469099,\n  938207,\n  1876417,\n  3752839,\n  7505681,\n  15011389,\n  30022781,\n  60045577,\n  120091177,\n  240182359,\n  480364727,\n  960729461,\n  1921458943\n];\n\nprimeNumbers.sort(ascending);\n\nexport function nextPrime(value) {\n  let index = binarySearch(primeNumbers, value, ascending);\n  if (index < 0) {\n    index = ~index;\n  }\n  return primeNumbers[index];\n}\n","import { largestPrime, nextPrime } from './primeFinder';\n\nconst FREE = 0;\nconst FULL = 1;\nconst REMOVED = 2;\n\nconst defaultInitialCapacity = 150;\nconst defaultMinLoadFactor = 1 / 6;\nconst defaultMaxLoadFactor = 2 / 3;\n\nexport default class HashTable {\n  constructor(options = {}) {\n    if (options instanceof HashTable) {\n      this.table = options.table.slice();\n      this.values = options.values.slice();\n      this.state = options.state.slice();\n      this.minLoadFactor = options.minLoadFactor;\n      this.maxLoadFactor = options.maxLoadFactor;\n      this.distinct = options.distinct;\n      this.freeEntries = options.freeEntries;\n      this.lowWaterMark = options.lowWaterMark;\n      this.highWaterMark = options.maxLoadFactor;\n      return;\n    }\n\n    const initialCapacity =\n      options.initialCapacity === undefined\n        ? defaultInitialCapacity\n        : options.initialCapacity;\n    if (initialCapacity < 0) {\n      throw new RangeError(\n        `initial capacity must not be less than zero: ${initialCapacity}`\n      );\n    }\n\n    const minLoadFactor =\n      options.minLoadFactor === undefined\n        ? defaultMinLoadFactor\n        : options.minLoadFactor;\n    const maxLoadFactor =\n      options.maxLoadFactor === undefined\n        ? defaultMaxLoadFactor\n        : options.maxLoadFactor;\n    if (minLoadFactor < 0 || minLoadFactor >= 1) {\n      throw new RangeError(`invalid minLoadFactor: ${minLoadFactor}`);\n    }\n    if (maxLoadFactor <= 0 || maxLoadFactor >= 1) {\n      throw new RangeError(`invalid maxLoadFactor: ${maxLoadFactor}`);\n    }\n    if (minLoadFactor >= maxLoadFactor) {\n      throw new RangeError(\n        `minLoadFactor (${minLoadFactor}) must be smaller than maxLoadFactor (${maxLoadFactor})`\n      );\n    }\n\n    let capacity = initialCapacity;\n    // User wants to put at least capacity elements. We need to choose the size based on the maxLoadFactor to\n    // avoid the need to rehash before this capacity is reached.\n    // actualCapacity * maxLoadFactor >= capacity\n    capacity = (capacity / maxLoadFactor) | 0;\n    capacity = nextPrime(capacity);\n    if (capacity === 0) capacity = 1;\n\n    this.table = newArray(capacity);\n    this.values = newArray(capacity);\n    this.state = newArray(capacity);\n\n    this.minLoadFactor = minLoadFactor;\n    if (capacity === largestPrime) {\n      this.maxLoadFactor = 1;\n    } else {\n      this.maxLoadFactor = maxLoadFactor;\n    }\n\n    this.distinct = 0;\n    this.freeEntries = capacity;\n\n    this.lowWaterMark = 0;\n    this.highWaterMark = chooseHighWaterMark(capacity, this.maxLoadFactor);\n  }\n\n  clone() {\n    return new HashTable(this);\n  }\n\n  get size() {\n    return this.distinct;\n  }\n\n  get(key) {\n    const i = this.indexOfKey(key);\n    if (i < 0) return 0;\n    return this.values[i];\n  }\n\n  set(key, value) {\n    let i = this.indexOfInsertion(key);\n    if (i < 0) {\n      i = -i - 1;\n      this.values[i] = value;\n      return false;\n    }\n\n    if (this.distinct > this.highWaterMark) {\n      const newCapacity = chooseGrowCapacity(\n        this.distinct + 1,\n        this.minLoadFactor,\n        this.maxLoadFactor\n      );\n      this.rehash(newCapacity);\n      return this.set(key, value);\n    }\n\n    this.table[i] = key;\n    this.values[i] = value;\n    if (this.state[i] === FREE) this.freeEntries--;\n    this.state[i] = FULL;\n    this.distinct++;\n\n    if (this.freeEntries < 1) {\n      const newCapacity = chooseGrowCapacity(\n        this.distinct + 1,\n        this.minLoadFactor,\n        this.maxLoadFactor\n      );\n      this.rehash(newCapacity);\n    }\n\n    return true;\n  }\n\n  remove(key, noRehash) {\n    const i = this.indexOfKey(key);\n    if (i < 0) return false;\n\n    this.state[i] = REMOVED;\n    this.distinct--;\n\n    if (!noRehash) this.maybeShrinkCapacity();\n\n    return true;\n  }\n\n  delete(key, noRehash) {\n    const i = this.indexOfKey(key);\n    if (i < 0) return false;\n\n    this.state[i] = FREE;\n    this.distinct--;\n\n    if (!noRehash) this.maybeShrinkCapacity();\n\n    return true;\n  }\n\n  maybeShrinkCapacity() {\n    if (this.distinct < this.lowWaterMark) {\n      const newCapacity = chooseShrinkCapacity(\n        this.distinct,\n        this.minLoadFactor,\n        this.maxLoadFactor\n      );\n      this.rehash(newCapacity);\n    }\n  }\n\n  containsKey(key) {\n    return this.indexOfKey(key) >= 0;\n  }\n\n  indexOfKey(key) {\n    const table = this.table;\n    const state = this.state;\n    const length = this.table.length;\n\n    const hash = key & 0x7fffffff;\n    let i = hash % length;\n    let decrement = hash % (length - 2);\n    if (decrement === 0) decrement = 1;\n\n    while (state[i] !== FREE && (state[i] === REMOVED || table[i] !== key)) {\n      i -= decrement;\n      if (i < 0) i += length;\n    }\n\n    if (state[i] === FREE) return -1;\n    return i;\n  }\n\n  containsValue(value) {\n    return this.indexOfValue(value) >= 0;\n  }\n\n  indexOfValue(value) {\n    const values = this.values;\n    const state = this.state;\n\n    for (var i = 0; i < state.length; i++) {\n      if (state[i] === FULL && values[i] === value) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  indexOfInsertion(key) {\n    const table = this.table;\n    const state = this.state;\n    const length = table.length;\n\n    const hash = key & 0x7fffffff;\n    let i = hash % length;\n    let decrement = hash % (length - 2);\n    if (decrement === 0) decrement = 1;\n\n    while (state[i] === FULL && table[i] !== key) {\n      i -= decrement;\n      if (i < 0) i += length;\n    }\n\n    if (state[i] === REMOVED) {\n      const j = i;\n      while (state[i] !== FREE && (state[i] === REMOVED || table[i] !== key)) {\n        i -= decrement;\n        if (i < 0) i += length;\n      }\n      if (state[i] === FREE) i = j;\n    }\n\n    if (state[i] === FULL) {\n      return -i - 1;\n    }\n\n    return i;\n  }\n\n  ensureCapacity(minCapacity) {\n    if (this.table.length < minCapacity) {\n      const newCapacity = nextPrime(minCapacity);\n      this.rehash(newCapacity);\n    }\n  }\n\n  rehash(newCapacity) {\n    const oldCapacity = this.table.length;\n\n    if (newCapacity <= this.distinct) throw new Error('Unexpected');\n\n    const oldTable = this.table;\n    const oldValues = this.values;\n    const oldState = this.state;\n\n    const newTable = newArray(newCapacity);\n    const newValues = newArray(newCapacity);\n    const newState = newArray(newCapacity);\n\n    this.lowWaterMark = chooseLowWaterMark(newCapacity, this.minLoadFactor);\n    this.highWaterMark = chooseHighWaterMark(newCapacity, this.maxLoadFactor);\n\n    this.table = newTable;\n    this.values = newValues;\n    this.state = newState;\n    this.freeEntries = newCapacity - this.distinct;\n\n    for (var i = 0; i < oldCapacity; i++) {\n      if (oldState[i] === FULL) {\n        var element = oldTable[i];\n        var index = this.indexOfInsertion(element);\n        newTable[index] = element;\n        newValues[index] = oldValues[i];\n        newState[index] = FULL;\n      }\n    }\n  }\n\n  forEachKey(callback) {\n    for (var i = 0; i < this.state.length; i++) {\n      if (this.state[i] === FULL) {\n        if (!callback(this.table[i])) return false;\n      }\n    }\n    return true;\n  }\n\n  forEachValue(callback) {\n    for (var i = 0; i < this.state.length; i++) {\n      if (this.state[i] === FULL) {\n        if (!callback(this.values[i])) return false;\n      }\n    }\n    return true;\n  }\n\n  forEachPair(callback) {\n    for (var i = 0; i < this.state.length; i++) {\n      if (this.state[i] === FULL) {\n        if (!callback(this.table[i], this.values[i])) return false;\n      }\n    }\n    return true;\n  }\n}\n\nfunction chooseLowWaterMark(capacity, minLoad) {\n  return (capacity * minLoad) | 0;\n}\n\nfunction chooseHighWaterMark(capacity, maxLoad) {\n  return Math.min(capacity - 2, (capacity * maxLoad) | 0);\n}\n\nfunction chooseGrowCapacity(size, minLoad, maxLoad) {\n  return nextPrime(\n    Math.max(size + 1, ((4 * size) / (3 * minLoad + maxLoad)) | 0)\n  );\n}\n\nfunction chooseShrinkCapacity(size, minLoad, maxLoad) {\n  return nextPrime(\n    Math.max(size + 1, ((4 * size) / (minLoad + 3 * maxLoad)) | 0)\n  );\n}\n\nfunction newArray(size) {\n  return Array(size).fill(0);\n}\n","import HashTable from 'ml-hash-table';\n\nexport class SparseMatrix {\n  constructor(rows, columns, options = {}) {\n    if (rows instanceof SparseMatrix) {\n      // clone\n      const other = rows;\n      this._init(\n        other.rows,\n        other.columns,\n        other.elements.clone(),\n        other.threshold\n      );\n      return;\n    }\n\n    if (Array.isArray(rows)) {\n      const matrix = rows;\n      rows = matrix.length;\n      options = columns || {};\n      columns = matrix[0].length;\n      this._init(rows, columns, new HashTable(options), options.threshold);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          var value = matrix[i][j];\n          if (this.threshold && Math.abs(value) < this.threshold) value = 0;\n          if (value !== 0) {\n            this.elements.set(i * columns + j, matrix[i][j]);\n          }\n        }\n      }\n    } else {\n      this._init(rows, columns, new HashTable(options), options.threshold);\n    }\n  }\n\n  _init(rows, columns, elements, threshold) {\n    this.rows = rows;\n    this.columns = columns;\n    this.elements = elements;\n    this.threshold = threshold || 0;\n  }\n\n  static eye(rows = 1, columns = rows) {\n    const min = Math.min(rows, columns);\n    const matrix = new SparseMatrix(rows, columns, { initialCapacity: min });\n    for (var i = 0; i < min; i++) {\n      matrix.set(i, i, 1);\n    }\n    return matrix;\n  }\n\n  clone() {\n    return new SparseMatrix(this);\n  }\n\n  to2DArray() {\n    const copy = new Array(this.rows);\n    for (var i = 0; i < this.rows; i++) {\n      copy[i] = new Array(this.columns);\n      for (var j = 0; j < this.columns; j++) {\n        copy[i][j] = this.get(i, j);\n      }\n    }\n    return copy;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isSymmetric() {\n    if (!this.isSquare()) return false;\n\n    var symmetric = true;\n    this.forEachNonZero((i, j, v) => {\n      if (this.get(j, i) !== v) {\n        symmetric = false;\n        return false;\n      }\n      return v;\n    });\n    return symmetric;\n  }\n\n  /**\n   * Search for the wither band in the main diagonals\n   * @return {number}\n   */\n  bandWidth() {\n    let min = this.columns;\n    let max = -1;\n    this.forEachNonZero((i, j, v) => {\n      let diff = i - j;\n      min = Math.min(min, diff);\n      max = Math.max(max, diff);\n      return v;\n    });\n    return max - min;\n  }\n\n  /**\n   * Test if a matrix is consider banded using a threshold\n   * @param {number} width\n   * @return {boolean}\n   */\n  isBanded(width) {\n    let bandWidth = this.bandWidth();\n    return bandWidth <= width;\n  }\n\n  get cardinality() {\n    return this.elements.size;\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  get(row, column) {\n    return this.elements.get(row * this.columns + column);\n  }\n\n  set(row, column, value) {\n    if (this.threshold && Math.abs(value) < this.threshold) value = 0;\n    if (value === 0) {\n      this.elements.remove(row * this.columns + column);\n    } else {\n      this.elements.set(row * this.columns + column, value);\n    }\n    return this;\n  }\n\n  mmul(other) {\n    if (this.columns !== other.rows) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Number of columns of left matrix are not equal to number of rows of right matrix.'\n      );\n    }\n\n    const m = this.rows;\n    const p = other.columns;\n\n    const result = new SparseMatrix(m, p);\n    this.forEachNonZero((i, j, v1) => {\n      other.forEachNonZero((k, l, v2) => {\n        if (j === k) {\n          result.set(i, l, result.get(i, l) + v1 * v2);\n        }\n        return v2;\n      });\n      return v1;\n    });\n    return result;\n  }\n\n  kroneckerProduct(other) {\n    const m = this.rows;\n    const n = this.columns;\n    const p = other.rows;\n    const q = other.columns;\n\n    const result = new SparseMatrix(m * p, n * q, {\n      initialCapacity: this.cardinality * other.cardinality\n    });\n    this.forEachNonZero((i, j, v1) => {\n      other.forEachNonZero((k, l, v2) => {\n        result.set(p * i + k, q * j + l, v1 * v2);\n        return v2;\n      });\n      return v1;\n    });\n    return result;\n  }\n\n  forEachNonZero(callback) {\n    this.elements.forEachPair((key, value) => {\n      const i = (key / this.columns) | 0;\n      const j = key % this.columns;\n      let r = callback(i, j, value);\n      if (r === false) return false; // stop iteration\n      if (this.threshold && Math.abs(r) < this.threshold) r = 0;\n      if (r !== value) {\n        if (r === 0) {\n          this.elements.remove(key, true);\n        } else {\n          this.elements.set(key, r);\n        }\n      }\n      return true;\n    });\n    this.elements.maybeShrinkCapacity();\n    return this;\n  }\n\n  getNonZeros() {\n    const cardinality = this.cardinality;\n    const rows = new Array(cardinality);\n    const columns = new Array(cardinality);\n    const values = new Array(cardinality);\n    var idx = 0;\n    this.forEachNonZero((i, j, value) => {\n      rows[idx] = i;\n      columns[idx] = j;\n      values[idx] = value;\n      idx++;\n      return value;\n    });\n    return { rows, columns, values };\n  }\n\n  setThreshold(newThreshold) {\n    if (newThreshold !== 0 && newThreshold !== this.threshold) {\n      this.threshold = newThreshold;\n      this.forEachNonZero((i, j, v) => v);\n    }\n    return this;\n  }\n\n  /**\n   * @return {SparseMatrix} - New transposed sparse matrix\n   */\n  transpose() {\n    let trans = new SparseMatrix(this.columns, this.rows, {\n      initialCapacity: this.cardinality\n    });\n    this.forEachNonZero((i, j, value) => {\n      trans.set(j, i, value);\n      return value;\n    });\n    return trans;\n  }\n}\n\nSparseMatrix.prototype.klass = 'Matrix';\n\nSparseMatrix.identity = SparseMatrix.eye;\nSparseMatrix.prototype.tensorProduct = SparseMatrix.prototype.kroneckerProduct;\n\n/*\n Add dynamically instance and static methods for mathematical operations\n */\n\nvar inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\nvar inplaceOperatorScalar = `\n(function %name%S(value) {\n    this.forEachNonZero((i, j, v) => v %op% value);\n    return this;\n})\n`;\n\nvar inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix.forEachNonZero((i, j, v) => {\n        this.set(i, j, this.get(i, j) %op% v);\n        return v;\n    });\n    return this;\n})\n`;\n\nvar staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new SparseMatrix(matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\nvar inplaceMethod = `\n(function %name%() {\n    this.forEachNonZero((i, j, v) => %method%(v));\n    return this;\n})\n`;\n\nvar staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new SparseMatrix(matrix);\n    return newMatrix.%name%();\n})\n`;\n\nconst operators = [\n  // Arithmetic operators\n  ['+', 'add'],\n  ['-', 'sub', 'subtract'],\n  ['*', 'mul', 'multiply'],\n  ['/', 'div', 'divide'],\n  ['%', 'mod', 'modulus'],\n  // Bitwise operators\n  ['&', 'and'],\n  ['|', 'or'],\n  ['^', 'xor'],\n  ['<<', 'leftShift'],\n  ['>>', 'signPropagatingRightShift'],\n  ['>>>', 'rightShift', 'zeroFillRightShift']\n];\n\nfor (const operator of operators) {\n  for (let i = 1; i < operator.length; i++) {\n    SparseMatrix.prototype[operator[i]] = eval(\n      fillTemplateFunction(inplaceOperator, {\n        name: operator[i],\n        op: operator[0]\n      })\n    );\n    SparseMatrix.prototype[`${operator[i]}S`] = eval(\n      fillTemplateFunction(inplaceOperatorScalar, {\n        name: `${operator[i]}S`,\n        op: operator[0]\n      })\n    );\n    SparseMatrix.prototype[`${operator[i]}M`] = eval(\n      fillTemplateFunction(inplaceOperatorMatrix, {\n        name: `${operator[i]}M`,\n        op: operator[0]\n      })\n    );\n\n    SparseMatrix[operator[i]] = eval(\n      fillTemplateFunction(staticOperator, { name: operator[i] })\n    );\n  }\n}\n\nvar methods = [['~', 'not']];\n\n[\n  'abs',\n  'acos',\n  'acosh',\n  'asin',\n  'asinh',\n  'atan',\n  'atanh',\n  'cbrt',\n  'ceil',\n  'clz32',\n  'cos',\n  'cosh',\n  'exp',\n  'expm1',\n  'floor',\n  'fround',\n  'log',\n  'log1p',\n  'log10',\n  'log2',\n  'round',\n  'sign',\n  'sin',\n  'sinh',\n  'sqrt',\n  'tan',\n  'tanh',\n  'trunc'\n].forEach(function (mathMethod) {\n  methods.push([`Math.${mathMethod}`, mathMethod]);\n});\n\nfor (const method of methods) {\n  for (let i = 1; i < method.length; i++) {\n    SparseMatrix.prototype[method[i]] = eval(\n      fillTemplateFunction(inplaceMethod, {\n        name: method[i],\n        method: method[0]\n      })\n    );\n    SparseMatrix[method[i]] = eval(\n      fillTemplateFunction(staticMethod, { name: method[i] })\n    );\n  }\n}\n\nfunction fillTemplateFunction(template, values) {\n  for (const i in values) {\n    template = template.replace(new RegExp(`%${i}%`, 'g'), values[i]);\n  }\n  return template;\n}\n","export default function additiveSymmetric(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i]) * (a[i] + b[i])) / (a[i] * b[i]);\n  }\n  return 2 * d;\n}\n","export default function avg(a, b) {\n  var ii = a.length;\n  var max = 0;\n  var ans = 0;\n  var aux = 0;\n  for (var i = 0; i < ii; i++) {\n    aux = Math.abs(a[i] - b[i]);\n    ans += aux;\n    if (max < aux) {\n      max = aux;\n    }\n  }\n  return (max + ans) / 2;\n}\n","export default function bhattacharyya(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return -Math.log(ans);\n}\n","export default function canberra(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.abs(a[i] - b[i]) / (a[i] + b[i]);\n  }\n  return ans;\n}\n","export default function chebyshev(a, b) {\n  var ii = a.length;\n  var max = 0;\n  var aux = 0;\n  for (var i = 0; i < ii; i++) {\n    aux = Math.abs(a[i] - b[i]);\n    if (max < aux) {\n      max = aux;\n    }\n  }\n  return max;\n}\n","export default function clark(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += Math.sqrt(\n      ((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i]))\n    );\n  }\n  return 2 * d;\n}\n","export default function czekanowskiSimilarity(a, b) {\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < a.length; i++) {\n    up += Math.min(a[i], b[i]);\n    down += a[i] + b[i];\n  }\n  return (2 * up) / down;\n}\n","import czekanowskiSimilarity from '../similarities/czekanowski';\n\nexport default function czekanowskiDistance(a, b) {\n  return 1 - czekanowskiSimilarity(a, b);\n}\n","export default function dice(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var q1 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * a[i];\n    q1 += b[i] * b[i];\n    q2 += (a[i] - b[i]) * (a[i] - b[i]);\n  }\n  return q2 / (p + q1);\n}\n","export default function divergence(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i]));\n  }\n  return 2 * d;\n}\n","export default function fidelity(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return ans;\n}\n","export default function gower(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.abs(a[i] - b[i]);\n  }\n  return ans / ii;\n}\n","export default function harmonicMean(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += (a[i] * b[i]) / (a[i] + b[i]);\n  }\n  return 2 * ans;\n}\n","export default function hellinger(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return 2 * Math.sqrt(1 - ans);\n}\n","export default function innerProduct(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += a[i] * b[i];\n  }\n  return ans;\n}\n","export default function intersection(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.min(a[i], b[i]);\n  }\n  return 1 - ans;\n}\n","export default function jaccard(a, b) {\n  var ii = a.length;\n  var p1 = 0;\n  var p2 = 0;\n  var q1 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p1 += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q1 += b[i] * b[i];\n    q2 += (a[i] - b[i]) * (a[i] - b[i]);\n  }\n  return q2 / (p2 + q1 - p1);\n}\n","export default function jeffreys(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += (a[i] - b[i]) * Math.log(a[i] / b[i]);\n  }\n  return ans;\n}\n","export default function jensenDifference(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      (a[i] * Math.log(a[i]) + b[i] * Math.log(b[i])) / 2 -\n      ((a[i] + b[i]) / 2) * Math.log((a[i] + b[i]) / 2);\n  }\n  return ans;\n}\n","export default function jensenShannon(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var q = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * Math.log((2 * a[i]) / (a[i] + b[i]));\n    q += b[i] * Math.log((2 * b[i]) / (a[i] + b[i]));\n  }\n  return (p + q) / 2;\n}\n","export default function kdivergence(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += a[i] * Math.log((2 * a[i]) / (a[i] + b[i]));\n  }\n  return ans;\n}\n","export default function kulczynski(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.abs(a[i] - b[i]);\n    down += Math.min(a[i], b[i]);\n  }\n  return up / down;\n}\n","export default function kullbackLeibler(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += a[i] * Math.log(a[i] / b[i]);\n  }\n  return ans;\n}\n","export default function kumarHassebrook(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var p2 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q2 += b[i] * b[i];\n  }\n  return p / (p2 + q2 - p);\n}\n","export default function kumarJohnson(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      Math.pow(a[i] * a[i] - b[i] * b[i], 2) / (2 * Math.pow(a[i] * b[i], 1.5));\n  }\n  return ans;\n}\n","export default function lorentzian(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.log(Math.abs(a[i] - b[i]) + 1);\n  }\n  return ans;\n}\n","export default function manhattan(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += Math.abs(a[i] - b[i]);\n  }\n  return d;\n}\n","export default function matusita(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return Math.sqrt(2 - 2 * ans);\n}\n","export default function minkowski(a, b, p) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += Math.pow(Math.abs(a[i] - b[i]), p);\n  }\n  return Math.pow(d, 1 / p);\n}\n","export default function motyka(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.min(a[i], b[i]);\n    down += a[i] + b[i];\n  }\n  return 1 - up / down;\n}\n","export default function neyman(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / a[i];\n  }\n  return d;\n}\n","export default function pearson(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / b[i];\n  }\n  return d;\n}\n","export default function probabilisticSymmetric(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);\n  }\n  return 2 * d;\n}\n","export default function ruzicka(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.min(a[i], b[i]);\n    down += Math.max(a[i], b[i]);\n  }\n  return up / down;\n}\n","export default function soergel(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.abs(a[i] - b[i]);\n    down += Math.max(a[i], b[i]);\n  }\n  return up / down;\n}\n","export default function sorensen(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.abs(a[i] - b[i]);\n    down += a[i] + b[i];\n  }\n  return up / down;\n}\n","export default function squared(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);\n  }\n  return d;\n}\n","export default function squaredChord(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      (Math.sqrt(a[i]) - Math.sqrt(b[i])) * (Math.sqrt(a[i]) - Math.sqrt(b[i]));\n  }\n  return ans;\n}\n","export default function taneja(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      ((a[i] + b[i]) / 2) *\n      Math.log((a[i] + b[i]) / (2 * Math.sqrt(a[i] * b[i])));\n  }\n  return ans;\n}\n","export default function tanimoto(a, b, bitvector) {\n  if (bitvector) {\n    var inter = 0;\n    var union = 0;\n    for (var j = 0; j < a.length; j++) {\n      inter += a[j] && b[j];\n      union += a[j] || b[j];\n    }\n    if (union === 0) {\n      return 1;\n    }\n    return inter / union;\n  } else {\n    var ii = a.length;\n    var p = 0;\n    var q = 0;\n    var m = 0;\n    for (var i = 0; i < ii; i++) {\n      p += a[i];\n      q += b[i];\n      m += Math.min(a[i], b[i]);\n    }\n    return 1 - (p + q - 2 * m) / (p + q - m);\n  }\n}\n","import tanimotoS from '../similarities/tanimoto';\n\nexport default function tanimoto(a, b, bitvector) {\n  if (bitvector) {\n    return 1 - tanimotoS(a, b, bitvector);\n  } else {\n    var ii = a.length;\n    var p = 0;\n    var q = 0;\n    var m = 0;\n    for (var i = 0; i < ii; i++) {\n      p += a[i];\n      q += b[i];\n      m += Math.min(a[i], b[i]);\n    }\n    return (p + q - 2 * m) / (p + q - m);\n  }\n}\n","export default function topsoe(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      a[i] * Math.log((2 * a[i]) / (a[i] + b[i])) +\n      b[i] * Math.log((2 * b[i]) / (a[i] + b[i]));\n  }\n  return ans;\n}\n","export default function waveHedges(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += 1 - Math.min(a[i], b[i]) / Math.max(a[i], b[i]);\n  }\n  return ans;\n}\n","import binarySearch from 'binary-search';\nimport { ascending } from 'num-sort';\n\n/**\n * Function that creates the tree\n * @param {Array<Array<number>>} spectrum\n * @param {object} [options]\n * @return {Tree|null}\n * left and right have the same structure than the parent,\n * or are null if they are leaves\n */\nexport function createTree(spectrum, options = {}) {\n  var X = spectrum[0];\n  const {\n    minWindow = 0.16,\n    threshold = 0.01,\n    from = X[0],\n    to = X[X.length - 1]\n  } = options;\n\n  return mainCreateTree(\n    spectrum[0],\n    spectrum[1],\n    from,\n    to,\n    minWindow,\n    threshold\n  );\n}\n\nfunction mainCreateTree(X, Y, from, to, minWindow, threshold) {\n  if (to - from < minWindow) {\n    return null;\n  }\n\n  // search first point\n  var start = binarySearch(X, from, ascending);\n  if (start < 0) {\n    start = ~start;\n  }\n\n  // stop at last point\n  var sum = 0;\n  var center = 0;\n  for (var i = start; i < X.length; i++) {\n    if (X[i] >= to) {\n      break;\n    }\n    sum += Y[i];\n    center += X[i] * Y[i];\n  }\n\n  if (sum < threshold) {\n    return null;\n  }\n\n  center /= sum;\n  if (center - from < 1e-6 || to - center < 1e-6) {\n    return null;\n  }\n  if (center - from < minWindow / 4) {\n    return mainCreateTree(X, Y, center, to, minWindow, threshold);\n  } else {\n    if (to - center < minWindow / 4) {\n      return mainCreateTree(X, Y, from, center, minWindow, threshold);\n    } else {\n      return new Tree(\n        sum,\n        center,\n        mainCreateTree(X, Y, from, center, minWindow, threshold),\n        mainCreateTree(X, Y, center, to, minWindow, threshold)\n      );\n    }\n  }\n}\n\nclass Tree {\n  constructor(sum, center, left, right) {\n    this.sum = sum;\n    this.center = center;\n    this.left = left;\n    this.right = right;\n  }\n}\n","import { createTree } from './createTree';\n\n/**\n * Similarity between two nodes\n * @param {Tree|Array<Array<number>>} a - tree A node\n * @param {Tree|Array<Array<number>>} b - tree B node\n * @param {object} [options]\n * @return {number} similarity measure between tree nodes\n */\nexport function getSimilarity(a, b, options = {}) {\n  const { alpha = 0.1, beta = 0.33, gamma = 0.001 } = options;\n\n  if (a === null || b === null) {\n    return 0;\n  }\n  if (Array.isArray(a)) {\n    a = createTree(a);\n  }\n  if (Array.isArray(b)) {\n    b = createTree(b);\n  }\n\n  var C =\n    (alpha * Math.min(a.sum, b.sum)) / Math.max(a.sum, b.sum) +\n    (1 - alpha) * Math.exp(-gamma * Math.abs(a.center - b.center));\n\n  return (\n    beta * C +\n    ((1 - beta) *\n      (getSimilarity(a.left, b.left, options) +\n        getSimilarity(a.right, b.right, options))) /\n      2\n  );\n}\n","import { getSimilarity } from './getSimilarity';\n\nexport { createTree } from './createTree';\n\nexport function treeSimilarity(A, B, options = {}) {\n  return getSimilarity(A, B, options);\n}\n\nexport function getFunction(options = {}) {\n  return (A, B) => getSimilarity(A, B, options);\n}\n","export default function cosine(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var p2 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q2 += b[i] * b[i];\n  }\n  return p / (Math.sqrt(p2) * Math.sqrt(q2));\n}\n","import diceD from '../distances/dice';\n\nexport default function dice(a, b) {\n  return 1 - diceD(a, b);\n}\n","import intersectionD from '../distances/intersection';\n\nexport default function intersection(a, b) {\n  return 1 - intersectionD(a, b);\n}\n","import jaccardD from '../distances/jaccard';\n\nexport default function jaccard(a, b) {\n  return 1 - jaccardD(a, b);\n}\n","import kulczynskiD from '../distances/kulczynski';\n\nexport default function kulczynski(a, b) {\n  return 1 / kulczynskiD(a, b);\n}\n","import motykaD from '../distances/motyka';\n\nexport default function motyka(a, b) {\n  return 1 - motykaD(a, b);\n}\n","import mean from 'ml-array-mean';\n\nimport cosine from './cosine';\n\nexport default function pearson(a, b) {\n  var avgA = mean(a);\n  var avgB = mean(b);\n\n  var newA = new Array(a.length);\n  var newB = new Array(b.length);\n  for (var i = 0; i < newA.length; i++) {\n    newA[i] = a[i] - avgA;\n    newB[i] = b[i] - avgB;\n  }\n\n  return cosine(newA, newB);\n}\n","import squaredChordD from '../distances/squaredChord';\n\nexport default function squaredChord(a, b) {\n  return 1 - squaredChordD(a, b);\n}\n","'use strict';\n\n// Accuracy\nexports.acc = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.tn[i] + pred.tp[i]) / (l - 1);\n    }\n    return result;\n};\n\n// Error rate\nexports.err = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fn[i] + pred.fp[i] / (l - 1));\n    }\n    return result;\n};\n\n// False positive rate\nexports.fpr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.fp[i] / pred.nNeg;\n    }\n    return result;\n};\n\n// True positive rate\nexports.tpr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.tp[i] / pred.nPos;\n    }\n    return result;\n};\n\n// False negative rate\nexports.fnr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.fn[i] / pred.nPos;\n    }\n    return result;\n};\n\n// True negative rate\nexports.tnr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.tn[i] / pred.nNeg;\n    }\n    return result;\n};\n\n// Positive predictive value\nexports.ppv = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fp[i] + pred.tp[i] !== 0) ? (pred.tp[i] / (pred.fp[i] + pred.tp[i])) : 0;\n    }\n    return result;\n};\n\n// Negative predictive value\nexports.npv = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fn[i] + pred.tn[i] !== 0) ? (pred.tn[i] / (pred.fn[i] + pred.tn[i])) : 0;\n    }\n    return result;\n};\n\n// Prediction conditioned fallout\nexports.pcfall = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fp[i] + pred.tp[i] !== 0) ? 1 - (pred.tp[i] / (pred.fp[i] + pred.tp[i])) : 1;\n    }\n    return result;\n};\n\n// Prediction conditioned miss\nexports.pcmiss = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fn[i] + pred.tn[i] !== 0) ? 1 - (pred.tn[i] / (pred.fn[i] + pred.tn[i])) : 1;\n    }\n    return result;\n};\n\n// Lift value\nexports.lift = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.nPosPred[i] !== 0) ? ((pred.tp[i] / pred.nPos) / (pred.nPosPred[i] / pred.nSamples)) : 0;\n    }\n    return result;\n};\n\n// Rate of positive predictions\nexports.rpp = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.nPosPred[i] / pred.nSamples;\n    }\n    return result;\n};\n\n// Rate of negative predictions\nexports.rnp = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.nNegPred[i] / pred.nSamples;\n    }\n    return result;\n};\n\n// Threshold\nexports.threshold = pred => {\n    const clone = pred.cutoffs.slice();\n    clone[0] = clone[1]; // Remove the infinite value\n    return clone;\n};\n","'use strict';\n\nconst measures = require('./measures');\n\nclass Performance {\n    /**\n     *\n     * @param prediction - The prediction matrix\n     * @param target - The target matrix (values: truthy for same class, falsy for different class)\n     * @param options\n     *\n     * @option    all    True if the entire matrix must be used. False to ignore the diagonal and lower part (default is false, for similarity/distance matrices)\n     * @option    max    True if the max value corresponds to a perfect match (like in similarity matrices), false if it is the min value (default is false, like in distance matrices. All values will be multiplied by -1)\n     */\n    constructor(prediction, target, options) {\n        options = options || {};\n        if (prediction.length !== target.length || prediction[0].length !== target[0].length) {\n            throw new Error('dimensions of prediction and target do not match');\n        }\n        const rows = prediction.length;\n        const columns = prediction[0].length;\n        const isDistance = !options.max;\n\n        const predP = [];\n\n        if (options.all) {\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    predP.push({\n                        pred: prediction[i][j],\n                        targ: target[i][j]\n                    });\n                }\n            }\n        } else {\n            if (rows < 3 || rows !== columns) {\n                throw new Error('When \"all\" option is false, the prediction matrix must be square and have at least 3 columns');\n            }\n            for (var i = 0; i < rows - 1; i++) {\n                for (var j = i + 1; j < columns; j++) {\n                    predP.push({\n                        pred: prediction[i][j],\n                        targ: target[i][j]\n                    });\n                }\n            }\n        }\n\n        if (isDistance) {\n            predP.sort((a, b) => a.pred - b.pred);\n        } else {\n            predP.sort((a, b) => b.pred - a.pred);\n        }\n        \n        const cutoffs = this.cutoffs = [isDistance ? Number.MIN_VALUE : Number.MAX_VALUE];\n        const fp = this.fp = [0];\n        const tp = this.tp = [0];\n\n        var nPos = 0;\n        var nNeg = 0;\n\n        var currentPred = predP[0].pred;\n        var nTp = 0;\n        var nFp = 0;\n        for (var i = 0; i < predP.length; i++) {\n            if (predP[i].pred !== currentPred) {\n                cutoffs.push(currentPred);\n                fp.push(nFp);\n                tp.push(nTp);\n                currentPred = predP[i].pred;\n            }\n            if (predP[i].targ) {\n                nPos++;\n                nTp++;\n            } else {\n                nNeg++;\n                nFp++;\n            }\n        }\n        cutoffs.push(currentPred);\n        fp.push(nFp);\n        tp.push(nTp);\n\n        const l = cutoffs.length;\n        const fn = this.fn = new Array(l);\n        const tn = this.tn = new Array(l);\n        const nPosPred = this.nPosPred = new Array(l);\n        const nNegPred = this.nNegPred = new Array(l);\n\n        for (var i = 0; i < l; i++) {\n            fn[i] = nPos - tp[i];\n            tn[i] = nNeg - fp[i];\n\n            nPosPred[i] = tp[i] + fp[i];\n            nNegPred[i] = tn[i] + fn[i];\n        }\n\n        this.nPos = nPos;\n        this.nNeg = nNeg;\n        this.nSamples = nPos + nNeg;\n    }\n\n    /**\n     * Computes a measure from the prediction object.\n     *\n     * Many measures are available and can be combined :\n     * To create a ROC curve, you need fpr and tpr\n     * To create a DET curve, you need fnr and fpr\n     * To create a Lift chart, you need rpp and lift\n     *\n     * Possible measures are : threshold (Threshold), acc (Accuracy), err (Error rate),\n     * fpr (False positive rate), tpr (True positive rate), fnr (False negative rate), tnr (True negative rate), ppv (Positive predictive value),\n     * npv (Negative predictive value), pcfall (Prediction-conditioned fallout), pcmiss (Prediction-conditioned miss), lift (Lift value), rpp (Rate of positive predictions), rnp (Rate of negative predictions)\n     *\n     * @param measure - The short name of the measure\n     *\n     * @return [number]\n     */\n    getMeasure(measure) {\n        if (typeof measure !== 'string') {\n            throw new Error('No measure specified');\n        }\n        if (!measures[measure]) {\n            throw new Error(`The specified measure (${measure}) does not exist`);\n        }\n        return measures[measure](this);\n    }\n\n    /**\n     * Returns the area under the ROC curve\n     */\n    getAURC() {\n        const l = this.cutoffs.length;\n        const x = new Array(l);\n        const y = new Array(l);\n        for (var i = 0; i < l; i++) {\n            x[i] = this.fp[i] / this.nNeg;\n            y[i] = this.tp[i] / this.nPos;\n        }\n        var auc = 0;\n        for (i = 1; i < l; i++) {\n            auc += 0.5 * (x[i] - x[i - 1]) * (y[i] + y[i - 1]);\n        }\n        return auc;\n    }\n\n    /**\n     * Returns the area under the DET curve\n     */\n    getAUDC() {\n        const l = this.cutoffs.length;\n        const x = new Array(l);\n        const y = new Array(l);\n        for (var i = 0; i < l; i++) {\n            x[i] = this.fn[i] / this.nPos;\n            y[i] = this.fp[i] / this.nNeg;\n        }\n        var auc = 0;\n        for (i = 1; i < l; i++) {\n            auc += 0.5 * (x[i] + x[i - 1]) * (y[i] - y[i - 1]);\n        }\n        return auc;\n    }\n\n    getDistribution(options) {\n        options = options || {};\n        var cutLength = this.cutoffs.length;\n        var cutLow = options.xMin || Math.floor(this.cutoffs[cutLength - 1] * 100) / 100;\n        var cutHigh = options.xMax || Math.ceil(this.cutoffs[1] * 100) / 100;\n        var interval = options.interval || Math.floor(((cutHigh - cutLow) / 20 * 10000000) - 1) / 10000000; // Trick to avoid the precision problem of float numbers\n\n        var xLabels = [];\n        var interValues = [];\n        var intraValues = [];\n        var interCumPercent = [];\n        var intraCumPercent = [];\n\n        var nTP = this.tp[cutLength - 1], currentTP = 0;\n        var nFP = this.fp[cutLength - 1], currentFP = 0;\n\n        for (var i = cutLow, j = (cutLength - 1); i <= cutHigh; i += interval) {\n            while (this.cutoffs[j] < i)\n                j--;\n\n            xLabels.push(i);\n\n            var thisTP = nTP - currentTP - this.tp[j];\n            var thisFP = nFP - currentFP - this.fp[j];\n\n            currentTP += thisTP;\n            currentFP += thisFP;\n\n            interValues.push(thisFP);\n            intraValues.push(thisTP);\n\n            interCumPercent.push(100 - (nFP - this.fp[j]) / nFP * 100);\n            intraCumPercent.push(100 - (nTP - this.tp[j]) / nTP * 100);\n        }\n\n        return {\n            xLabels: xLabels,\n            interValues: interValues,\n            intraValues: intraValues,\n            interCumPercent: interCumPercent,\n            intraCumPercent: intraCumPercent\n        };\n    }\n}\n\nPerformance.names = {\n    acc: 'Accuracy',\n    err: 'Error rate',\n    fpr: 'False positive rate',\n    tpr: 'True positive rate',\n    fnr: 'False negative rate',\n    tnr: 'True negative rate',\n    ppv: 'Positive predictive value',\n    npv: 'Negative predictive value',\n    pcfall: 'Prediction-conditioned fallout',\n    pcmiss: 'Prediction-conditioned miss',\n    lift: 'Lift value',\n    rpp: 'Rate of positive predictions',\n    rnp: 'Rate of negative predictions',\n    threshold: 'Threshold'\n};\n\nmodule.exports = Performance;\n","'use strict';\n\nvar defaultOptions = {\n  size: 1,\n  value: 0\n};\n\n/**\n * Case when the entry is an array\n * @param data\n * @param options\n * @returns {Array}\n */\nfunction arrayCase(data, options) {\n  var len = data.length;\n  if (typeof options.size === 'number') {\n    options.size = [options.size, options.size];\n  }\n\n  var cond = len + options.size[0] + options.size[1];\n\n  var output;\n  if (options.output) {\n    if (options.output.length !== cond) {\n      throw new RangeError('Wrong output size');\n    }\n    output = options.output;\n  } else {\n    output = new Array(cond);\n  }\n\n  var i;\n  if (options.value === 'circular') {\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) {\n        output[i] = data[(len - (options.size[0] % len) + i) % len];\n      } else if (i < options.size[0] + len) {\n        output[i] = data[i - options.size[0]];\n      } else {\n        output[i] = data[(i - options.size[0]) % len];\n      }\n    }\n  } else if (options.value === 'replicate') {\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) output[i] = data[0];\n      else if (i < options.size[0] + len) output[i] = data[i - options.size[0]];\n      else output[i] = data[len - 1];\n    }\n  } else if (options.value === 'symmetric') {\n    if (options.size[0] > len || options.size[1] > len) {\n      throw new RangeError(\n        'expanded value should not be bigger than the data length'\n      );\n    }\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) output[i] = data[options.size[0] - 1 - i];\n      else if (i < options.size[0] + len) output[i] = data[i - options.size[0]];\n      else output[i] = data[2 * len + options.size[0] - i - 1];\n    }\n  } else {\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) output[i] = options.value;\n      else if (i < options.size[0] + len) output[i] = data[i - options.size[0]];\n      else output[i] = options.value;\n    }\n  }\n\n  return output;\n}\n\n/**\n * Case when the entry is a matrix\n * @param data\n * @param options\n * @returns {Array}\n */\nfunction matrixCase(data, options) {\n  // var row = data.length;\n  // var col = data[0].length;\n  if (options.size[0] === undefined) {\n    options.size = [options.size, options.size, options.size, options.size];\n  }\n  throw new Error('matrix not supported yet, sorry');\n}\n\n/**\n * Pads and array\n * @param {Array <number>} data\n * @param {object} options\n */\nfunction padArray(data, options) {\n  options = Object.assign({}, defaultOptions, options);\n  if (Array.isArray(data)) {\n    if (Array.isArray(data[0])) return matrixCase(data, options);\n    else return arrayCase(data, options);\n  } else {\n    throw new TypeError('data should be an array');\n  }\n}\n\nmodule.exports = padArray;\n","'use strict';\n\nconst { Matrix, MatrixTransposeView, inverse } = require('ml-matrix');\nconst padArray = require('ml-pad-array');\n\nconst defaultOptions = {\n  windowSize: 5,\n  derivative: 1,\n  polynomial: 2,\n  pad: 'none',\n  padValue: 'replicate'\n};\n\n/**\n * Savitzky-Golay filter\n * @param {Array <number>} data\n * @param {number} h\n * @param {Object} options\n * @returns {Array}\n */\nfunction SavitzkyGolay(data, h, options) {\n  options = Object.assign({}, defaultOptions, options);\n  if (\n    options.windowSize % 2 === 0 ||\n    options.windowSize < 5 ||\n    !Number.isInteger(options.windowSize)\n  ) {\n    throw new RangeError(\n      'Invalid window size (should be odd and at least 5 integer number)'\n    );\n  }\n  if (options.derivative < 0 || !Number.isInteger(options.derivative)) {\n    throw new RangeError('Derivative should be a positive integer');\n  }\n  if (options.polynomial < 1 || !Number.isInteger(options.polynomial)) {\n    throw new RangeError('Polynomial should be a positive integer');\n  }\n\n  var C, norm;\n  var step = Math.floor(options.windowSize / 2);\n\n  if (options.pad === 'pre') {\n    data = padArray(data, { size: step, value: options.padValue });\n  }\n\n  var ans = new Array(data.length - 2 * step);\n\n  if (\n    options.windowSize === 5 &&\n    options.polynomial === 2 &&\n    (options.derivative === 1 || options.derivative === 2)\n  ) {\n    if (options.derivative === 1) {\n      C = [-2, -1, 0, 1, 2];\n      norm = 10;\n    } else {\n      C = [2, -1, -2, -1, 2];\n      norm = 7;\n    }\n  } else {\n    var J = Matrix.ones(options.windowSize, options.polynomial + 1);\n    var inic = -(options.windowSize - 1) / 2;\n    for (var i = 0; i < J.rows; i++) {\n      for (var j = 0; j < J.columns; j++) {\n        if (inic + 1 !== 0 || j !== 0) J.set(i, j, Math.pow(inic + i, j));\n      }\n    }\n    var Jtranspose = new MatrixTransposeView(J);\n    var Jinv = inverse(Jtranspose.mmul(J));\n    C = Jinv.mmul(Jtranspose);\n    C = C.getRow(options.derivative);\n    norm = 1;\n  }\n  var det = norm * Math.pow(h, options.derivative);\n  for (var k = step; k < data.length - step; k++) {\n    var d = 0;\n    for (var l = 0; l < C.length; l++) d += (C[l] * data[l + k - step]) / det;\n    ans[k - step] = d;\n  }\n\n  if (options.pad === 'post') {\n    ans = padArray(ans, { size: step, value: options.padValue });\n  }\n\n  return ans;\n}\n\nmodule.exports = SavitzkyGolay;\n","// auxiliary file to create the 256 look at table elements\n\nvar ans = new Array(256);\nfor (var i = 0; i < 256; i++) {\n    var num = i;\n    var c = 0;\n    while (num) {\n        num = num & (num - 1);\n        c++;\n    }\n    ans[i] = c;\n}\n\nmodule.exports = ans;","'use strict';\n\nvar eightBits = require('./creator');\n\n/**\n * Count the number of true values in an array\n * @param {Array} arr\n * @return {number}\n */\nfunction count(arr) {\n    var c = 0;\n    for (var i = 0; i < arr.length; i++) {\n        c += eightBits[arr[i] & 0xff] + eightBits[(arr[i] >> 8) & 0xff] + eightBits[(arr[i] >> 16) & 0xff] + eightBits[(arr[i] >> 24) & 0xff];\n    }\n    return c;\n}\n\n/**\n * Logical AND operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction and(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] & arr2[i];\n    return ans;\n}\n\n/**\n * Logical OR operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction or(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] | arr2[i];\n    return ans;\n}\n\n/**\n * Logical XOR operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction xor(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] ^ arr2[i];\n    return ans;\n}\n\n/**\n * Logical NOT operation\n * @param {Array} arr\n * @return {Array}\n */\nfunction not(arr) {\n    var ans = new Array(arr.length);\n    for (var i = 0; i < ans.length; i++)\n        ans[i] = ~arr[i];\n    return ans;\n}\n\n/**\n * Gets the n value of array arr\n * @param {Array} arr\n * @param {number} n\n * @return {boolean}\n */\nfunction getBit(arr, n) {\n    var index = n >> 5; // Same as Math.floor(n/32)\n    var mask = 1 << (31 - n % 32);\n    return Boolean(arr[index] & mask);\n}\n\n/**\n * Sets the n value of array arr to the value val\n * @param {Array} arr\n * @param {number} n\n * @param {boolean} val\n * @return {Array}\n */\nfunction setBit(arr, n, val) {\n    var index = n >> 5; // Same as Math.floor(n/32)\n    var mask = 1 << (31 - n % 32);\n    if (val)\n        arr[index] = mask | arr[index];\n    else\n        arr[index] = ~mask & arr[index];\n    return arr;\n}\n\n/**\n * Translates an array of numbers to a string of bits\n * @param {Array} arr\n * @returns {string}\n */\nfunction toBinaryString(arr) {\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        var obj = (arr[i] >>> 0).toString(2);\n        str += '00000000000000000000000000000000'.substr(obj.length) + obj;\n    }\n    return str;\n}\n\n/**\n * Creates an array of numbers based on a string of bits\n * @param {string} str\n * @returns {Array}\n */\nfunction parseBinaryString(str) {\n    var len = str.length / 32;\n    var ans = new Array(len);\n    for (var i = 0; i < len; i++) {\n        ans[i] = parseInt(str.substr(i*32, 32), 2) | 0;\n    }\n    return ans;\n}\n\n/**\n * Translates an array of numbers to a hex string\n * @param {Array} arr\n * @returns {string}\n */\nfunction toHexString(arr) {\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        var obj = (arr[i] >>> 0).toString(16);\n        str += '00000000'.substr(obj.length) + obj;\n    }\n    return str;\n}\n\n/**\n * Creates an array of numbers based on a hex string\n * @param {string} str\n * @returns {Array}\n */\nfunction parseHexString(str) {\n    var len = str.length / 8;\n    var ans = new Array(len);\n    for (var i = 0; i < len; i++) {\n        ans[i] = parseInt(str.substr(i*8, 8), 16) | 0;\n    }\n    return ans;\n}\n\n/**\n * Creates a human readable string of the array\n * @param {Array} arr\n * @returns {string}\n */\nfunction toDebug(arr) {\n    var binary = toBinaryString(arr);\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        str += '0000'.substr((i * 32).toString(16).length) + (i * 32).toString(16) + ':';\n        for (var j = 0; j < 32; j += 4) {\n            str += ' ' + binary.substr(i * 32 + j, 4);\n        }\n        if (i < arr.length - 1) str += '\\n';\n    }\n    return str\n}\n\nmodule.exports = {\n    count: count,\n    and: and,\n    or: or,\n    xor: xor,\n    not: not,\n    getBit: getBit,\n    setBit: setBit,\n    toBinaryString: toBinaryString,\n    parseBinaryString: parseBinaryString,\n    toHexString: toHexString,\n    parseHexString: parseHexString,\n    toDebug: toDebug\n};\n","import isArray from 'is-any-array';\n\n/**\n * Computes the mode of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction mode(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var maxValue = 0;\n  var maxCount = 0;\n  var count = 0;\n  var counts = {};\n\n  for (var i = 0; i < input.length; ++i) {\n    var element = input[i];\n    count = counts[element];\n\n    if (count) {\n      counts[element]++;\n      count++;\n    } else {\n      counts[element] = count = 1;\n    }\n\n    if (count > maxCount) {\n      maxCount = count;\n      maxValue = input[i];\n    }\n  }\n\n  return maxValue;\n}\n\nexport default mode;\n","/**\n * Computes the norm of the given values\n * @param {Array<number>} input\n * @param {object} [options={}]\n * @param {string} [algorithm='absolute']\n * @return {number}\n */\nfunction norm(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$algorithm = options.algorithm,\n      algorithm = _options$algorithm === void 0 ? 'absolute' : _options$algorithm;\n\n  if (!Array.isArray(input)) {\n    throw new Error('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new Error('input must not be empty');\n  }\n\n  switch (algorithm.toLowerCase()) {\n    case 'absolute':\n      var sum = absoluteSum(input);\n      if (sum === 0) return input.slice(0);\n      return input.map(function (element) {\n        return element / sum;\n      });\n\n    default:\n      throw new Error(\"norm: unknown algorithm: \".concat(algorithm));\n  }\n}\n\nfunction absoluteSum(input) {\n  var sum = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    sum += Math.abs(input[i]);\n  }\n\n  return sum;\n}\n\nexport default norm;\n","import isArray from 'is-any-array';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\n/**\n * Fill an array with sequential numbers\n * @param {Array<number>} [input] - optional destination array (if not provided a new array will be created)\n * @param {object} [options={}]\n * @param {number} [options.from=0] - first value in the array\n * @param {number} [options.to=10] - last value in the array\n * @param {number} [options.size=input.length] - size of the array (if not provided calculated from step)\n * @param {number} [options.step] - if not provided calculated from size\n * @return {Array<number>}\n */\n\nfunction sequentialFill() {\n  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (_typeof(input) === 'object' && !isArray(input)) {\n    options = input;\n    input = [];\n  }\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  var _options = options,\n      _options$from = _options.from,\n      from = _options$from === void 0 ? 0 : _options$from,\n      _options$to = _options.to,\n      to = _options$to === void 0 ? 10 : _options$to,\n      _options$size = _options.size,\n      size = _options$size === void 0 ? input.length : _options$size,\n      step = _options.step;\n\n  if (size && step) {\n    throw new Error('step is defined by the array size');\n  }\n\n  if (!size) {\n    if (step) {\n      size = Math.floor((to - from) / step) + 1;\n    } else {\n      size = to - from + 1;\n    }\n  }\n\n  if (!step && size) {\n    step = (to - from) / (size - 1);\n  }\n\n  if (Array.isArray(input)) {\n    input.length = 0; // only works with normal array\n\n    for (var i = 0; i < size; i++) {\n      input.push(from);\n      from += step;\n    }\n  } else {\n    if (input.length !== size) {\n      throw new Error('sequentialFill typed array must have the correct length');\n    }\n\n    for (var _i = 0; _i < size; _i++) {\n      input[_i] = from;\n      from += step;\n    }\n  }\n\n  return input;\n}\n\nexport default sequentialFill;\n","import arrayMean from 'ml-array-mean';\nimport isArray from 'is-any-array';\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {object} [options]\n * @param {boolean} [options.unbiased = true] - if true, divide by (n-1); if false, divide by n.\n * @param {number} [options.mean = arrayMean] - precalculated mean, if any.\n * @return {number}\n */\n\nfunction variance(values) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(values)) {\n    throw new TypeError('input must be an array');\n  }\n\n  var _options$unbiased = options.unbiased,\n      unbiased = _options$unbiased === void 0 ? true : _options$unbiased,\n      _options$mean = options.mean,\n      mean = _options$mean === void 0 ? arrayMean(values) : _options$mean;\n  var sqrError = 0;\n\n  for (var i = 0; i < values.length; i++) {\n    var x = values[i] - mean;\n    sqrError += x * x;\n  }\n\n  if (unbiased) {\n    return sqrError / (values.length - 1);\n  } else {\n    return sqrError / values.length;\n  }\n}\n\nexport default variance;\n","import variance from 'ml-array-variance';\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {object} [options]\n * @param {boolean} [options.unbiased = true] - if true, divide by (n-1); if false, divide by n.\n * @param {number} [options.mean = arrayMean] - precalculated mean, if any.\n * @return {number}\n */\n\nfunction standardDeviation(values) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Math.sqrt(variance(values, options));\n}\n\nexport default standardDeviation;\n","/**\n * Merge abscissa values if the ordinate value is in a list of centroids\n * @param {object} originalPoints\n * @param {Array<number>} originalPoints.x\n * @param {Array<number>} originalPoints.y\n * @param {Array<number>} centroids\n * @param {object} [options]\n * @param {number} [options.window = 0.01] - has to be a positive number\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function mergeByCentroids(\n  originalPoints,\n  centroids,\n  options = {}\n) {\n  const { window = 0.01 } = options;\n\n  var mergedPoints = {\n    x: centroids.slice(),\n    y: new Array(centroids.length).fill(0)\n  };\n\n  var originalIndex = 0;\n  var mergedIndex = 0;\n  while (\n    originalIndex < originalPoints.x.length &&\n    mergedIndex < centroids.length\n  ) {\n    var diff = originalPoints.x[originalIndex] - centroids[mergedIndex];\n    if (Math.abs(diff) < window) {\n      mergedPoints.y[mergedIndex] += originalPoints.y[originalIndex++];\n    } else if (diff < 0) {\n      originalIndex++;\n    } else {\n      mergedIndex++;\n    }\n  }\n\n  return mergedPoints;\n}\n","import binarySearch from 'binary-search';\nimport { ascending, descending } from 'num-sort';\n\n/**\n *\n * @param {object} points\n * @param {Array<number>} originalPoints.x\n * @param {Array<number>} originalPoints.y\n * @param {*} options\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function closestX(points, options) {\n  const { x, y } = points;\n  const { target = x[0], reverse = false } = options;\n\n  let index;\n  if (reverse) {\n    index = binarySearch(x, target, descending);\n  } else {\n    index = binarySearch(x, target, ascending);\n  }\n\n  if (index >= 0) {\n    return {\n      x: x[index],\n      y: y[index]\n    };\n  } else {\n    index = ~index;\n    if (\n      (index !== 0 && Math.abs(x[index] - target) > 0.5) ||\n      index === x.length\n    ) {\n      return {\n        x: x[index - 1],\n        y: y[index - 1]\n      };\n    } else {\n      return {\n        x: x[index],\n        y: y[index]\n      };\n    }\n  }\n}\n","/**\n * Merge abscissas values on similar ordinates and weight the group of abscissas\n * @param {object} points\n * @param {Array<number>} points.x - sorted abscissas values\n * @param {Array<number>} points.y - ordinates values\n * @param {object} [options]\n * @param {number} [options.groupWidth = 0.001] - window for abscissas to merge\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function maxMerge(points, options = {}) {\n  const { x, y } = points;\n  const { groupWidth = 0.001 } = options;\n\n  var merged = { x: [], y: [] };\n  var maxAbscissa = { x: [], y: [] };\n  var size = 0;\n  var index = 0;\n\n  while (index < x.length) {\n    if (size === 0 || x[index] - merged.x[size - 1] > groupWidth) {\n      maxAbscissa.x.push(x[index]);\n      maxAbscissa.y.push(y[index]);\n      merged.x.push(x[index]);\n      merged.y.push(y[index]);\n      index++;\n      size++;\n    } else {\n      if (y[index] > maxAbscissa.y[size - 1]) {\n        maxAbscissa.x[size - 1] = x[index];\n        maxAbscissa.y[size - 1] = y[index];\n      }\n      merged.x[size - 1] = x[index];\n      merged.y[size - 1] += y[index];\n      index++;\n    }\n  }\n\n  merged.x = maxAbscissa.x.slice();\n\n  return merged;\n}\n","import binarySearch from 'binary-search';\nimport { ascending, descending } from 'num-sort';\n\n/**\n * @param {object} points\n * @param {Array<number>} points.x - sorted abscissas values\n * @param {Array<number>} points.y - ordinates values\n * @param {object} [options]\n * @param {object} [options.from = {index: 0}]\n * @param {object} [options.to = {index: x.length-1}]\n * @param {boolean} [options.reverse = false]\n * @return {{index: number, value: number}}\n */\nexport default function maxY(points, options = {}) {\n  const { x, y } = points;\n  let {\n    from = { index: 0 },\n    to = { index: x.length },\n    reverse = false\n  } = options;\n\n  if (from.value !== undefined && from.index === undefined) {\n    from.index = calculateIndex(from.value, x, reverse);\n  }\n\n  if (to.value !== undefined && to.index === undefined) {\n    to.index = calculateIndex(to.value, x, reverse);\n  }\n\n  var currentMax = Number.MIN_VALUE;\n  var currentIndex;\n  for (var i = from.index; i < to.index; i++) {\n    if (currentMax < y[i]) {\n      currentMax = y[i];\n      currentIndex = i;\n    }\n  }\n\n  return {\n    index: currentIndex,\n    value: currentMax\n  };\n}\n\n/**\n * @param {number} value\n * @param {Array<number>} x\n * @param {boolean} reverse\n * @return {number} index of the value in the array\n */\nfunction calculateIndex(value, x, reverse) {\n  let index;\n  if (reverse) {\n    index = binarySearch(x, value, descending);\n  } else {\n    index = binarySearch(x, value, ascending);\n  }\n\n  if (index < 0) {\n    throw new Error(`the value ${value} doesn't belongs to the abscissa value`);\n  }\n\n  return index;\n}\n","export default function sortX(points, options = {}) {\n  const { x, y } = points;\n  const { reverse = false } = options;\n\n  var sortFunc;\n  if (!reverse) {\n    sortFunc = (a, b) => a.x - b.x;\n  } else {\n    sortFunc = (a, b) => b.x - a.x;\n  }\n\n  var grouped = x\n    .map((val, index) => ({\n      x: val,\n      y: y[index]\n    }))\n    .sort(sortFunc);\n\n  var response = { x: x.slice(), y: y.slice() };\n  for (var i = 0; i < x.length; i++) {\n    response.x[i] = grouped[i].x;\n    response.y[i] = grouped[i].y;\n  }\n\n  return response;\n}\n","\n/**\n * In place modification of the 2 arrays to make X unique and sum the Y if X has the same value\n * @param {object} [points={}] : Object of points contains property x (an array) and y (an array)\n * @return points\n */\n\nexport default function uniqueX(points = {}) {\n  const { x, y } = points;\n  if (x.length < 2) return;\n  if (x.length !== y.length) {\n    throw new Error('The X and Y arrays mush have the same length');\n  }\n\n  let current = x[0];\n  let counter = 0;\n\n  for (let i = 1; i < x.length; i++) {\n    if (current !== x[i]) {\n      counter++;\n      current = x[i];\n      x[counter] = x[i];\n      if (i !== counter) {\n        y[counter] = 0;\n      }\n    }\n    if (i !== counter) {\n      y[counter] += y[i];\n    }\n  }\n\n  x.length = counter + 1;\n  y.length = counter + 1;\n}\n","/**\n * Merge abscissas values on similar ordinates and weight the group of abscissas\n * @param {object} points\n * @param {Array<number>} points.x - sorted abscissas values\n * @param {Array<number>} points.y - ordinates values\n * @param {object} [options]\n * @param {number} [options.groupWidth = 0.001] - window for abscissas to merge\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function weightedMerge(points, options = {}) {\n  const { x, y } = points;\n  const { groupWidth = 0.001 } = options;\n\n  var merged = { x: [], y: [] };\n  var weightedAbscissa = { x: [], y: [] };\n  var size = 0;\n  var index = 0;\n\n  while (index < x.length) {\n    if (size === 0 || x[index] - merged.x[size - 1] > groupWidth) {\n      weightedAbscissa.x.push(x[index] * y[index]);\n      weightedAbscissa.y.push(y[index]);\n      merged.x.push(x[index]);\n      merged.y.push(y[index]);\n      index++;\n      size++;\n    } else {\n      weightedAbscissa.x[size - 1] += x[index] * y[index];\n      weightedAbscissa.y[size - 1] += y[index];\n      merged.x[size - 1] = x[index];\n      merged.y[size - 1] += y[index];\n      index++;\n    }\n  }\n\n  for (var i = 0; i < merged.x.length; i++) {\n    merged.x[i] = weightedAbscissa.x[i] / weightedAbscissa.y[i];\n  }\n\n  return merged;\n}\n","/**\n * Function that calculates the integral of the line between two\n * x-coordinates, given the slope and intercept of the line.\n * @param {number} x0\n * @param {number} x1\n * @param {number} slope\n * @param {number} intercept\n * @return {number} integral value.\n */\nexport default function integral(x0, x1, slope, intercept) {\n  return (\n    0.5 * slope * x1 * x1 +\n    intercept * x1 -\n    (0.5 * slope * x0 * x0 + intercept * x0)\n  );\n}\n","import integral from './integral';\n\n/**\n * function that retrieves the getEquallySpacedData with the variant \"smooth\"\n *\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} from - Initial point\n * @param {number} to - Final point\n * @param {number} numberOfPoints\n * @return {Array} - Array of y's equally spaced with the variant \"smooth\"\n */\nexport default function equallySpacedSmooth(x, y, from, to, numberOfPoints) {\n  var xLength = x.length;\n\n  var step = (to - from) / (numberOfPoints - 1);\n  var halfStep = step / 2;\n\n  var output = new Array(numberOfPoints);\n\n  var initialOriginalStep = x[1] - x[0];\n  var lastOriginalStep = x[xLength - 1] - x[xLength - 2];\n\n  // Init main variables\n  var min = from - halfStep;\n  var max = from + halfStep;\n\n  var previousX = Number.MIN_VALUE;\n  var previousY = 0;\n  var nextX = x[0] - initialOriginalStep;\n  var nextY = 0;\n\n  var currentValue = 0;\n  var slope = 0;\n  var intercept = 0;\n  var sumAtMin = 0;\n  var sumAtMax = 0;\n\n  var i = 0; // index of input\n  var j = 0; // index of output\n\n  function getSlope(x0, y0, x1, y1) {\n    return (y1 - y0) / (x1 - x0);\n  }\n\n  main: while (true) {\n    if (previousX <= min && min <= nextX) {\n      add = integral(0, min - previousX, slope, previousY);\n      sumAtMin = currentValue + add;\n    }\n\n    while (nextX - max >= 0) {\n      // no overlap with original point, just consume current value\n      var add = integral(0, max - previousX, slope, previousY);\n      sumAtMax = currentValue + add;\n\n      output[j++] = (sumAtMax - sumAtMin) / step;\n\n      if (j === numberOfPoints) {\n        break main;\n      }\n\n      min = max;\n      max += step;\n      sumAtMin = sumAtMax;\n    }\n\n    currentValue += integral(previousX, nextX, slope, intercept);\n\n    previousX = nextX;\n    previousY = nextY;\n\n    if (i < xLength) {\n      nextX = x[i];\n      nextY = y[i];\n      i++;\n    } else if (i === xLength) {\n      nextX += lastOriginalStep;\n      nextY = 0;\n    }\n\n    slope = getSlope(previousX, previousY, nextX, nextY);\n    intercept = -slope * previousX + previousY;\n  }\n\n  return output;\n}\n","/**\n * function that retrieves the getEquallySpacedData with the variant \"slot\"\n *\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} from - Initial point\n * @param {number} to - Final point\n * @param {number} numberOfPoints\n * @return {Array} - Array of y's equally spaced with the variant \"slot\"\n */\nexport default function equallySpacedSlot(x, y, from, to, numberOfPoints) {\n  var xLength = x.length;\n\n  var step = (to - from) / (numberOfPoints - 1);\n  var halfStep = step / 2;\n  var lastStep = x[x.length - 1] - x[x.length - 2];\n\n  var start = from - halfStep;\n  var output = new Array(numberOfPoints);\n\n  // Init main variables\n  var min = start;\n  var max = start + step;\n\n  var previousX = -Number.MAX_VALUE;\n  var previousY = 0;\n  var nextX = x[0];\n  var nextY = y[0];\n  var frontOutsideSpectra = 0;\n  var backOutsideSpectra = true;\n\n  var currentValue = 0;\n\n  // for slot algorithm\n  var currentPoints = 0;\n\n  var i = 1; // index of input\n  var j = 0; // index of output\n\n  main: while (true) {\n    if (previousX >= nextX) throw new Error('x must be an increasing serie');\n    while (previousX - max > 0) {\n      // no overlap with original point, just consume current value\n      if (backOutsideSpectra) {\n        currentPoints++;\n        backOutsideSpectra = false;\n      }\n\n      output[j] = currentPoints <= 0 ? 0 : currentValue / currentPoints;\n      j++;\n\n      if (j === numberOfPoints) {\n        break main;\n      }\n\n      min = max;\n      max += step;\n      currentValue = 0;\n      currentPoints = 0;\n    }\n\n    if (previousX > min) {\n      currentValue += previousY;\n      currentPoints++;\n    }\n\n    if (previousX === -Number.MAX_VALUE || frontOutsideSpectra > 1) {\n      currentPoints--;\n    }\n\n    previousX = nextX;\n    previousY = nextY;\n\n    if (i < xLength) {\n      nextX = x[i];\n      nextY = y[i];\n      i++;\n    } else {\n      nextX += lastStep;\n      nextY = 0;\n      frontOutsideSpectra++;\n    }\n  }\n\n  return output;\n}\n","export default function getZones(from, to, numberOfPoints, exclusions = []) {\n  if (from > to) {\n    [from, to] = [to, from];\n  }\n\n  // in exclusions from and to have to be defined\n  exclusions = exclusions.filter(\n    (exclusion) => exclusion.from !== undefined && exclusion.to !== undefined\n  );\n\n  exclusions = JSON.parse(JSON.stringify(exclusions));\n  // we ensure that from before to\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from > exclusion.to) {\n      [exclusion.to, exclusion.from] = [exclusion.from, exclusion.to];\n    }\n  });\n\n  exclusions.sort((a, b) => a.from - b.from);\n\n  // we will rework the exclusions in order to remove overlap and outside range (from / to)\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from < from) exclusion.from = from;\n    if (exclusion.to > to) exclusion.to = to;\n  });\n  for (let i = 0; i < exclusions.length - 1; i++) {\n    if (exclusions[i].to > exclusions[i + 1].from) {\n      exclusions[i].to = exclusions[i + 1].from;\n    }\n  }\n  exclusions = exclusions.filter((exclusion) => exclusion.from < exclusion.to);\n\n  if (!exclusions || exclusions.length === 0) {\n    return [{ from, to, numberOfPoints }];\n  }\n\n  // need to deal with overlapping exclusions and out of bound exclusions\n\n  let toRemove = exclusions.reduce(\n    (previous, exclusion) => (previous += exclusion.to - exclusion.from),\n    0\n  );\n  let total = to - from;\n  let unitsPerPoint = (total - toRemove) / numberOfPoints;\n  let zones = [];\n  let currentFrom = from;\n  let totalPoints = 0;\n  for (let exclusion of exclusions) {\n    let currentNbPoints = Math.round(\n      (exclusion.from - currentFrom) / unitsPerPoint\n    );\n    totalPoints += currentNbPoints;\n    if (currentNbPoints > 0) {\n      zones.push({\n        from: currentFrom,\n        to: exclusion.from,\n        numberOfPoints: currentNbPoints\n      });\n    }\n\n    currentFrom = exclusion.to;\n  }\n  if (numberOfPoints - totalPoints > 0) {\n    zones.push({\n      from: currentFrom,\n      to: to,\n      numberOfPoints: numberOfPoints - totalPoints\n    });\n  }\n\n  return zones;\n}\n","import sequentialFill from 'ml-array-sequential-fill';\n\nimport equallySpacedSmooth from './equallySpacedSmooth';\nimport equallySpacedSlot from './equallySpacedSlot';\nimport getZones from './getZones';\n\n/**\n * Function that returns a Number array of equally spaced numberOfPoints\n * containing a representation of intensities of the spectra arguments x\n * and y.\n *\n * The options parameter contains an object in the following form:\n * from: starting point\n * to: last point\n * numberOfPoints: number of points between from and to\n * variant: \"slot\" or \"smooth\" - smooth is the default option\n *\n * The slot variant consist that each point in the new array is calculated\n * averaging the existing points between the slot that belongs to the current\n * value. The smooth variant is the same but takes the integral of the range\n * of the slot and divide by the step size between two points in the new array.\n *\n * @param {object} [arrayXY={}] - object containing 2 properties x and y (both an array)\n * @param {object} [options={}]\n * @param {number} [options.from=x[0]]\n * @param {number} [options.to=x[x.length-1]]\n * @param {string} [options.variant='smooth']\n * @param {number} [options.numberOfPoints=100]\n * @param {Array} [options.exclusions=[]] array of from / to that should be skipped for the generation of the points\n * @return {object<x: Array, y:Array>} new object with x / y array with the equally spaced data.\n */\n\nexport default function equallySpaced(arrayXY = {}, options = {}) {\n  let { x, y } = arrayXY;\n  let xLength = x.length;\n  let reverse = false;\n  if (x.length > 1 && x[0] > x[1]) {\n    x = x.slice().reverse();\n    y = y.slice().reverse();\n    reverse = true;\n  }\n\n  let {\n    from = x[0],\n    to = x[xLength - 1],\n    variant = 'smooth',\n    numberOfPoints = 100,\n    exclusions = []\n  } = options;\n\n  if (xLength !== y.length) {\n    throw new RangeError(\"the x and y vector doesn't have the same size.\");\n  }\n\n  if (typeof from !== 'number' || isNaN(from)) {\n    throw new RangeError(\"'from' option must be a number\");\n  }\n\n  if (typeof to !== 'number' || isNaN(to)) {\n    throw new RangeError(\"'to' option must be a number\");\n  }\n\n  if (typeof numberOfPoints !== 'number' || isNaN(numberOfPoints)) {\n    throw new RangeError(\"'numberOfPoints' option must be a number\");\n  }\n\n  let zones = getZones(from, to, numberOfPoints, exclusions);\n\n  let xResult = [];\n  let yResult = [];\n  for (let zone of zones) {\n    let zoneResult = processZone(\n      x,\n      y,\n      zone.from,\n      zone.to,\n      zone.numberOfPoints,\n      variant,\n      reverse\n    );\n    xResult.push(...zoneResult.x);\n    yResult.push(...zoneResult.y);\n  }\n\n  if (reverse) {\n    if (from < to) {\n      return { x: xResult.reverse(), y: yResult.reverse() };\n    } else {\n      return { x: xResult, y: yResult };\n    }\n  } else {\n    if (from < to) {\n      return { x: xResult, y: yResult };\n    } else {\n      return { x: xResult.reverse(), y: yResult.reverse() };\n    }\n  }\n}\n\nfunction processZone(x, y, from, to, numberOfPoints, variant) {\n  if (numberOfPoints < 1) {\n    throw new RangeError('the number of points must be at least 1');\n  }\n\n  var output =\n    variant === 'slot'\n      ? equallySpacedSlot(x, y, from, to, numberOfPoints)\n      : equallySpacedSmooth(x, y, from, to, numberOfPoints);\n\n  return {\n    x: sequentialFill({\n      from,\n      to,\n      size: numberOfPoints\n    }),\n    y: output\n  };\n}\n","export default function getZones(from, to, exclusions = []) {\n  if (from > to) {\n    [from, to] = [to, from];\n  }\n\n  // in exclusions from and to have to be defined\n  exclusions = exclusions.filter(\n    (exclusion) => exclusion.from !== undefined && exclusion.to !== undefined\n  );\n\n  exclusions = JSON.parse(JSON.stringify(exclusions));\n  // we ensure that from before to\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from > exclusion.to) {\n      [exclusion.to, exclusion.from] = [exclusion.from, exclusion.to];\n    }\n  });\n\n  exclusions.sort((a, b) => a.from - b.from);\n\n  // we will rework the exclusions in order to remove overlap and outside range (from / to)\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from < from) exclusion.from = from;\n    if (exclusion.to > to) exclusion.to = to;\n  });\n  for (let i = 0; i < exclusions.length - 1; i++) {\n    if (exclusions[i].to > exclusions[i + 1].from) {\n      exclusions[i].to = exclusions[i + 1].from;\n    }\n  }\n  exclusions = exclusions.filter((exclusion) => exclusion.from < exclusion.to);\n\n  if (!exclusions || exclusions.length === 0) {\n    return [{ from, to }];\n  }\n\n  let zones = [];\n  let currentFrom = from;\n  for (let exclusion of exclusions) {\n    if (currentFrom < exclusion.from) {\n      zones.push({\n        from: currentFrom,\n        to: exclusion.from\n      });\n    }\n\n    currentFrom = exclusion.to;\n  }\n  if (currentFrom < to) {\n    zones.push({\n      from: currentFrom,\n      to: to\n    });\n  }\n\n  return zones;\n}\n","import getZones from './getZones';\n\n/**\n * Filter an array x/y based on various criteria\n * x points are expected to be sorted\n *\n * @param {object} points\n * @param {object} [options={}]\n * @param {array} [options.from]\n * @param {array} [options.to]\n * @param {array} [options.exclusions=[]]\n * @return {{x: Array<number>, y: Array<number>}}\n */\n\nexport default function filterX(points, options = {}) {\n  const { x, y } = points;\n  const { from = x[0], to = x[x.length - 1], exclusions = [] } = options;\n\n  let zones = getZones(from, to, exclusions);\n\n\n  let currentZoneIndex = 0;\n  let newX = [];\n  let newY = [];\n  let position = 0;\n  while (position < x.length) {\n    if (\n      x[position] <= zones[currentZoneIndex].to &&\n      x[position] >= zones[currentZoneIndex].from\n    ) {\n      newX.push(x[position]);\n      newY.push(y[position]);\n    } else {\n      if (x[position] > zones[currentZoneIndex].to) {\n        currentZoneIndex++;\n        if (!zones[currentZoneIndex]) break;\n      }\n    }\n    position++;\n  }\n\n  return {\n    x: newX,\n    y: newY\n  };\n}\n","import { DecisionTreeClassifier, DecisionTreeRegression } from 'ml-cart';\nimport {\n  RandomForestClassifier,\n  RandomForestRegression\n} from 'ml-random-forest';\n\n// Try to keep this list in the same structure as the README.\n\n// Unsupervised learning\nexport { PCA } from 'ml-pca';\nimport * as HClust from 'ml-hclust';\nexport { HClust };\nexport { default as KMeans } from 'ml-kmeans';\n\n// Supervised learning\nimport * as NaiveBayes from 'ml-naivebayes';\nexport { NaiveBayes };\nexport { default as KNN } from 'ml-knn';\nexport { PLS, KOPLS } from 'ml-pls';\nexport { default as CrossValidation } from 'ml-cross-validation';\nexport { default as ConfusionMatrix } from 'ml-confusion-matrix';\nexport { DecisionTreeClassifier };\nexport { RandomForestClassifier };\n\n// Artificial neural networks\nexport { default as FNN } from 'ml-fnn';\nexport { default as SOM } from 'ml-som';\n\n// Regression\nexport {\n  SimpleLinearRegression,\n  PolynomialRegression,\n  MultivariateLinearRegression,\n  PowerRegression,\n  ExponentialRegression,\n  TheilSenRegression,\n  RobustPolynomialRegression\n} from 'ml-regression';\nexport { DecisionTreeRegression };\nexport { RandomForestRegression };\n\n// Optimization\nexport { default as levenbergMarquardt } from 'ml-levenberg-marquardt';\n\n// Math\nimport * as MatrixLib from 'ml-matrix';\nconst {\n  Matrix,\n  SVD,\n  EVD,\n  CholeskyDecomposition,\n  LuDecomposition,\n  QrDecomposition\n} = MatrixLib;\nexport {\n  MatrixLib,\n  Matrix,\n  SVD,\n  EVD,\n  CholeskyDecomposition,\n  LuDecomposition,\n  QrDecomposition\n};\n\nexport { SparseMatrix } from 'ml-sparse-matrix';\nexport { default as Kernel } from 'ml-kernel';\nimport { distance, similarity } from 'ml-distance';\nexport { distance as Distance, similarity as Similarity };\nexport { default as distanceMatrix } from 'ml-distance-matrix';\nexport { default as XSadd } from 'ml-xsadd';\n\n// Statistics\nexport { default as Performance } from 'ml-performance';\n\n// Data preprocessing\nexport { default as savitzkyGolay } from 'ml-savitzky-golay';\n\n// Utility\nexport { default as BitArray } from 'ml-bit-array';\nexport { default as HashTable } from 'ml-hash-table';\nexport { default as padArray } from 'ml-pad-array';\nexport { default as binarySearch } from 'binary-search';\nimport * as numSort from 'num-sort';\nexport { numSort };\nexport { default as Random } from 'ml-random';\n\nimport min from 'ml-array-min';\nimport max from 'ml-array-max';\nimport median from 'ml-array-median';\nimport mean from 'ml-array-mean';\nimport mode from 'ml-array-mode';\nimport normed from 'ml-array-normed';\nimport rescale from 'ml-array-rescale';\nimport sequentialFill from 'ml-array-sequential-fill';\nimport standardDeviation from 'ml-array-standard-deviation';\nimport variance from 'ml-array-variance';\nexport const Array = {\n  min,\n  max,\n  median,\n  mean,\n  mode,\n  normed,\n  rescale,\n  sequentialFill,\n  standardDeviation,\n  variance\n};\n\nimport centroidsMerge from 'ml-array-xy-centroids-merge';\nimport closestX from 'ml-arrayxy-closestx';\nimport maxMerge from 'ml-array-xy-max-merge';\nimport maxY from 'ml-array-xy-max-y';\nimport sortX from 'ml-array-xy-sort-x';\nimport uniqueX from 'ml-arrayxy-uniquex';\nimport weightedMerge from 'ml-array-xy-weighted-merge';\nimport equallySpaced from 'ml-array-xy-equally-spaced';\nimport filterX from 'ml-array-xy-filter-x';\nexport const ArrayXY = {\n  centroidsMerge,\n  closestX,\n  maxMerge,\n  maxY,\n  sortX,\n  uniqueX,\n  weightedMerge,\n  equallySpaced,\n  filterX\n};\n"],"names":["toString","Object","prototype","isAnyArray","object","call","endsWith","max","input","isArray","TypeError","length","i","min","rescale","output","options","arguments","undefined","Array","currentMin","currentMax","RangeError","_options$min","minValue","autoMinMax","_options$max","maxValue","factor","checkRowIndex","matrix","index","outer","rows","checkColumnIndex","columns","checkRowVector","vector","to1DArray","checkColumnVector","checkIndices","rowIndices","columnIndices","row","checkRowIndices","column","checkColumnIndices","some","r","from","c","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","value","array","push","name","sumByRow","sum","j","get","sumByColumn","sumAll","v","productByRow","productByColumn","productAll","varianceByRow","unbiased","mean","cols","variance","sum1","sum2","x","varianceByColumn","varianceAll","size","centerByRow","set","centerByColumn","centerAll","getScaleByRow","scale","Math","pow","sqrt","scaleByRow","getScaleByColumn","scaleByColumn","getScaleAll","divider","scaleAll","inspectMatrix","indent","repeat","indentData","this","constructor","inspectData","maxRows","maxColumns","maxNumSize","maxI","maxJ","result","line","formatNumber","join","num","numStr","String","padEnd","precise","toPrecision","exponential","toExponential","eIndex","indexOf","e","substring","installMathOperations","AbstractMatrix","Matrix","add","addS","addM","checkMatrix","sub","subS","subM","subtract","subtractS","subtractM","mul","mulS","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","abs","acos","acosh","asin","asinh","atan","atanh","cbrt","ceil","clz32","cos","cosh","exp","expm1","floor","fround","log","log1p","log10","log2","round","sign","sin","sinh","tan","tanh","trunc","arg0","powS","powM","newRows","newColumns","newData","newMatrix","fill","random","Number","isInteger","interval","zeros","data","l","matrix1","matrix2","isMatrix","klass","apply","callback","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","isEchelonForm","previousColumn","checked","isReducedEchelonForm","k","echelonForm","clone","h","iMax","swapRows","tmp","reducedEchelonForm","m","n","maxRow","p","pivot","Error","setSubMatrix","neg","getRow","getRowVector","rowVector","setRow","row1","row2","temp","getColumn","getColumnVector","columnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","maxIndex","idx","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","diag","norm","type","cumulativeSum","dot","vector2","vector1","mmul","other","Bcolj","Float64Array","s","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","mmulStrassen","y","r1","c1","r2","c2","embed","mat","resultat","console","warn","blockMult","a","b","halfRows","parseInt","halfCols","subMatrix","scaleRows","isFinite","scaleColumns","flipRows","middle","first","last","flipColumns","kroneckerProduct","q","transpose","sortRows","compareFunction","compareNumbers","sort","sortColumns","subMatrixRow","indices","subMatrixColumn","selection","rowIndex","columnIndex","trace","by","product","standardDeviation","center","Symbol","for","rand","randomInt","randInt","diagonal","identity","eye","negate","tensorProduct","nRows","nColumns","arrayData","removeRow","splice","addRow","removeColumn","newRow","addColumn","BaseView","MatrixColumnView","MatrixColumnSelectionView","MatrixFlipColumnView","MatrixFlipRowView","MatrixRowView","MatrixRowSelectionView","MatrixSelectionView","MatrixSubView","MatrixTransposeView","WrapperMatrix1D","_calculateIndex","WrapperMatrix2D","wrap","LuDecomposition","t","LUcolj","kmax","lu","pivotVector","pivotSign","LU","isSingular","col","solve","count","X","determinant","hypotenuse","QrDecomposition","qr","rdiag","nrm","QR","Rdiag","isFullRank","SingularValueDecomposition","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","Boolean","wantv","swapped","aux","nu","ni","U","V","work","si","nct","nrt","mrc","pp","eps","EPSILON","kase","alpha","MIN_VALUE","isNaN","ks","f","cs","sn","sp","spm1","epm1","sk","ek","shift","g","Y","threshold","scols","Ls","rightSingularVectors","VL","vrows","urows","VLU","solveForDiagonal","inverse","vcols","ucols","tol","ii","useSVD","leftHandSide","rightHandSide","subMatrix0","subMatrix1","subMatrix2","xrange","exception","range","dependenciesOneRow","error","thresholdValue","returnArray","linearDependencies","thresholdError","results","Abis","pseudoInverse","svdSolution","SVD","leftSingularVectors","covariance","xMatrix","yMatrix","yIsSame","correlation","sdx","sdy","EigenvalueDecomposition","assumeSymmetric","d","tred2","tql2","H","ort","orthes","hqr2","hh","dl1","c3","el1","s2","tst1","high","low","nn","w","ra","sa","vr","vi","notlast","cdivres","exshift","z","iter","cdiv","xr","xi","yr","yi","CholeskyDecomposition","dimension","positiveDefinite","L","B","toDiscreteDistribution","numberOfClasses","counts","giniImpurity","probabilities","getNumberOfClasses","filter","val","arr","giniGain","splitted","splitsImpurity","splits","currentSplit","squaredError","meanArray","currentElement","regressionError","matrixSplitter","lesserX","greaterX","lesserY","greaterY","zip","ret","gainFunctions","gini","Utils","regression","splitFunctions","TreeNode","kind","gainFunction","splitFunction","minNumSamples","maxDepth","bestSplit","XTranspose","bestGain","Infinity","check","currentFeature","splitValues","featureSplit","currentSplitVal","split","gain","maxGain","splitValue","lesser","greater","calculatePrediction","distribution","train","currentDepth","parentGain","splitColumn","splittedMatrix","left","right","classify","setNodeParameters","node","defaultOptions","DecisionTreeClassifier","model","root","Tree","assign","trainingSet","trainingLabels","predict","toPredict","predictions","DecisionTreeRegression","trainingValues","SMALLEST_UNSAFE_INTEGER","LARGEST_SAFE_INTEGER","UINT32_MAX","UINT32_SIZE","INT32_SIZE","INT32_MAX","UINT21_SIZE","UINT21_MAX","checkFloat","examplesBaggingWithReplacement","trainingValue","seed","engine","Random","autoSeed","Xr","featureBagging","replacement","toRet","usedIndex","Set","has","RandomForestBase","maxFeatures","nEstimators","treeOptions","isClassifier","indexes","useSampleBagging","Estimator","DTClassifier","DTRegression","estimators","map","est","load","res","values","predictionValues","RandomForestClassifier","baseModel","mode","super","pop","_ref","module","exports","window","median","quickSelectMedian","slice","selectionMethods","arrayMean","arrayMedian","selectionMethod","RandomForestRegression","PCA","dataset","means","stdevs","S","isCovarianceMatrix","_computeFromCovarianceMatrix","useCovarianceMatrix","_adjust","covarianceMatrix","svd","singularValues","eigenvalues","singularValue","nComponents","getExplainedVariance","getCumulativeVariance","explained","getEigenvectors","getEigenvalues","getStandardDeviations","getLoadings","evd","EVD","eigenvectorMatrix","realEigenvalues","reverse","squaredEuclidean","euclidean","distanceMatrix","distanceFn","Heap","defaultCmp","heapify","heappop","heappush","heappushpop","heapreplace","insort","nlargest","nsmallest","updateItem","_siftdown","_siftup","lo","hi","cmp","mid","concat","item","lastelt","returnitem","_i","_j","_ref1","_results","_results1","_len","pos","elem","los","startpos","newitem","parent","parentpos","childpos","endpos","rightpos","nodes","replace","pushpop","peek","contains","clear","empty","heap","toArray","insert","top","front","require$$0","Cluster","children","distance","cut","list","ans","group","minGroups","forEach","child","traverse","cb","visit","ClusterLeaf","simpleLink","cluster1","cluster2","disFun","completeLink","averageLink","centroidLink","dist","wardLink","alreadySorted","half","agnes","distanceFunction","method","isDistanceMatrix","methodFunc","len","dis","fdistance","sdistance","toFixed","dmin","clustered","filterInt","filterDiff","diff","obj","indCount","jj","splitting","Ci","ndist","Cj","intrDist","diana","M","clId","rebel","tree","ind","C","sG","spl","fData","sData","nearestVector","listVectors","similarityFunction","vectorIndex","maxSim","sim","minDist","MAX_VALUE","calculateDistanceMatrix","updateClusterID","centers","clusterID","updateCenters","prevCenters","K","nDim","centersLen","dim","id","hasConverged","oldCenters","tolerance","LOOP","FLOAT_MUL","sh1","sh2","sh3","multiply_uint32","nlo","XSadd","Date","now","state","Uint32Array","init","getFloat","bind","getUint32","nextState","periodCertification","PROB_TOLERANCE","randomChoice","valuesArr","cumSum","getArray","randomIndex","seedOrRandom","xsadd","XSAdd","randomGenerator","choice","randomSample","mostDistant","maxDist","minDistCent","kmeanspp","nSamples","localTrials","firstCenterIdx","closestDistSquared","cumSumClosestDistSquared","candidateIdx","distanceToCandidates","euclideanDistances","bestCandidate","bestPot","bestDistSquared","newDistSquared","newPot","A","distanceSymbol","KMeansResult","clusters","centroids","converged","iterations","nearest","centroid","computeInformation","enrichedCentroids","maxIterations","withIterations","initialization","step","newCenters","kmeansGenerator","stepResult","stepNumber","kmeans","separateClasses","features","classes","totalPerClasses","separatedClasses","currentIndex","GaussianNB","reload","calculateProbabilities","C1","PI","std","logPriorProbability","currentStd","getCurrentClass","modelName","currentCase","maxProbability","predictedClass","currentProbability","calculateLogProbability","C2","MultinomialNB","conditionalProbability","priorProbability","separateClass","classValues","divisor","matrixLog","Node","KDTree","points","metric","dimensions","buildTree","restoreParent","toJSONImpl","point","maxNodes","maxDistance","bestNodes","BinaryHeap","nearestSearch","ownDistance","linearPoint","bestChild","linearDistance","otherChild","saveNode","content","src","dest","depth","scoreFunction","element","bubbleUp","end","sinkDown","parentN","elemScore","child2N","child1N","swap","child1","child1Score","child2","KNN","labels","kdTree","isEuclidean","euclideanDistance","getSinglePrediction","knn","nearestPoints","pointsPerClass","maxPoints","lastElement","currentClass","currentPoints","pow2array","initializeMatrices","PLS","meanX","stdDevX","meanY","stdDevY","PBQ","R2X","scaleMethod","latentVectors","rx","cx","ry","cy","ssqXcal","sumOfSquaresY","T","P","Q","W","transposeX","transposeY","tIndex","maxSumColIndex","uIndex","t1","u","den","pnorm","ssqYcal","E","F","KOPLS","YLoadingMat","SigmaPow","YScoreMat","predScoreMat","YOrthLoadingVec","YOrthEigen","YOrthScoreMat","toNorm","TURegressionCoeff","kernelX","kernel","orthogonalComp","predictiveComp","predictiveComponents","orthogonalComponents","compute","Identity","Sigma","diagonalMatrix","YOrthScoreNorm","TpiPrime","CoTemp","SoTemp","toiPrime","ITo","lastScoreMat","lastTpPrime","KTestTrain","YOrthScoreVector","scoreMatPrime","p1","p2","p3","prediction","predYOrthVectors","ConfusionMatrix","actual","predicted","distinctLabels","actualIdx","predictedIdx","getMatrix","getLabels","getTotalCount","getTrueCount","getFalseCount","getTruePositiveCount","label","getIndex","getTrueNegativeCount","getFalsePositiveCount","getFalseNegativeCount","getPositiveCount","getNegativeCount","getTruePositiveRate","getTrueNegativeRate","getPositivePredictiveValue","TP","getNegativePredictiveValue","TN","getFalseNegativeRate","getFalsePositiveRate","getFalseDiscoveryRate","FP","getFalseOmissionRate","FN","getF1Score","getMatthewsCorrelationCoefficient","getInformedness","getMarkedness","getConfusionTable","getAccuracy","correct","incorrect","getCount","actualIndex","predictedIndex","N","twiddle","CV","initMatrix","getDistinct","validate","Classifier","classifierOptions","testIdx","trainIdx","confusionMatrix","distinct","testFeatures","trainFeatures","testLabels","trainLabels","getTrainTest","classifier","updateConfusionMatrix","validateWithCallback","predictedLabels","leaveOneOut","leavePOut","gen","combinations","allIdx","kFold","current","folds","randi","logistic","expELU","param","softExponential","softExponentialPrime","ACTIVATION_FUNCTIONS","activation","derivate","arctan","softsign","relu","softplus","bent","sinusoid","sinc","gaussian","Layer","inputSize","outputSize","regularization","epsilon","activationParam","selectedFunction","params","actFunction","derFunction","activationFunction","mlMatrix","forward","backpropagation","delta","dW","db","aCopy","update","OutputLayer","FeedForwardNeuralNetworks","hiddenLayers","learningRate","dicts","layers","keys","buildNetwork","dictOutputs","inputs","propagate","outputs","NodeSquare","weights","som","neighbors","adjustWeights","target","influence","getDistance","otherNode","getDistanceTorus","distX","distY","gridDim","getNeighbors","xy","torus","getPos","bestNeighbor","direction","simA","simB","getPosition","NodeHexagonal","hX","distZ","fields","randomizer","squareEuclidean","gridType","SOM","hasOwnProperty","numWeights","converters","getConverters","extractor","creator","nodeType","hx","distanceMethod","getMaxDistance","times","findBMU","adjust","iterationCount","startLearningRate","mapRadius","algorithmMethod","_initNodes","done","normalizers","denormalizers","getNormalizer","getDenormalizer","minMax","getRandomValue","zero","one","loadModel","eval","export","includeDistance","initNodes","setTraining","convertedSet","numIterations","timeConstant","trainOne","neighbourhoodRadius","trainingSetFactor","bmu","_findBestMatchingUnit","now2","radiusLimit","xMin","xMax","yMin","yMax","theX","theY","getConvertedNodes","candidate","lowest","computePosition","self","_predict","getQuantizationError","fit","getFit","maybeToPrecision","digits","checkArraySize","BaseRegression","toLaTeX","score","y2","xSum","ySum","chi2","rmsd","xSquared","ySquared","xY","PolynomialRegression","degree","powers","coefficients","checkArrayLength","regress","precision","_toFormula","isLaTeX","sup","closeSup","fn","str","charAt","json","pr","FT","SimpleLinearRegression","slope","intercept","computeX","xFactor","absIntercept","operator","slr","numerator","ExponentialRegression","er","yl","linear","PowerRegression","newInputs","latex","xl","MultivariateLinearRegression","statistics","xt","xx","invxx","beta","fittedValues","ri","reduce","stdError","stdErrorMatrix","stdErrors","tStats","summary","regressionStatistics","standardError","observations","variables","tStat","sigma","GaussianKernel","constant","PolynomialKernel","SigmoidKernel","ANOVAKernel","CauchyKernel","ExponentialKernel","HistogramIntersectionKernel","LaplacianKernel","MultiquadraticKernel","RationalQuadraticKernel","kernelType","rbf","polynomial","poly","anova","cauchy","histogram","HistogramKernel","laplacian","multiquadratic","rational","RationalKernel","sigmoid","mlp","Kernel","toLowerCase","KernelConstructor","kernelFunction","landmarks","kernelMatrix","TheilSenRegression","theilSen","slopes","medianSlope","cuts","RobustPolynomialRegression","robustPolynomial","_","tuples","getRandomTuples","calcCoefficients","residuals","residual","residualsMedian","counter","tuple","errorCalculation","parameters","parameterizedFunction","func","gradientFunction","evaluatedData","gradientDifference","paramFunction","auxParams","funcParam","matrixFunction","damping","gradientFunc","matrixFunc","inverseMatrix","levenbergMarquardt","errorTolerance","minValues","maxValues","initialValues","parLen","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","iteration","parameterValues","parameterError","haystack","needle","comparator","assertNumber","number","largestPrime","primeNumbers","nextPrime","binarySearch","ascending","FREE","FULL","REMOVED","defaultInitialCapacity","defaultMinLoadFactor","defaultMaxLoadFactor","HashTable","table","minLoadFactor","maxLoadFactor","freeEntries","lowWaterMark","highWaterMark","initialCapacity","capacity","chooseHighWaterMark","key","indexOfKey","indexOfInsertion","newCapacity","chooseGrowCapacity","rehash","remove","noRehash","maybeShrinkCapacity","delete","chooseShrinkCapacity","containsKey","hash","decrement","containsValue","indexOfValue","ensureCapacity","minCapacity","oldCapacity","oldTable","oldValues","oldState","newTable","newValues","newState","chooseLowWaterMark","forEachKey","forEachValue","forEachPair","minLoad","maxLoad","SparseMatrix","_init","elements","symmetric","forEachNonZero","bandWidth","isBanded","width","v1","v2","cardinality","getNonZeros","setThreshold","newThreshold","trans","inplaceOperator","inplaceOperatorScalar","inplaceOperatorMatrix","staticOperator","inplaceMethod","staticMethod","operators","fillTemplateFunction","op","methods","mathMethod","template","RegExp","additiveSymmetric","avg","bhattacharyya","canberra","chebyshev","clark","czekanowskiSimilarity","up","down","czekanowskiDistance","dice","q1","q2","divergence","fidelity","gower","harmonicMean","hellinger","innerProduct","intersection","jaccard","jeffreys","jensenDifference","jensenShannon","kdivergence","kulczynski","kullbackLeibler","kumarHassebrook","kumarJohnson","lorentzian","manhattan","matusita","minkowski","motyka","neyman","pearson","probabilisticSymmetric","ruzicka","soergel","sorensen","squared","squaredChord","taneja","tanimoto","bitvector","inter","union","tanimotoS","topsoe","waveHedges","createTree","spectrum","minWindow","to","mainCreateTree","start","getSimilarity","gamma","treeSimilarity","getFunction","cosine","diceD","intersectionD","jaccardD","kulczynskiD","motykaD","avgA","avgB","newA","newB","squaredChordD","pred","cutoffs","tn","tp","fp","nNeg","nPos","nPosPred","nNegPred","Performance","isDistance","predP","all","targ","currentPred","nTp","nFp","getMeasure","measure","measures","getAURC","auc","getAUDC","getDistribution","cutLength","cutLow","cutHigh","xLabels","interValues","intraValues","interCumPercent","intraCumPercent","nTP","currentTP","nFP","currentFP","thisTP","thisFP","names","acc","err","fpr","tpr","fnr","tnr","ppv","npv","pcfall","pcmiss","lift","rpp","rnp","arrayCase","cond","matrixCase","padArray","windowSize","derivative","pad","padValue","SavitzkyGolay","J","ones","inic","Jtranspose","det","eightBits","arr1","arr2","getBit","mask","setBit","toBinaryString","substr","parseBinaryString","toHexString","parseHexString","toDebug","binary","maxCount","_options$algorithm","algorithm","absoluteSum","_typeof","iterator","sequentialFill","_options","_options$from","_options$to","_options$size","_options$unbiased","_options$mean","sqrError","mergeByCentroids","originalPoints","mergedPoints","originalIndex","mergedIndex","closestX","descending","maxMerge","groupWidth","merged","maxAbscissa","maxY","calculateIndex","sortX","sortFunc","grouped","response","uniqueX","weightedMerge","weightedAbscissa","integral","x0","x1","equallySpacedSmooth","numberOfPoints","xLength","halfStep","initialOriginalStep","lastOriginalStep","previousX","previousY","nextX","nextY","currentValue","sumAtMin","sumAtMax","main","equallySpacedSlot","lastStep","frontOutsideSpectra","backOutsideSpectra","getZones","exclusions","exclusion","JSON","parse","stringify","toRemove","previous","unitsPerPoint","zones","currentFrom","totalPoints","currentNbPoints","equallySpaced","arrayXY","variant","xResult","yResult","zone","zoneResult","processZone","filterX","currentZoneIndex","newX","newY","position","MatrixLib","normed","ArrayXY","centroidsMerge"],"mappings":"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"}
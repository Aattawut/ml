{"version":3,"file":"ml.min.js","sources":["../node_modules/is-any-array/src/index.js","../node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-rescale/lib-es6/index.js","../node_modules/ml-matrix/src/util.js","../node_modules/ml-matrix/src/stat.js","../node_modules/ml-matrix/src/inspect.js","../node_modules/ml-matrix/src/mathOperations.js","../node_modules/ml-matrix/src/matrix.js","../node_modules/ml-matrix/src/views/base.js","../node_modules/ml-matrix/src/views/column.js","../node_modules/ml-matrix/src/views/columnSelection.js","../node_modules/ml-matrix/src/views/flipColumn.js","../node_modules/ml-matrix/src/views/flipRow.js","../node_modules/ml-matrix/src/views/row.js","../node_modules/ml-matrix/src/views/rowSelection.js","../node_modules/ml-matrix/src/views/selection.js","../node_modules/ml-matrix/src/views/sub.js","../node_modules/ml-matrix/src/views/transpose.js","../node_modules/ml-matrix/src/wrap/WrapperMatrix1D.js","../node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js","../node_modules/ml-matrix/src/wrap/wrap.js","../node_modules/ml-matrix/src/dc/lu.js","../node_modules/ml-matrix/src/dc/util.js","../node_modules/ml-matrix/src/dc/qr.js","../node_modules/ml-matrix/src/dc/svd.js","../node_modules/ml-matrix/src/decompositions.js","../node_modules/ml-matrix/src/determinant.js","../node_modules/ml-matrix/src/linearDependencies.js","../node_modules/ml-matrix/src/pseudoInverse.js","../node_modules/ml-matrix/src/covariance.js","../node_modules/ml-matrix/src/correlation.js","../node_modules/ml-matrix/src/dc/evd.js","../node_modules/ml-matrix/src/dc/cholesky.js","../node_modules/ml-matrix/src/dc/nipals.js","../node_modules/ml-array-mean/lib-es6/index.js","../node_modules/ml-cart/src/utils.js","../node_modules/ml-cart/src/TreeNode.js","../node_modules/ml-cart/src/DecisionTreeClassifier.js","../node_modules/ml-cart/src/DecisionTreeRegression.js","../node_modules/random-js/dist/random-js.esm.js","../node_modules/ml-random-forest/src/utils.js","../node_modules/ml-random-forest/src/RandomForestBase.js","../node_modules/ml-random-forest/src/RandomForestClassifier.js","../node_modules/median-quickselect/lib/median-quickselect.min.js","../node_modules/ml-array-median/lib-es6/index.js","../node_modules/ml-random-forest/src/RandomForestRegression.js","../node_modules/ml-pca/src/pca.js","../node_modules/ml-distance-euclidean/lib-es6/euclidean.js","../node_modules/ml-distance-matrix/src/index.js","../node_modules/heap/lib/heap.js","../node_modules/heap/index.js","../node_modules/ml-hclust/src/Cluster.js","../node_modules/ml-hclust/src/agnes.js","../node_modules/ml-nearest-vector/lib-es6/index.js","../node_modules/ml-kmeans/src/utils.js","../node_modules/ml-xsadd/lib-es6/xsadd.js","../node_modules/ml-random/lib-es6/choice.js","../node_modules/ml-random/lib-es6/index.js","../node_modules/ml-kmeans/src/initialization.js","../node_modules/ml-kmeans/src/KMeansResult.js","../node_modules/ml-kmeans/src/kmeans.js","../node_modules/ml-naivebayes/src/utils.js","../node_modules/ml-naivebayes/src/GaussianNB.js","../node_modules/ml-naivebayes/src/MultinomialNB.js","../node_modules/ml-knn/src/KDTree.js","../node_modules/ml-knn/src/index.js","../node_modules/ml-pls/src/utils.js","../node_modules/ml-pls/src/pls.js","../node_modules/ml-pls/src/kopls.js","../node_modules/ml-confusion-matrix/src/index.js","../node_modules/ml-combinations/src/index.js","../node_modules/ml-cross-validation/src/index.js","../node_modules/ml-fnn/FeedForwardNeuralNetwork.js","../node_modules/ml-som/src/node-square.js","../node_modules/ml-som/src/node-hexagonal.js","../node_modules/ml-som/src/index.js","../node_modules/ml-regression-base/src/maybeToPrecision.js","../node_modules/ml-regression-base/src/checkArrayLength.js","../node_modules/ml-regression-base/src/index.js","../node_modules/ml-regression-polynomial/src/index.js","../node_modules/ml-regression-simple-linear/src/index.js","../node_modules/ml-regression-exponential/src/index.js","../node_modules/ml-regression-power/src/index.js","../node_modules/ml-regression-multivariate-linear/src/index.js","../node_modules/ml-kernel-gaussian/gaussian-kernel.js","../node_modules/ml-kernel-polynomial/polynomial-kernel.js","../node_modules/ml-kernel-sigmoid/sigmoid-kernel.js","../node_modules/ml-kernel/src/kernels/anova-kernel.js","../node_modules/ml-kernel/src/kernels/cauchy-kernel.js","../node_modules/ml-kernel/src/kernels/exponential-kernel.js","../node_modules/ml-kernel/src/kernels/histogram-intersection-kernel.js","../node_modules/ml-kernel/src/kernels/laplacian-kernel.js","../node_modules/ml-kernel/src/kernels/multiquadratic-kernel.js","../node_modules/ml-kernel/src/kernels/rational-quadratic-kernel.js","../node_modules/ml-kernel/src/kernel.js","../node_modules/ml-regression-theil-sen/src/index.js","../node_modules/ml-regression-robust-polynomial/src/index.js","../node_modules/ml-levenberg-marquardt/src/errorCalculation.js","../node_modules/ml-levenberg-marquardt/src/step.js","../node_modules/ml-levenberg-marquardt/src/index.js","../node_modules/ml-fcnnls/src/util/selection.js","../node_modules/ml-fcnnls/src/util/sortCollectionSet.js","../node_modules/ml-fcnnls/src/cssls.js","../node_modules/ml-fcnnls/src/initialisation.js","../node_modules/ml-fcnnls/src/util/setDifference.js","../node_modules/ml-fcnnls/src/optimality.js","../node_modules/ml-fcnnls/src/fcnnls.js","../node_modules/ml-fcnnls/src/fcnnlsVector.js","../node_modules/binary-search/index.js","../node_modules/num-sort/index.js","../node_modules/ml-hash-table/src/primeFinder.js","../node_modules/ml-hash-table/src/HashTable.js","../node_modules/ml-sparse-matrix/src/index.js","../node_modules/ml-distance/src/distances/additiveSymmetric.js","../node_modules/ml-distance/src/distances/avg.js","../node_modules/ml-distance/src/distances/bhattacharyya.js","../node_modules/ml-distance/src/distances/canberra.js","../node_modules/ml-distance/src/distances/chebyshev.js","../node_modules/ml-distance/src/distances/clark.js","../node_modules/ml-distance/src/similarities/czekanowski.js","../node_modules/ml-distance/src/distances/czekanowski.js","../node_modules/ml-distance/src/distances/dice.js","../node_modules/ml-distance/src/distances/divergence.js","../node_modules/ml-distance/src/distances/fidelity.js","../node_modules/ml-distance/src/distances/gower.js","../node_modules/ml-distance/src/distances/harmonicMean.js","../node_modules/ml-distance/src/distances/hellinger.js","../node_modules/ml-distance/src/distances/innerProduct.js","../node_modules/ml-distance/src/distances/intersection.js","../node_modules/ml-distance/src/distances/jaccard.js","../node_modules/ml-distance/src/distances/jeffreys.js","../node_modules/ml-distance/src/distances/jensenDifference.js","../node_modules/ml-distance/src/distances/jensenShannon.js","../node_modules/ml-distance/src/distances/kdivergence.js","../node_modules/ml-distance/src/distances/kulczynski.js","../node_modules/ml-distance/src/distances/kullbackLeibler.js","../node_modules/ml-distance/src/distances/kumarHassebrook.js","../node_modules/ml-distance/src/distances/kumarJohnson.js","../node_modules/ml-distance/src/distances/lorentzian.js","../node_modules/ml-distance/src/distances/manhattan.js","../node_modules/ml-distance/src/distances/matusita.js","../node_modules/ml-distance/src/distances/minkowski.js","../node_modules/ml-distance/src/distances/motyka.js","../node_modules/ml-distance/src/distances/neyman.js","../node_modules/ml-distance/src/distances/pearson.js","../node_modules/ml-distance/src/distances/probabilisticSymmetric.js","../node_modules/ml-distance/src/distances/ruzicka.js","../node_modules/ml-distance/src/distances/soergel.js","../node_modules/ml-distance/src/distances/sorensen.js","../node_modules/ml-distance/src/distances/squared.js","../node_modules/ml-distance/src/distances/squaredChord.js","../node_modules/ml-distance/src/distances/taneja.js","../node_modules/ml-distance/src/similarities/tanimoto.js","../node_modules/ml-distance/src/distances/tanimoto.js","../node_modules/ml-distance/src/distances/topsoe.js","../node_modules/ml-distance/src/distances/waveHedges.js","../node_modules/ml-tree-similarity/src/createTree.js","../node_modules/ml-tree-similarity/src/getSimilarity.js","../node_modules/ml-tree-similarity/src/index.js","../node_modules/ml-distance/src/similarities/cosine.js","../node_modules/ml-distance/src/similarities/dice.js","../node_modules/ml-distance/src/similarities/intersection.js","../node_modules/ml-distance/src/similarities/jaccard.js","../node_modules/ml-distance/src/similarities/kulczynski.js","../node_modules/ml-distance/src/similarities/motyka.js","../node_modules/ml-distance/src/similarities/pearson.js","../node_modules/ml-distance/src/similarities/squaredChord.js","../node_modules/ml-performance/src/measures.js","../node_modules/ml-performance/src/index.js","../node_modules/ml-pad-array/src/index.js","../node_modules/ml-savitzky-golay/src/index.js","../node_modules/ml-bit-array/src/creator.js","../node_modules/ml-bit-array/src/index.js","../node_modules/ml-array-mode/lib-es6/index.js","../node_modules/ml-array-normed/lib-es6/index.js","../node_modules/ml-array-sequential-fill/lib-es6/index.js","../node_modules/ml-array-variance/lib-es6/index.js","../node_modules/ml-array-standard-deviation/lib-es6/index.js","../node_modules/ml-array-xy-centroids-merge/src/index.js","../node_modules/ml-arrayxy-closestx/src/index.js","../node_modules/ml-array-xy-max-merge/src/index.js","../node_modules/ml-array-xy-max-y/src/index.js","../node_modules/ml-array-xy-sort-x/src/index.js","../node_modules/ml-arrayxy-uniquex/src/index.js","../node_modules/ml-array-xy-weighted-merge/src/index.js","../node_modules/ml-array-xy-equally-spaced/src/integral.js","../node_modules/ml-array-xy-equally-spaced/src/equallySpacedSmooth.js","../node_modules/ml-array-xy-equally-spaced/src/equallySpacedSlot.js","../node_modules/ml-array-xy-equally-spaced/src/getZones.js","../node_modules/ml-array-xy-equally-spaced/src/index.js","../node_modules/ml-array-xy-filter-x/src/getZones.js","../node_modules/ml-array-xy-filter-x/src/index.js","../src/index.js"],"sourcesContent":["'use strict';\n\nconst toString = Object.prototype.toString;\n\nfunction isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n\nmodule.exports = isAnyArray;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the maximum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction max(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var max = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] > max) max = input[i];\n  }\n\n  return max;\n}\n\nexport default max;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the minimum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction min(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var min = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] < min) min = input[i];\n  }\n\n  return min;\n}\n\nexport default min;\n","import max from 'ml-array-max';\nimport min from 'ml-array-min';\nimport isArray from 'is-any-array';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport default rescale;\n","/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices),\n  };\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  let rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  let columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n","import { newArray } from './util';\n\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n","export function inspectMatrix() {\n  const indent = ' '.repeat(2);\n  const indentData = ' '.repeat(4);\n  return `${this.constructor.name} {\n${indent}[\n${indentData}${inspectData(this, indentData)}\n${indent}]\n${indent}rows: ${this.rows}\n${indent}columns: ${this.columns}\n}`;\n}\n\nconst maxRows = 15;\nconst maxColumns = 10;\nconst maxNumSize = 8;\n\nfunction inspectData(matrix, indent) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j)));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indent}`);\n}\n\nfunction formatNumber(num) {\n  const numStr = String(num);\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n  const precise = num.toPrecision(maxNumSize - 2);\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.substring(eIndex);\n  return exponential.substring(0, maxNumSize - e.length) + e;\n}\n","export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n","import rescale from 'ml-array-rescale';\n\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkIndices,\n} from './util';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport { inspectMatrix } from './inspect';\nimport { installMathOperations } from './mathOperations';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  maxIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  minIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      rescale(row, { min, max, output: row });\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      rescale(column, {\n        min: min,\n        max: max,\n        output: column,\n      });\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    let indices = checkIndices(this, rowIndices, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < indices.row.length; i++) {\n      let rowIndex = indices.row[i];\n      for (let j = 0; j < indices.column.length; j++) {\n        let columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[\n    Symbol.for('nodejs.util.inspect.custom')\n  ] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows > 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns > 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = arrayData[0].length;\n      if (typeof nColumns !== 'number' || nColumns === 0) {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n    return this;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    if (this.rows === 1) {\n      throw new RangeError('A matrix cannot have less than one row');\n    }\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array, true));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    if (this.columns === 1) {\n      throw new RangeError('A matrix cannot have less than one column');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n","import { AbstractMatrix } from '../matrix';\n\nexport default class BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\n","import { checkColumnIndex } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    checkColumnIndex(matrix, column);\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n","import { checkColumnIndices } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixColumnSelectionView extends BaseView {\r\n  constructor(matrix, columnIndices) {\r\n    columnIndices = checkColumnIndices(matrix, columnIndices);\r\n    super(matrix, matrix.rows, columnIndices.length);\r\n    this.columnIndices = columnIndices;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\r\n  }\r\n}\r\n","import BaseView from './base';\r\n\r\nexport default class MatrixFlipColumnView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.rows, matrix.columns);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\r\n  }\r\n}\r\n","import BaseView from './base';\r\n\r\nexport default class MatrixFlipRowView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.rows, matrix.columns);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\r\n  }\r\n}\r\n","import { checkRowIndex } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    checkRowIndex(matrix, row);\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n","import { checkRowIndices } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixRowSelectionView extends BaseView {\r\n  constructor(matrix, rowIndices) {\r\n    rowIndices = checkRowIndices(matrix, rowIndices);\r\n    super(matrix, rowIndices.length, matrix.columns);\r\n    this.rowIndices = rowIndices;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\r\n  }\r\n}\r\n","import { checkIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    let indices = checkIndices(matrix, rowIndices, columnIndices);\n    super(matrix, indices.row.length, indices.column.length);\n    this.rowIndices = indices.row;\n    this.columnIndices = indices.column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n    );\n  }\n}\n","import { checkRange } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n    );\n  }\n}\n","import BaseView from './base';\r\n\r\nexport default class MatrixTransposeView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.columns, matrix.rows);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(columnIndex, rowIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(columnIndex, rowIndex);\r\n  }\r\n}\r\n","import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\n","import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n","import WrapperMatrix1D from './WrapperMatrix1D';\nimport WrapperMatrix2D from './WrapperMatrix2D';\n\nexport function wrap(array, options) {\n  if (Array.isArray(array)) {\n    if (array[0] && Array.isArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n","export function hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr[k][k];\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let iter = 0;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          iter = iter + 1;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n","import LuDecomposition from './dc/lu';\nimport QrDecomposition from './dc/qr';\nimport SingularValueDecomposition from './dc/svd';\nimport Matrix from './matrix';\nimport WrapperMatrix2D from './wrap/WrapperMatrix2D';\n\nexport function inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nexport function solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n","import Matrix from './matrix';\nimport LuDecomposition from './dc/lu';\nimport MatrixSelectionView from './views/selection';\n\nexport function determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    let a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n\n      return (\n        a * determinant(subMatrix0) -\n        b * determinant(subMatrix1) +\n        c * determinant(subMatrix2)\n      );\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\n","import Matrix from './matrix';\nimport SingularValueDecomposition from './dc/svd';\n\nfunction xrange(n, exception) {\n  let range = [];\n  for (let i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10,\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    let returnArray = matrix.addRow(index, [0]);\n    for (let i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\nexport function linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n  matrix = Matrix.checkMatrix(matrix);\n\n  let n = matrix.rows;\n  let results = new Matrix(n, n);\n\n  for (let i = 0; i < n; i++) {\n    let b = Matrix.columnVector(matrix.getRow(i));\n    let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\n    let svd = new SingularValueDecomposition(Abis);\n    let x = svd.solve(b);\n    let error = Matrix.sub(b, Abis.mmul(x))\n      .abs()\n      .max();\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError),\n    );\n  }\n  return results;\n}\n","import SVD from './dc/svd';\nimport Matrix from './matrix';\n\nexport function pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  let svdSolution = new SVD(matrix, { autoTranspose: true });\n\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\n","import Matrix from './matrix';\n\nexport function covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = Matrix.checkMatrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !Array.isArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = Matrix.checkMatrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const { center = true } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const cov = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return cov;\n}\n","import Matrix from './matrix';\n\nexport function correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = Matrix.checkMatrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !Array.isArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = Matrix.checkMatrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const { center = true, scale = true } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\n  const sdy = yIsSame\n    ? sdx\n    : yMatrix.standardDeviation('column', { unbiased: true });\n\n  const corr = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(\n        i,\n        j,\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\n      );\n    }\n  }\n  return corr;\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    let n = matrix.columns;\n    let V = new Matrix(n, n);\n    let d = new Float64Array(n);\n    let e = new Float64Array(n);\n    let value = matrix;\n    let i, j;\n\n    let isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      let H = new Matrix(n, n);\n      let ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    let n = this.n;\n    let e = this.e;\n    let d = this.d;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  let f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2, iter;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  let f = 0;\n  let tst1 = 0;\n  let eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      iter = 0;\n      do {\n        iter = iter + 1;\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  let low = 0;\n  let high = n - 1;\n  let f, g, h, i, j, m;\n  let scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  let n = nn - 1;\n  let low = 0;\n  let high = nn - 1;\n  let eps = Number.EPSILON;\n  let exshift = 0;\n  let norm = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let z = 0;\n  let iter = 0;\n  let i, j, k, l, m, t, w, x, y;\n  let ra, sa, vr, vi;\n  let notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H.get(m - 1, m - 1)) +\n                Math.abs(z) +\n                Math.abs(H.get(m + 1, m + 1))))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(\n              i + 1,\n              n,\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z,\n            );\n          }\n\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n\n        w = H.get(i, i) - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi,\n            );\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(\n                i + 1,\n                n - 1,\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x,\n              );\n              H.set(\n                i + 1,\n                n,\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x,\n              );\n            } else {\n              cdivres = cdiv(\n                -r - y * H.get(i, n - 1),\n                -s - y * H.get(i, n),\n                z,\n                q,\n              );\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  let r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    let a = value;\n    let dimension = a.rows;\n    let l = new Matrix(dimension, dimension);\n    let positiveDefinite = true;\n    let i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      let d = 0;\n      for (k = 0; k < j; k++) {\n        let s = 0;\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n\n    this.L = l;\n    this.positiveDefinite = Boolean(positiveDefinite);\n  }\n\n  isPositiveDefinite() {\n    return this.positiveDefinite;\n  }\n\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let l = this.L;\n    let dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n    if (this.isPositiveDefinite() === false) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    let count = value.columns;\n    let B = value.clone();\n    let i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    return B;\n  }\n\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n","import WrapperMatrix2D from '../wrap/WrapperMatrix2D';\nimport Matrix from '../matrix';\n\nexport default class nipals {\n  constructor(X, options = {}) {\n    X = WrapperMatrix2D.checkMatrix(X);\n    let { Y } = options;\n    const {\n      scaleScores = false,\n      maxIterations = 1000,\n      terminationCriteria = 1e-10,\n    } = options;\n\n    let u;\n    if (Y) {\n      if (Array.isArray(Y) && typeof Y[0] === 'number') {\n        Y = Matrix.columnVector(Y);\n      } else {\n        Y = WrapperMatrix2D.checkMatrix(Y);\n      }\n      if (!Y.isColumnVector() || Y.rows !== X.rows) {\n        throw new Error('Y must be a column vector of length X.rows');\n      }\n      u = Y;\n    } else {\n      u = X.getColumnVector(0);\n    }\n\n    let diff = 1;\n    let t, q, w, tOld;\n\n    for (\n      let counter = 0;\n      counter < maxIterations && diff > terminationCriteria;\n      counter++\n    ) {\n      w = X.transpose()\n        .mmul(u)\n        .div(\n          u\n            .transpose()\n            .mmul(u)\n            .get(0, 0),\n        );\n      w = w.div(w.norm());\n\n      t = X.mmul(w).div(\n        w\n          .transpose()\n          .mmul(w)\n          .get(0, 0),\n      );\n\n      if (counter > 0) {\n        diff = t\n          .clone()\n          .sub(tOld)\n          .pow(2)\n          .sum();\n      }\n      tOld = t.clone();\n\n      if (Y) {\n        q = Y.transpose()\n          .mmul(t)\n          .div(\n            t\n              .transpose()\n              .mmul(t)\n              .get(0, 0),\n          );\n        q = q.div(q.norm());\n\n        u = Y.mmul(q).div(\n          q\n            .transpose()\n            .mmul(q)\n            .get(0, 0),\n        );\n      } else {\n        u = t;\n      }\n    }\n\n    if (Y) {\n      let p = X.transpose()\n        .mmul(t)\n        .div(\n          t\n            .transpose()\n            .mmul(t)\n            .get(0, 0),\n        );\n      p = p.div(p.norm());\n      let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));\n      let residual = u\n        .transpose()\n        .mmul(t)\n        .div(\n          t\n            .transpose()\n            .mmul(t)\n            .get(0, 0),\n        );\n      let yResidual = Y.clone().sub(\n        t\n          .clone()\n          .mulS(residual.get(0, 0))\n          .mmul(q.transpose()),\n      );\n\n      this.t = t;\n      this.p = p.transpose();\n      this.w = w.transpose();\n      this.q = q;\n      this.u = u;\n      this.s = t.transpose().mmul(t);\n      this.xResidual = xResidual;\n      this.yResidual = yResidual;\n      this.betas = residual;\n    } else {\n      this.w = w.transpose();\n      this.s = t\n        .transpose()\n        .mmul(t)\n        .sqrt();\n      if (scaleScores) {\n        this.t = t.clone().div(this.s.get(0, 0));\n      } else {\n        this.t = t;\n      }\n      this.xResidual = X.sub(t.mmul(w.transpose()));\n    }\n  }\n}\n","import isArray from 'is-any-array';\n\n/**\n * Computes the mean of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction mean(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var sum = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    sum += input[i];\n  }\n\n  return sum / input.length;\n}\n\nexport default mean;\n","import Matrix from 'ml-matrix';\nimport meanArray from 'ml-array-mean';\n\n/**\n * @private\n * return an array of probabilities of each class\n * @param {Array} array - contains the classes\n * @param {number} numberOfClasses\n * @return {Matrix} - rowVector of probabilities.\n */\nexport function toDiscreteDistribution(array, numberOfClasses) {\n  var counts = new Array(numberOfClasses).fill(0);\n  for (var i = 0; i < array.length; ++i) {\n    counts[array[i]] += 1 / array.length;\n  }\n\n  return Matrix.rowVector(counts);\n}\n\n/**\n * @private\n * Retrieves the impurity of array of predictions\n * @param {Array} array - predictions.\n * @return {number} Gini impurity\n */\nexport function giniImpurity(array) {\n  if (array.length === 0) {\n    return 0;\n  }\n\n  var probabilities = toDiscreteDistribution(\n    array,\n    getNumberOfClasses(array)\n  ).getRow(0);\n\n  var sum = 0.0;\n  for (var i = 0; i < probabilities.length; ++i) {\n    sum += probabilities[i] * probabilities[i];\n  }\n\n  return 1 - sum;\n}\n\n/**\n * @private\n * Return the number of classes given the array of predictions.\n * @param {Array} array - predictions.\n * @return {number} Number of classes.\n */\nexport function getNumberOfClasses(array) {\n  return array.filter(function (val, i, arr) {\n    return arr.indexOf(val) === i;\n  }).length;\n}\n\n/**\n * @private\n * Calculates the Gini Gain of an array of predictions and those predictions splitted by a feature.\n * @para {Array} array - Predictions\n * @param {object} splitted - Object with elements \"greater\" and \"lesser\" that contains an array of predictions splitted.\n * @return {number} - Gini Gain.\n */\n\nexport function giniGain(array, splitted) {\n  var splitsImpurity = 0.0;\n  var splits = ['greater', 'lesser'];\n\n  for (var i = 0; i < splits.length; ++i) {\n    var currentSplit = splitted[splits[i]];\n    splitsImpurity +=\n      (giniImpurity(currentSplit) * currentSplit.length) / array.length;\n  }\n\n  return giniImpurity(array) - splitsImpurity;\n}\n\n/**\n * @private\n * Calculates the squared error of a predictions values.\n * @param {Array} array - predictions values\n * @return {number} squared error.\n */\nexport function squaredError(array) {\n  var l = array.length;\n\n  var m = meanArray(array);\n  var squaredError = 0.0;\n\n  for (var i = 0; i < l; ++i) {\n    var currentElement = array[i];\n    squaredError += (currentElement - m) * (currentElement - m);\n  }\n\n  return squaredError;\n}\n\n/**\n * @private\n * Calculates the sum of squared error of the two arrays that contains the splitted values.\n * @param {Array} array - this argument is no necessary but is used to fit with the main interface.\n * @param {object} splitted - Object with elements \"greater\" and \"lesser\" that contains an array of predictions splitted.\n * @return {number} - sum of squared errors.\n */\nexport function regressionError(array, splitted) {\n  var error = 0.0;\n  var splits = ['greater', 'lesser'];\n\n  for (var i = 0; i < splits.length; ++i) {\n    var currentSplit = splitted[splits[i]];\n    error += squaredError(currentSplit);\n  }\n  return error;\n}\n\n/**\n * @private\n * Split the training set and values from a given column of the training set if is less than a value\n * @param {Matrix} X - Training set.\n * @param {Array} y - Training values.\n * @param {number} column - Column to split.\n * @param {number} value - value to split the Training set and values.\n * @return {object} - Object that contains the splitted values.\n */\nexport function matrixSplitter(X, y, column, value) {\n  var lesserX = [];\n  var greaterX = [];\n  var lesserY = [];\n  var greaterY = [];\n\n  for (var i = 0; i < X.rows; ++i) {\n    if (X.get(i, column) < value) {\n      lesserX.push(X.getRow(i));\n      lesserY.push(y[i]);\n    } else {\n      greaterX.push(X.getRow(i));\n      greaterY.push(y[i]);\n    }\n  }\n\n  return {\n    greaterX: greaterX,\n    greaterY: greaterY,\n    lesserX: lesserX,\n    lesserY: lesserY\n  };\n}\n\n/**\n * @private\n * Calculates the mean between two values\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nexport function mean(a, b) {\n  return (a + b) / 2;\n}\n\n/**\n * @private\n * Returns a list of tuples that contains the i-th element of each array.\n * @param {Array} a\n * @param {Array} b\n * @return {Array} list of tuples.\n */\nexport function zip(a, b) {\n  if (a.length !== b.length) {\n    throw new TypeError(\n      `Error on zip: the size of a: ${a.length} is different from b: ${\n        b.length\n      }`\n    );\n  }\n\n  var ret = new Array(a.length);\n  for (var i = 0; i < a.length; ++i) {\n    ret[i] = [a[i], b[i]];\n  }\n\n  return ret;\n}\n","import Matrix from 'ml-matrix';\nimport mean from 'ml-array-mean';\n\nimport * as Utils from './utils';\n\nconst gainFunctions = {\n  gini: Utils.giniGain,\n  regression: Utils.regressionError\n};\n\nconst splitFunctions = {\n  mean: Utils.mean\n};\n\nexport default class TreeNode {\n  /**\n   * @private\n   * Constructor for a tree node given the options received on the main classes (DecisionTreeClassifier, DecisionTreeRegression)\n   * @param {object|TreeNode} options for loading\n   * @constructor\n   */\n  constructor(options) {\n    // options parameters\n    this.kind = options.kind;\n    this.gainFunction = options.gainFunction;\n    this.splitFunction = options.splitFunction;\n    this.minNumSamples = options.minNumSamples;\n    this.maxDepth = options.maxDepth;\n  }\n\n  /**\n   * @private\n   * Function that retrieve the best feature to make the split.\n   * @param {Matrix} XTranspose - Training set transposed\n   * @param {Array} y - labels or values (depending of the decision tree)\n   * @return {object} - return tree values, the best gain, column and the split value.\n   */\n  bestSplit(XTranspose, y) {\n    // Depending in the node tree class, we set the variables to check information gain (to classify)\n    // or error (for regression)\n\n    var bestGain = this.kind === 'classifier' ? -Infinity : Infinity;\n    var check = this.kind === 'classifier' ? (a, b) => a > b : (a, b) => a < b;\n\n    var maxColumn;\n    var maxValue;\n\n    for (var i = 0; i < XTranspose.rows; ++i) {\n      var currentFeature = XTranspose.getRow(i);\n      var splitValues = this.featureSplit(currentFeature, y);\n      for (var j = 0; j < splitValues.length; ++j) {\n        var currentSplitVal = splitValues[j];\n        var splitted = this.split(currentFeature, y, currentSplitVal);\n\n        var gain = gainFunctions[this.gainFunction](y, splitted);\n        if (check(gain, bestGain)) {\n          maxColumn = i;\n          maxValue = currentSplitVal;\n          bestGain = gain;\n        }\n      }\n    }\n\n    return {\n      maxGain: bestGain,\n      maxColumn: maxColumn,\n      maxValue: maxValue\n    };\n  }\n\n  /**\n   * @private\n   * Makes the split of the training labels or values from the training set feature given a split value.\n   * @param {Array} x - Training set feature\n   * @param {Array} y - Training set value or label\n   * @param {number} splitValue\n   * @return {object}\n   */\n  split(x, y, splitValue) {\n    var lesser = [];\n    var greater = [];\n\n    for (var i = 0; i < x.length; ++i) {\n      if (x[i] < splitValue) {\n        lesser.push(y[i]);\n      } else {\n        greater.push(y[i]);\n      }\n    }\n\n    return {\n      greater: greater,\n      lesser: lesser\n    };\n  }\n\n  /**\n   * @private\n   * Calculates the possible points to split over the tree given a training set feature and corresponding labels or values.\n   * @param {Array} x - Training set feature\n   * @param {Array} y - Training set value or label\n   * @return {Array} possible split values.\n   */\n  featureSplit(x, y) {\n    var splitValues = [];\n    var arr = Utils.zip(x, y);\n    arr.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    for (var i = 1; i < arr.length; ++i) {\n      if (arr[i - 1][1] !== arr[i][1]) {\n        splitValues.push(\n          splitFunctions[this.splitFunction](arr[i - 1][0], arr[i][0])\n        );\n      }\n    }\n\n    return splitValues;\n  }\n\n  /**\n   * @private\n   * Calculate the predictions of a leaf tree node given the training labels or values\n   * @param {Array} y\n   */\n  calculatePrediction(y) {\n    if (this.kind === 'classifier') {\n      this.distribution = Utils.toDiscreteDistribution(\n        y,\n        Utils.getNumberOfClasses(y)\n      );\n      if (this.distribution.columns === 0) {\n        throw new TypeError('Error on calculate the prediction');\n      }\n    } else {\n      this.distribution = mean(y);\n    }\n  }\n\n  /**\n   * @private\n   * Train a node given the training set and labels, because it trains recursively, it also receive\n   * the current depth of the node, parent gain to avoid infinite recursion and boolean value to check if\n   * the training set is transposed.\n   * @param {Matrix} X - Training set (could be transposed or not given transposed).\n   * @param {Array} y - Training labels or values.\n   * @param {number} currentDepth - Current depth of the node.\n   * @param {number} parentGain - parent node gain or error.\n   */\n  train(X, y, currentDepth, parentGain) {\n    if (X.rows <= this.minNumSamples) {\n      this.calculatePrediction(y);\n      return;\n    }\n    if (parentGain === undefined) parentGain = 0.0;\n\n    var XTranspose = X.transpose();\n    var split = this.bestSplit(XTranspose, y);\n\n    this.splitValue = split.maxValue;\n    this.splitColumn = split.maxColumn;\n    this.gain = split.maxGain;\n\n    var splittedMatrix = Utils.matrixSplitter(\n      X,\n      y,\n      this.splitColumn,\n      this.splitValue\n    );\n\n    if (\n      currentDepth < this.maxDepth &&\n      (this.gain > 0.01 && this.gain !== parentGain) &&\n      (splittedMatrix.lesserX.length > 0 && splittedMatrix.greaterX.length > 0)\n    ) {\n      this.left = new TreeNode(this);\n      this.right = new TreeNode(this);\n\n      var lesserX = new Matrix(splittedMatrix.lesserX);\n      var greaterX = new Matrix(splittedMatrix.greaterX);\n\n      this.left.train(\n        lesserX,\n        splittedMatrix.lesserY,\n        currentDepth + 1,\n        this.gain\n      );\n      this.right.train(\n        greaterX,\n        splittedMatrix.greaterY,\n        currentDepth + 1,\n        this.gain\n      );\n    } else {\n      this.calculatePrediction(y);\n    }\n  }\n\n  /**\n   * @private\n   * Calculates the prediction of a given element.\n   * @param {Array} row\n   * @return {number|Array} prediction\n   *          * if a node is a classifier returns an array of probabilities of each class.\n   *          * if a node is for regression returns a number with the prediction.\n   */\n  classify(row) {\n    if (this.right && this.left) {\n      if (row[this.splitColumn] < this.splitValue) {\n        return this.left.classify(row);\n      } else {\n        return this.right.classify(row);\n      }\n    }\n\n    return this.distribution;\n  }\n\n  /**\n   * @private\n   * Set the parameter of the current node and their children.\n   * @param {object} node - parameters of the current node and the children.\n   */\n  setNodeParameters(node) {\n    if (node.distribution !== undefined) {\n      this.distribution =\n        node.distribution.constructor === Array\n          ? new Matrix(node.distribution)\n          : node.distribution;\n    } else {\n      this.distribution = undefined;\n      this.splitValue = node.splitValue;\n      this.splitColumn = node.splitColumn;\n      this.gain = node.gain;\n\n      this.left = new TreeNode(this);\n      this.right = new TreeNode(this);\n\n      if (node.left !== {}) {\n        this.left.setNodeParameters(node.left);\n      }\n      if (node.right !== {}) {\n        this.right.setNodeParameters(node.right);\n      }\n    }\n  }\n}\n","import Matrix from 'ml-matrix';\n\nimport Tree from './TreeNode';\n\nconst defaultOptions = {\n  gainFunction: 'gini',\n  splitFunction: 'mean',\n  minNumSamples: 3,\n  maxDepth: Infinity\n};\n\nexport class DecisionTreeClassifier {\n  /**\n   * Create new Decision Tree Classifier with CART implementation with the given options\n   * @param {object} options\n   * @param {string} [options.gainFunction=\"gini\"] - gain function to get the best split, \"gini\" the only one supported.\n   * @param {string} [options.splitFunction=\"mean\"] - given two integers from a split feature, get the value to split, \"mean\" the only one supported.\n   * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.\n   * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.\n   * @param {object} model - for load purposes.\n   * @constructor\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.options = model.options;\n      this.root = new Tree(model.options);\n      this.root.setNodeParameters(model.root);\n    } else {\n      this.options = Object.assign({}, defaultOptions, options);\n      this.options.kind = 'classifier';\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and labels.\n   * @param {Matrix|MatrixTransposeView|Array} trainingSet\n   * @param {Array} trainingLabels\n   */\n  train(trainingSet, trainingLabels) {\n    this.root = new Tree(this.options);\n    trainingSet = Matrix.checkMatrix(trainingSet);\n    this.root.train(trainingSet, trainingLabels, 0, null);\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Matrix|MatrixTransposeView|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    toPredict = Matrix.checkMatrix(toPredict);\n    var predictions = new Array(toPredict.rows);\n\n    for (var i = 0; i < toPredict.rows; ++i) {\n      predictions[i] = this.root\n        .classify(toPredict.getRow(i))\n        .maxRowIndex(0)[1];\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      options: this.options,\n      root: this.root,\n      name: 'DTClassifier'\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {DecisionTreeClassifier}\n   */\n  static load(model) {\n    if (model.name !== 'DTClassifier') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new DecisionTreeClassifier(true, model);\n  }\n}\n","import Matrix from 'ml-matrix';\n\nimport Tree from './TreeNode';\n\nconst defaultOptions = {\n  gainFunction: 'regression',\n  splitFunction: 'mean',\n  minNumSamples: 3,\n  maxDepth: Infinity\n};\n\nexport class DecisionTreeRegression {\n  /**\n   * Create new Decision Tree Regression with CART implementation with the given options.\n   * @param {object} options\n   * @param {string} [options.gainFunction=\"regression\"] - gain function to get the best split, \"regression\" the only one supported.\n   * @param {string} [options.splitFunction=\"mean\"] - given two integers from a split feature, get the value to split, \"mean\" the only one supported.\n   * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.\n   * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.options = model.options;\n      this.root = new Tree(model.options);\n      this.root.setNodeParameters(model.root);\n    } else {\n      this.options = Object.assign({}, defaultOptions, options);\n      this.options.kind = 'regression';\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and values.\n   * @param {Matrix|MatrixTransposeView|Array} trainingSet\n   * @param {Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    this.root = new Tree(this.options);\n\n    if (typeof trainingSet[0] !== 'undefined' && trainingSet[0].length === undefined) {\n      trainingSet = Matrix.columnVector(trainingSet);\n    } else {\n      trainingSet = Matrix.checkMatrix(trainingSet);\n    }\n    this.root.train(trainingSet, trainingValues, 0);\n  }\n\n  /**\n   * Predicts the values given the matrix to predict.\n   * @param {Matrix|MatrixTransposeView|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    if (typeof toPredict[0] !== 'undefined' && toPredict[0].length === undefined) {\n      toPredict = Matrix.columnVector(toPredict);\n    }\n    toPredict = Matrix.checkMatrix(toPredict);\n\n    var predictions = new Array(toPredict.rows);\n    for (var i = 0; i < toPredict.rows; ++i) {\n      predictions[i] = this.root.classify(toPredict.getRow(i));\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      options: this.options,\n      root: this.root,\n      name: 'DTRegression'\n    };\n  }\n\n  /**\n   * Load a Decision tree regression with the given model.\n   * @param {object} model\n   * @return {DecisionTreeRegression}\n   */\n  static load(model) {\n    if (model.name !== 'DTRegression') {\n      throw new RangeError(`Invalid model:${model.name}`);\n    }\n\n    return new DecisionTreeRegression(true, model);\n  }\n}\n","const SMALLEST_UNSAFE_INTEGER = 0x20000000000000;\r\nconst LARGEST_SAFE_INTEGER = SMALLEST_UNSAFE_INTEGER - 1;\r\nconst UINT32_MAX = -1 >>> 0;\r\nconst UINT32_SIZE = UINT32_MAX + 1;\r\nconst INT32_SIZE = UINT32_SIZE / 2;\r\nconst INT32_MAX = INT32_SIZE - 1;\r\nconst UINT21_SIZE = 1 << 21;\r\nconst UINT21_MAX = UINT21_SIZE - 1;\n\n/**\r\n * Returns a value within [-0x80000000, 0x7fffffff]\r\n */\r\nfunction int32(engine) {\r\n    return engine.next() | 0;\r\n}\n\nfunction add(distribution, addend) {\r\n    if (addend === 0) {\r\n        return distribution;\r\n    }\r\n    else {\r\n        return engine => distribution(engine) + addend;\r\n    }\r\n}\n\n/**\r\n * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n */\r\nfunction int53(engine) {\r\n    const high = engine.next() | 0;\r\n    const low = engine.next() >>> 0;\r\n    return ((high & UINT21_MAX) * UINT32_SIZE +\r\n        low +\r\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0));\r\n}\n\n/**\r\n * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n */\r\nfunction int53Full(engine) {\r\n    while (true) {\r\n        const high = engine.next() | 0;\r\n        if (high & 0x400000) {\r\n            if ((high & 0x7fffff) === 0x400000 && (engine.next() | 0) === 0) {\r\n                return SMALLEST_UNSAFE_INTEGER;\r\n            }\r\n        }\r\n        else {\r\n            const low = engine.next() >>> 0;\r\n            return ((high & UINT21_MAX) * UINT32_SIZE +\r\n                low +\r\n                (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0));\r\n        }\r\n    }\r\n}\n\n/**\r\n * Returns a value within [0, 0xffffffff]\r\n */\r\nfunction uint32(engine) {\r\n    return engine.next() >>> 0;\r\n}\n\n/**\r\n * Returns a value within [0, 0x1fffffffffffff]\r\n */\r\nfunction uint53(engine) {\r\n    const high = engine.next() & UINT21_MAX;\r\n    const low = engine.next() >>> 0;\r\n    return high * UINT32_SIZE + low;\r\n}\n\n/**\r\n * Returns a value within [0, 0x20000000000000]\r\n */\r\nfunction uint53Full(engine) {\r\n    while (true) {\r\n        const high = engine.next() | 0;\r\n        if (high & UINT21_SIZE) {\r\n            if ((high & UINT21_MAX) === 0 && (engine.next() | 0) === 0) {\r\n                return SMALLEST_UNSAFE_INTEGER;\r\n            }\r\n        }\r\n        else {\r\n            const low = engine.next() >>> 0;\r\n            return (high & UINT21_MAX) * UINT32_SIZE + low;\r\n        }\r\n    }\r\n}\n\nfunction isPowerOfTwoMinusOne(value) {\r\n    return ((value + 1) & value) === 0;\r\n}\r\nfunction bitmask(masking) {\r\n    return (engine) => engine.next() & masking;\r\n}\r\nfunction downscaleToLoopCheckedRange(range) {\r\n    const extendedRange = range + 1;\r\n    const maximum = extendedRange * Math.floor(UINT32_SIZE / extendedRange);\r\n    return engine => {\r\n        let value = 0;\r\n        do {\r\n            value = engine.next() >>> 0;\r\n        } while (value >= maximum);\r\n        return value % extendedRange;\r\n    };\r\n}\r\nfunction downscaleToRange(range) {\r\n    if (isPowerOfTwoMinusOne(range)) {\r\n        return bitmask(range);\r\n    }\r\n    else {\r\n        return downscaleToLoopCheckedRange(range);\r\n    }\r\n}\r\nfunction isEvenlyDivisibleByMaxInt32(value) {\r\n    return (value | 0) === 0;\r\n}\r\nfunction upscaleWithHighMasking(masking) {\r\n    return engine => {\r\n        const high = engine.next() & masking;\r\n        const low = engine.next() >>> 0;\r\n        return high * UINT32_SIZE + low;\r\n    };\r\n}\r\nfunction upscaleToLoopCheckedRange(extendedRange) {\r\n    const maximum = extendedRange * Math.floor(SMALLEST_UNSAFE_INTEGER / extendedRange);\r\n    return engine => {\r\n        let ret = 0;\r\n        do {\r\n            const high = engine.next() & UINT21_MAX;\r\n            const low = engine.next() >>> 0;\r\n            ret = high * UINT32_SIZE + low;\r\n        } while (ret >= maximum);\r\n        return ret % extendedRange;\r\n    };\r\n}\r\nfunction upscaleWithinU53(range) {\r\n    const extendedRange = range + 1;\r\n    if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\r\n        const highRange = ((extendedRange / UINT32_SIZE) | 0) - 1;\r\n        if (isPowerOfTwoMinusOne(highRange)) {\r\n            return upscaleWithHighMasking(highRange);\r\n        }\r\n    }\r\n    return upscaleToLoopCheckedRange(extendedRange);\r\n}\r\nfunction upscaleWithinI53AndLoopCheck(min, max) {\r\n    return engine => {\r\n        let ret = 0;\r\n        do {\r\n            const high = engine.next() | 0;\r\n            const low = engine.next() >>> 0;\r\n            ret =\r\n                (high & UINT21_MAX) * UINT32_SIZE +\r\n                    low +\r\n                    (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\r\n        } while (ret < min || ret > max);\r\n        return ret;\r\n    };\r\n}\r\n/**\r\n * Returns a Distribution to return a value within [min, max]\r\n * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n */\r\nfunction integer(min, max) {\r\n    min = Math.floor(min);\r\n    max = Math.floor(max);\r\n    if (min < -SMALLEST_UNSAFE_INTEGER || !isFinite(min)) {\r\n        throw new RangeError(`Expected min to be at least ${-SMALLEST_UNSAFE_INTEGER}`);\r\n    }\r\n    else if (max > SMALLEST_UNSAFE_INTEGER || !isFinite(max)) {\r\n        throw new RangeError(`Expected max to be at most ${SMALLEST_UNSAFE_INTEGER}`);\r\n    }\r\n    const range = max - min;\r\n    if (range <= 0 || !isFinite(range)) {\r\n        return () => min;\r\n    }\r\n    else if (range === UINT32_MAX) {\r\n        if (min === 0) {\r\n            return uint32;\r\n        }\r\n        else {\r\n            return add(int32, min + INT32_SIZE);\r\n        }\r\n    }\r\n    else if (range < UINT32_MAX) {\r\n        return add(downscaleToRange(range), min);\r\n    }\r\n    else if (range === LARGEST_SAFE_INTEGER) {\r\n        return add(uint53, min);\r\n    }\r\n    else if (range < LARGEST_SAFE_INTEGER) {\r\n        return add(upscaleWithinU53(range), min);\r\n    }\r\n    else if (max - 1 - min === LARGEST_SAFE_INTEGER) {\r\n        return add(uint53Full, min);\r\n    }\r\n    else if (min === -SMALLEST_UNSAFE_INTEGER &&\r\n        max === SMALLEST_UNSAFE_INTEGER) {\r\n        return int53Full;\r\n    }\r\n    else if (min === -SMALLEST_UNSAFE_INTEGER && max === LARGEST_SAFE_INTEGER) {\r\n        return int53;\r\n    }\r\n    else if (min === -LARGEST_SAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {\r\n        return add(int53, 1);\r\n    }\r\n    else if (max === SMALLEST_UNSAFE_INTEGER) {\r\n        return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\r\n    }\r\n    else {\r\n        return upscaleWithinI53AndLoopCheck(min, max);\r\n    }\r\n}\n\nfunction isLeastBitTrue(engine) {\r\n    return (engine.next() & 1) === 1;\r\n}\r\nfunction lessThan(distribution, value) {\r\n    return engine => distribution(engine) < value;\r\n}\r\nfunction probability(percentage) {\r\n    if (percentage <= 0) {\r\n        return () => false;\r\n    }\r\n    else if (percentage >= 1) {\r\n        return () => true;\r\n    }\r\n    else {\r\n        const scaled = percentage * UINT32_SIZE;\r\n        if (scaled % 1 === 0) {\r\n            return lessThan(int32, (scaled - INT32_SIZE) | 0);\r\n        }\r\n        else {\r\n            return lessThan(uint53, Math.round(percentage * SMALLEST_UNSAFE_INTEGER));\r\n        }\r\n    }\r\n}\r\nfunction bool(numerator, denominator) {\r\n    if (denominator == null) {\r\n        if (numerator == null) {\r\n            return isLeastBitTrue;\r\n        }\r\n        return probability(numerator);\r\n    }\r\n    else {\r\n        if (numerator <= 0) {\r\n            return () => false;\r\n        }\r\n        else if (numerator >= denominator) {\r\n            return () => true;\r\n        }\r\n        return lessThan(integer(0, denominator - 1), numerator);\r\n    }\r\n}\n\n/**\r\n * Returns a Distribution that returns a random `Date` within the inclusive\r\n * range of [`start`, `end`].\r\n * @param start The minimum `Date`\r\n * @param end The maximum `Date`\r\n */\r\nfunction date(start, end) {\r\n    const distribution = integer(+start, +end);\r\n    return engine => new Date(distribution(engine));\r\n}\n\n/**\r\n * Returns a Distribution to return a value within [1, sideCount]\r\n * @param sideCount The number of sides of the die\r\n */\r\nfunction die(sideCount) {\r\n    return integer(1, sideCount);\r\n}\n\n/**\r\n * Returns a distribution that returns an array of length `dieCount` of values\r\n * within [1, `sideCount`]\r\n * @param sideCount The number of sides of each die\r\n * @param dieCount The number of dice\r\n */\r\nfunction dice(sideCount, dieCount) {\r\n    const distribution = die(sideCount);\r\n    return engine => {\r\n        const result = [];\r\n        for (let i = 0; i < dieCount; ++i) {\r\n            result.push(distribution(engine));\r\n        }\r\n        return result;\r\n    };\r\n}\n\n// tslint:disable:unified-signatures\r\n// has 2**x chars, for faster uniform distribution\r\nconst DEFAULT_STRING_POOL = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\r\nfunction string(pool = DEFAULT_STRING_POOL) {\r\n    const poolLength = pool.length;\r\n    if (!poolLength) {\r\n        throw new Error(\"Expected pool not to be an empty string\");\r\n    }\r\n    const distribution = integer(0, poolLength - 1);\r\n    return (engine, length) => {\r\n        let result = \"\";\r\n        for (let i = 0; i < length; ++i) {\r\n            const j = distribution(engine);\r\n            result += pool.charAt(j);\r\n        }\r\n        return result;\r\n    };\r\n}\n\nconst LOWER_HEX_POOL = \"0123456789abcdef\";\r\nconst lowerHex = string(LOWER_HEX_POOL);\r\nconst upperHex = string(LOWER_HEX_POOL.toUpperCase());\r\n/**\r\n * Returns a Distribution that returns a random string comprised of numbers\r\n * or the characters `abcdef` (or `ABCDEF`) of length `length`.\r\n * @param length Length of the result string\r\n * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n */\r\nfunction hex(uppercase) {\r\n    if (uppercase) {\r\n        return upperHex;\r\n    }\r\n    else {\r\n        return lowerHex;\r\n    }\r\n}\n\nfunction convertSliceArgument(value, length) {\r\n    if (value < 0) {\r\n        return Math.max(value + length, 0);\r\n    }\r\n    else {\r\n        return Math.min(value, length);\r\n    }\r\n}\n\nfunction toInteger(value) {\r\n    const num = +value;\r\n    if (num < 0) {\r\n        return Math.ceil(num);\r\n    }\r\n    else {\r\n        return Math.floor(num);\r\n    }\r\n}\n\n/**\r\n * Returns a random value within the provided `source` within the sliced\r\n * bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\r\nfunction pick(engine, source, begin, end) {\r\n    const length = source.length;\r\n    if (length === 0) {\r\n        throw new RangeError(\"Cannot pick from an empty array\");\r\n    }\r\n    const start = begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\r\n    const finish = end === void 0 ? length : convertSliceArgument(toInteger(end), length);\r\n    if (start >= finish) {\r\n        throw new RangeError(`Cannot pick between bounds ${start} and ${finish}`);\r\n    }\r\n    const distribution = integer(start, finish - 1);\r\n    return source[distribution(engine)];\r\n}\n\nfunction multiply(distribution, multiplier) {\r\n    if (multiplier === 1) {\r\n        return distribution;\r\n    }\r\n    else if (multiplier === 0) {\r\n        return () => 0;\r\n    }\r\n    else {\r\n        return engine => distribution(engine) * multiplier;\r\n    }\r\n}\n\n/**\r\n * Returns a floating-point value within [0.0, 1.0)\r\n */\r\nfunction realZeroToOneExclusive(engine) {\r\n    return uint53(engine) / SMALLEST_UNSAFE_INTEGER;\r\n}\n\n/**\r\n * Returns a floating-point value within [0.0, 1.0]\r\n */\r\nfunction realZeroToOneInclusive(engine) {\r\n    return uint53Full(engine) / SMALLEST_UNSAFE_INTEGER;\r\n}\n\n/**\r\n * Returns a floating-point value within [min, max) or [min, max]\r\n * @param min The minimum floating-point value, inclusive.\r\n * @param max The maximum floating-point value.\r\n * @param inclusive If true, `max` will be inclusive.\r\n */\r\nfunction real(min, max, inclusive = false) {\r\n    if (!isFinite(min)) {\r\n        throw new RangeError(\"Expected min to be a finite number\");\r\n    }\r\n    else if (!isFinite(max)) {\r\n        throw new RangeError(\"Expected max to be a finite number\");\r\n    }\r\n    return add(multiply(inclusive ? realZeroToOneInclusive : realZeroToOneExclusive, max - min), min);\r\n}\n\nconst sliceArray = Array.prototype.slice;\n\n/**\r\n * Shuffles an array in-place\r\n * @param engine The Engine to use when choosing random values\r\n * @param array The array to shuffle\r\n * @param downTo minimum index to shuffle. Only used internally.\r\n */\r\nfunction shuffle(engine, array, downTo = 0) {\r\n    const length = array.length;\r\n    if (length) {\r\n        for (let i = (length - 1) >>> 0; i > downTo; --i) {\r\n            const distribution = integer(0, i);\r\n            const j = distribution(engine);\r\n            if (i !== j) {\r\n                const tmp = array[i];\r\n                array[i] = array[j];\r\n                array[j] = tmp;\r\n            }\r\n        }\r\n    }\r\n    return array;\r\n}\n\n/**\r\n * From the population array, produce an array with sampleSize elements that\r\n * are randomly chosen without repeats.\r\n * @param engine The Engine to use when choosing random values\r\n * @param population An array that has items to choose a sample from\r\n * @param sampleSize The size of the result array\r\n */\r\nfunction sample(engine, population, sampleSize) {\r\n    if (sampleSize < 0 ||\r\n        sampleSize > population.length ||\r\n        !isFinite(sampleSize)) {\r\n        throw new RangeError(\"Expected sampleSize to be within 0 and the length of the population\");\r\n    }\r\n    if (sampleSize === 0) {\r\n        return [];\r\n    }\r\n    const clone = sliceArray.call(population);\r\n    const length = clone.length;\r\n    if (length === sampleSize) {\r\n        return shuffle(engine, clone, 0);\r\n    }\r\n    const tailLength = length - sampleSize;\r\n    return shuffle(engine, clone, tailLength - 1).slice(tailLength);\r\n}\n\nconst stringRepeat = (() => {\r\n    try {\r\n        if (\"x\".repeat(3) === \"xxx\") {\r\n            return (pattern, count) => pattern.repeat(count);\r\n        }\r\n    }\r\n    catch (_) {\r\n        // nothing to do here\r\n    }\r\n    return (pattern, count) => {\r\n        let result = \"\";\r\n        while (count > 0) {\r\n            if (count & 1) {\r\n                result += pattern;\r\n            }\r\n            count >>= 1;\r\n            pattern += pattern;\r\n        }\r\n        return result;\r\n    };\r\n})();\n\nfunction zeroPad(text, zeroCount) {\r\n    return stringRepeat(\"0\", zeroCount - text.length) + text;\r\n}\r\n/**\r\n * Returns a Universally Unique Identifier Version 4.\r\n *\r\n * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n */\r\nfunction uuid4(engine) {\r\n    const a = engine.next() >>> 0;\r\n    const b = engine.next() | 0;\r\n    const c = engine.next() | 0;\r\n    const d = engine.next() >>> 0;\r\n    return (zeroPad(a.toString(16), 8) +\r\n        \"-\" +\r\n        zeroPad((b & 0xffff).toString(16), 4) +\r\n        \"-\" +\r\n        zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\r\n        \"-\" +\r\n        zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\r\n        \"-\" +\r\n        zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\r\n        zeroPad(d.toString(16), 8));\r\n}\n\n/**\r\n * An int32-producing Engine that uses `Math.random()`\r\n */\r\nconst nativeMath = {\r\n    next() {\r\n        return (Math.random() * UINT32_SIZE) | 0;\r\n    }\r\n};\n\n// tslint:disable:unified-signatures\r\n/**\r\n * A wrapper around an Engine that provides easy-to-use methods for\r\n * producing values based on known distributions\r\n */\r\nclass Random {\r\n    /**\r\n     * Creates a new Random wrapper\r\n     * @param engine The engine to use (defaults to a `Math.random`-based implementation)\r\n     */\r\n    constructor(engine = nativeMath) {\r\n        this.engine = engine;\r\n    }\r\n    /**\r\n     * Returns a value within [-0x80000000, 0x7fffffff]\r\n     */\r\n    int32() {\r\n        return int32(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [0, 0xffffffff]\r\n     */\r\n    uint32() {\r\n        return uint32(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [0, 0x1fffffffffffff]\r\n     */\r\n    uint53() {\r\n        return uint53(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [0, 0x20000000000000]\r\n     */\r\n    uint53Full() {\r\n        return uint53Full(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n     */\r\n    int53() {\r\n        return int53(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n     */\r\n    int53Full() {\r\n        return int53Full(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [min, max]\r\n     * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n     * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n     */\r\n    integer(min, max) {\r\n        return integer(min, max)(this.engine);\r\n    }\r\n    /**\r\n     * Returns a floating-point value within [0.0, 1.0]\r\n     */\r\n    realZeroToOneInclusive() {\r\n        return realZeroToOneInclusive(this.engine);\r\n    }\r\n    /**\r\n     * Returns a floating-point value within [0.0, 1.0)\r\n     */\r\n    realZeroToOneExclusive() {\r\n        return realZeroToOneExclusive(this.engine);\r\n    }\r\n    /**\r\n     * Returns a floating-point value within [min, max) or [min, max]\r\n     * @param min The minimum floating-point value, inclusive.\r\n     * @param max The maximum floating-point value.\r\n     * @param inclusive If true, `max` will be inclusive.\r\n     */\r\n    real(min, max, inclusive = false) {\r\n        return real(min, max, inclusive)(this.engine);\r\n    }\r\n    bool(numerator, denominator) {\r\n        return bool(numerator, denominator)(this.engine);\r\n    }\r\n    /**\r\n     * Return a random value within the provided `source` within the sliced\r\n     * bounds of `begin` and `end`.\r\n     * @param source an array of items to pick from\r\n     * @param begin the beginning slice index (defaults to `0`)\r\n     * @param end the ending slice index (defaults to `source.length`)\r\n     */\r\n    pick(source, begin, end) {\r\n        return pick(this.engine, source, begin, end);\r\n    }\r\n    /**\r\n     * Shuffles an array in-place\r\n     * @param array The array to shuffle\r\n     */\r\n    shuffle(array) {\r\n        return shuffle(this.engine, array);\r\n    }\r\n    /**\r\n     * From the population array, returns an array with sampleSize elements that\r\n     * are randomly chosen without repeats.\r\n     * @param population An array that has items to choose a sample from\r\n     * @param sampleSize The size of the result array\r\n     */\r\n    sample(population, sampleSize) {\r\n        return sample(this.engine, population, sampleSize);\r\n    }\r\n    /**\r\n     * Returns a value within [1, sideCount]\r\n     * @param sideCount The number of sides of the die\r\n     */\r\n    die(sideCount) {\r\n        return die(sideCount)(this.engine);\r\n    }\r\n    /**\r\n     * Returns an array of length `dieCount` of values within [1, sideCount]\r\n     * @param sideCount The number of sides of each die\r\n     * @param dieCount The number of dice\r\n     */\r\n    dice(sideCount, dieCount) {\r\n        return dice(sideCount, dieCount)(this.engine);\r\n    }\r\n    /**\r\n     * Returns a Universally Unique Identifier Version 4.\r\n     *\r\n     * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n     */\r\n    uuid4() {\r\n        return uuid4(this.engine);\r\n    }\r\n    string(length, pool) {\r\n        return string(pool)(this.engine, length);\r\n    }\r\n    /**\r\n     * Returns a random string comprised of numbers or the characters `abcdef`\r\n     * (or `ABCDEF`) of length `length`.\r\n     * @param length Length of the result string\r\n     * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n     */\r\n    hex(length, uppercase) {\r\n        return hex(uppercase)(this.engine, length);\r\n    }\r\n    /**\r\n     * Returns a random `Date` within the inclusive range of [`start`, `end`].\r\n     * @param start The minimum `Date`\r\n     * @param end The maximum `Date`\r\n     */\r\n    date(start, end) {\r\n        return date(start, end)(this.engine);\r\n    }\r\n}\n\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\r\n */\r\nconst I32Array = (() => {\r\n    try {\r\n        const buffer = new ArrayBuffer(4);\r\n        const view = new Int32Array(buffer);\r\n        view[0] = INT32_SIZE;\r\n        if (view[0] === -INT32_SIZE) {\r\n            return Int32Array;\r\n        }\r\n    }\r\n    catch (_) {\r\n        // nothing to do here\r\n    }\r\n    return Array;\r\n})();\n\nlet data = null;\r\nconst COUNT = 128;\r\nlet index = COUNT;\r\n/**\r\n * An Engine that relies on the globally-available `crypto.getRandomValues`,\r\n * which is typically available in modern browsers.\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\r\n *\r\n * If unavailable or otherwise non-functioning, then `browserCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\r\nconst browserCrypto = {\r\n    next() {\r\n        if (index >= COUNT) {\r\n            if (data === null) {\r\n                data = new I32Array(COUNT);\r\n            }\r\n            crypto.getRandomValues(data);\r\n            index = 0;\r\n        }\r\n        return data[index++] | 0;\r\n    }\r\n};\n\n/**\r\n * Returns an array of random int32 values, based on current time\r\n * and a random number engine\r\n *\r\n * @param engine an Engine to pull random values from, default `nativeMath`\r\n * @param length the length of the Array, minimum 1, default 16\r\n */\r\nfunction createEntropy(engine = nativeMath, length = 16) {\r\n    const array = [];\r\n    array.push(new Date().getTime() | 0);\r\n    for (let i = 1; i < length; ++i) {\r\n        array[i] = engine.next() | 0;\r\n    }\r\n    return array;\r\n}\n\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\r\n */\r\nconst imul = (() => {\r\n    try {\r\n        if (Math.imul(UINT32_MAX, 5) === -5) {\r\n            return Math.imul;\r\n        }\r\n    }\r\n    catch (_) {\r\n        // nothing to do here\r\n    }\r\n    const UINT16_MAX = 0xffff;\r\n    return (a, b) => {\r\n        const ah = (a >>> 16) & UINT16_MAX;\r\n        const al = a & UINT16_MAX;\r\n        const bh = (b >>> 16) & UINT16_MAX;\r\n        const bl = b & UINT16_MAX;\r\n        // the shift by 0 fixes the sign on the high part\r\n        // the final |0 converts the unsigned value into a signed value\r\n        return (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;\r\n    };\r\n})();\n\nconst ARRAY_SIZE = 624;\r\nconst ARRAY_MAX = ARRAY_SIZE - 1;\r\nconst M = 397;\r\nconst ARRAY_SIZE_MINUS_M = ARRAY_SIZE - M;\r\nconst A = 0x9908b0df;\r\n/**\r\n * An Engine that is a pseudorandom number generator using the Mersenne\r\n * Twister algorithm based on the prime 2**19937 − 1\r\n *\r\n * See http://en.wikipedia.org/wiki/Mersenne_twister\r\n */\r\nclass MersenneTwister19937 {\r\n    /**\r\n     * MersenneTwister19937 should not be instantiated directly.\r\n     * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.\r\n     */\r\n    constructor() {\r\n        this.data = new I32Array(ARRAY_SIZE);\r\n        this.index = 0; // integer within [0, 624]\r\n        this.uses = 0;\r\n    }\r\n    /**\r\n     * Returns a MersenneTwister19937 seeded with an initial int32 value\r\n     * @param initial the initial seed value\r\n     */\r\n    static seed(initial) {\r\n        return new MersenneTwister19937().seed(initial);\r\n    }\r\n    /**\r\n     * Returns a MersenneTwister19937 seeded with zero or more int32 values\r\n     * @param source A series of int32 values\r\n     */\r\n    static seedWithArray(source) {\r\n        return new MersenneTwister19937().seedWithArray(source);\r\n    }\r\n    /**\r\n     * Returns a MersenneTwister19937 seeded with the current time and\r\n     * a series of natively-generated random values\r\n     */\r\n    static autoSeed() {\r\n        return MersenneTwister19937.seedWithArray(createEntropy());\r\n    }\r\n    /**\r\n     * Returns the next int32 value of the sequence\r\n     */\r\n    next() {\r\n        if ((this.index | 0) >= ARRAY_SIZE) {\r\n            refreshData(this.data);\r\n            this.index = 0;\r\n        }\r\n        const value = this.data[this.index];\r\n        this.index = (this.index + 1) | 0;\r\n        this.uses += 1;\r\n        return temper(value) | 0;\r\n    }\r\n    /**\r\n     * Returns the number of times that the Engine has been used.\r\n     *\r\n     * This can be provided to an unused MersenneTwister19937 with the same\r\n     * seed, bringing it to the exact point that was left off.\r\n     */\r\n    getUseCount() {\r\n        return this.uses;\r\n    }\r\n    /**\r\n     * Discards one or more items from the engine\r\n     * @param count The count of items to discard\r\n     */\r\n    discard(count) {\r\n        if (count <= 0) {\r\n            return this;\r\n        }\r\n        this.uses += count;\r\n        if ((this.index | 0) >= ARRAY_SIZE) {\r\n            refreshData(this.data);\r\n            this.index = 0;\r\n        }\r\n        while (count + this.index > ARRAY_SIZE) {\r\n            count -= ARRAY_SIZE - this.index;\r\n            refreshData(this.data);\r\n            this.index = 0;\r\n        }\r\n        this.index = (this.index + count) | 0;\r\n        return this;\r\n    }\r\n    seed(initial) {\r\n        let previous = 0;\r\n        this.data[0] = previous = initial | 0;\r\n        for (let i = 1; i < ARRAY_SIZE; i = (i + 1) | 0) {\r\n            this.data[i] = previous =\r\n                (imul(previous ^ (previous >>> 30), 0x6c078965) + i) | 0;\r\n        }\r\n        this.index = ARRAY_SIZE;\r\n        this.uses = 0;\r\n        return this;\r\n    }\r\n    seedWithArray(source) {\r\n        this.seed(0x012bd6aa);\r\n        seedWithArray(this.data, source);\r\n        return this;\r\n    }\r\n}\r\nfunction refreshData(data) {\r\n    let k = 0;\r\n    let tmp = 0;\r\n    for (; (k | 0) < ARRAY_SIZE_MINUS_M; k = (k + 1) | 0) {\r\n        tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\r\n        data[k] = data[(k + M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n    }\r\n    for (; (k | 0) < ARRAY_MAX; k = (k + 1) | 0) {\r\n        tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\r\n        data[k] =\r\n            data[(k - ARRAY_SIZE_MINUS_M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n    }\r\n    tmp = (data[ARRAY_MAX] & INT32_SIZE) | (data[0] & INT32_MAX);\r\n    data[ARRAY_MAX] = data[M - 1] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n}\r\nfunction temper(value) {\r\n    value ^= value >>> 11;\r\n    value ^= (value << 7) & 0x9d2c5680;\r\n    value ^= (value << 15) & 0xefc60000;\r\n    return value ^ (value >>> 18);\r\n}\r\nfunction seedWithArray(data, source) {\r\n    let i = 1;\r\n    let j = 0;\r\n    const sourceLength = source.length;\r\n    let k = Math.max(sourceLength, ARRAY_SIZE) | 0;\r\n    let previous = data[0] | 0;\r\n    for (; (k | 0) > 0; --k) {\r\n        data[i] = previous =\r\n            ((data[i] ^ imul(previous ^ (previous >>> 30), 0x0019660d)) +\r\n                (source[j] | 0) +\r\n                (j | 0)) |\r\n                0;\r\n        i = (i + 1) | 0;\r\n        ++j;\r\n        if ((i | 0) > ARRAY_MAX) {\r\n            data[0] = data[ARRAY_MAX];\r\n            i = 1;\r\n        }\r\n        if (j >= sourceLength) {\r\n            j = 0;\r\n        }\r\n    }\r\n    for (k = ARRAY_MAX; (k | 0) > 0; --k) {\r\n        data[i] = previous =\r\n            ((data[i] ^ imul(previous ^ (previous >>> 30), 0x5d588b65)) - i) | 0;\r\n        i = (i + 1) | 0;\r\n        if ((i | 0) > ARRAY_MAX) {\r\n            data[0] = data[ARRAY_MAX];\r\n            i = 1;\r\n        }\r\n    }\r\n    data[0] = INT32_SIZE;\r\n}\n\nlet data$1 = null;\r\nconst COUNT$1 = 128;\r\nlet index$1 = COUNT$1;\r\n/**\r\n * An Engine that relies on the node-available\r\n * `require('crypto').randomBytes`, which has been available since 0.58.\r\n *\r\n * See https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\r\n *\r\n * If unavailable or otherwise non-functioning, then `nodeCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\r\nconst nodeCrypto = {\r\n    next() {\r\n        if (index$1 >= COUNT$1) {\r\n            data$1 = new Int32Array(new Int8Array(require(\"crypto\").randomBytes(4 * COUNT$1)).buffer);\r\n            index$1 = 0;\r\n        }\r\n        return data$1[index$1++] | 0;\r\n    }\r\n};\n\n/**\r\n * Returns a Distribution to random value within the provided `source`\r\n * within the sliced bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\r\nfunction picker(source, begin, end) {\r\n    const clone = sliceArray.call(source, begin, end);\r\n    if (clone.length === 0) {\r\n        throw new RangeError(`Cannot pick from a source with no items`);\r\n    }\r\n    const distribution = integer(0, clone.length - 1);\r\n    return engine => clone[distribution(engine)];\r\n}\n\nexport { Random, browserCrypto, nativeMath, MersenneTwister19937, nodeCrypto, bool, date, dice, die, hex, int32, int53, int53Full, integer, pick, picker, real, realZeroToOneExclusive, realZeroToOneInclusive, sample, shuffle, string, uint32, uint53, uint53Full, uuid4, createEntropy };\n//# sourceMappingURL=random-js.esm.js.map\n","import * as Random from 'random-js';\nimport Matrix from 'ml-matrix';\n\nexport function checkFloat(n) {\n  return n > 0.0 && n <= 1.0;\n}\n\n\n/**\n * Select n with replacement elements on the training set and values, where n is the size of the training set.\n * @ignore\n * @param {Matrix} trainingSet\n * @param {Array} trainingValue\n * @param {number} seed - seed for the random selection, must be a 32-bit integer.\n * @return {object} with new X and y.\n */\nexport function examplesBaggingWithReplacement(\n  trainingSet,\n  trainingValue,\n  seed\n) {\n  var engine;\n  var distribution = Random.integer(0, trainingSet.rows - 1);\n  if (seed === undefined) {\n    engine = Random.MersenneTwister19937.autoSeed();\n  } else if (Number.isInteger(seed)) {\n    engine = Random.MersenneTwister19937.seed(seed);\n  } else {\n    throw new RangeError(\n      `Expected seed must be undefined or integer not ${seed}`\n    );\n  }\n\n  var Xr = new Array(trainingSet.rows);\n  var yr = new Array(trainingSet.rows);\n\n  for (var i = 0; i < trainingSet.rows; ++i) {\n    var index = distribution(engine);\n    Xr[i] = trainingSet.getRow(index);\n    yr[i] = trainingValue[index];\n  }\n\n  return {\n    X: new Matrix(Xr),\n    y: yr\n  };\n}\n\n/**\n * selects n features from the training set with or without replacement, returns the new training set and the indexes used.\n * @ignore\n * @param {Matrix} trainingSet\n * @param {number} n - features.\n * @param {boolean} replacement\n * @param {number} seed - seed for the random selection, must be a 32-bit integer.\n * @return {object}\n */\nexport function featureBagging(trainingSet, n, replacement, seed) {\n  if (trainingSet.columns < n) {\n    throw new RangeError(\n      'N should be less or equal to the number of columns of X'\n    );\n  }\n\n  var distribution = Random.integer(0, trainingSet.columns - 1);\n  var engine;\n  if (seed === undefined) {\n    engine = Random.MersenneTwister19937.autoSeed();\n  } else if (Number.isInteger(seed)) {\n    engine = Random.MersenneTwister19937.seed(seed);\n  } else {\n    throw new RangeError(\n      `Expected seed must be undefined or integer not ${seed}`\n    );\n  }\n\n  var toRet = new Matrix(trainingSet.rows, n);\n\n  if (replacement) {\n    var usedIndex = new Array(n);\n    for (var i = 0; i < n; ++i) {\n      var index = distribution(engine);\n      usedIndex[i] = index;\n      toRet.setColumn(i, trainingSet.getColumn(index));\n    }\n  } else {\n    usedIndex = new Set();\n    index = distribution(engine);\n    for (i = 0; i < n; ++i) {\n      while (usedIndex.has(index)) {\n        index = distribution(engine);\n      }\n      toRet.setColumn(i, trainingSet.getColumn(index));\n      usedIndex.add(index);\n    }\n    usedIndex = Array.from(usedIndex);\n  }\n\n  return {\n    X: toRet,\n    usedIndex: usedIndex\n  };\n}\n","import {\n  DecisionTreeClassifier as DTClassifier,\n  DecisionTreeRegression as DTRegression\n} from 'ml-cart';\nimport { Matrix, WrapperMatrix2D, MatrixTransposeView, MatrixColumnSelectionView } from 'ml-matrix';\n\nimport * as Utils from './utils';\n\n/**\n * @class RandomForestBase\n */\nexport class RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number|String} [options.maxFeatures] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement] - use replacement over the sample features.\n   * @param {number} [options.seed] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators] - number of estimator to use.\n   * @param {object} [options.treeOptions] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {boolean} [options.isClassifier] - boolean to check if is a classifier or regression model (used by subclasses).\n   * @param {boolean} [options.useSampleBagging] - use bagging over training samples.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.replacement = model.replacement;\n      this.maxFeatures = model.maxFeatures;\n      this.nEstimators = model.nEstimators;\n      this.treeOptions = model.treeOptions;\n      this.isClassifier = model.isClassifier;\n      this.seed = model.seed;\n      this.n = model.n;\n      this.indexes = model.indexes;\n      this.useSampleBagging = model.useSampleBagging;\n\n      var Estimator = this.isClassifier ? DTClassifier : DTRegression;\n      this.estimators = model.estimators.map((est) => Estimator.load(est));\n    } else {\n      this.replacement = options.replacement;\n      this.maxFeatures = options.maxFeatures;\n      this.nEstimators = options.nEstimators;\n      this.treeOptions = options.treeOptions;\n      this.isClassifier = options.isClassifier;\n      this.seed = options.seed;\n      this.useSampleBagging = options.useSampleBagging;\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and labels.\n   * @param {Matrix|Array} trainingSet\n   * @param {Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n\n    this.maxFeatures = this.maxFeatures || trainingSet.columns;\n\n    if (Utils.checkFloat(this.maxFeatures)) {\n      this.n = Math.floor(trainingSet.columns * this.maxFeatures);\n    } else if (Number.isInteger(this.maxFeatures)) {\n      if (this.maxFeatures > trainingSet.columns) {\n        throw new RangeError(\n          `The maxFeatures parameter should be less than ${trainingSet.columns}`\n        );\n      } else {\n        this.n = this.maxFeatures;\n      }\n    } else {\n      throw new RangeError(\n        `Cannot process the maxFeatures parameter ${this.maxFeatures}`\n      );\n    }\n\n    if (this.isClassifier) {\n      var Estimator = DTClassifier;\n    } else {\n      Estimator = DTRegression;\n    }\n\n    this.estimators = new Array(this.nEstimators);\n    this.indexes = new Array(this.nEstimators);\n\n    for (var i = 0; i < this.nEstimators; ++i) {\n      var res = this.useSampleBagging\n        ? Utils.examplesBaggingWithReplacement(\n          trainingSet,\n          trainingValues,\n          this.seed\n        )\n        : { X: trainingSet, y: trainingValues };\n      var X = res.X;\n      var y = res.y;\n\n      res = Utils.featureBagging(X, this.n, this.replacement, this.seed);\n      X = res.X;\n\n      this.indexes[i] = res.usedIndex;\n      this.estimators[i] = new Estimator(this.treeOptions);\n      this.estimators[i].train(X, y);\n    }\n  }\n\n  /**\n   * Method that returns the way the algorithm generates the predictions, for example, in classification\n   * you can return the mode of all predictions retrieved by the trees, or in case of regression you can\n   * use the mean or the median.\n   * @abstract\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction.\n   */\n  // eslint-disable-next-line no-unused-vars\n  selection(values) {\n    throw new Error(\"Abstract method 'selection' not implemented!\");\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Matrix|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    var predictionValues = new Array(this.nEstimators);\n    toPredict = Matrix.checkMatrix(toPredict);\n    for (var i = 0; i < this.nEstimators; ++i) {\n      var X = new MatrixColumnSelectionView(toPredict, this.indexes[i]); // get features for estimator\n      predictionValues[i] = this.estimators[i].predict(X);\n    }\n\n    predictionValues = new MatrixTransposeView(new WrapperMatrix2D(predictionValues));\n    var predictions = new Array(predictionValues.rows);\n    for (i = 0; i < predictionValues.rows; ++i) {\n      predictions[i] = this.selection(predictionValues.getRow(i));\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      indexes: this.indexes,\n      n: this.n,\n      replacement: this.replacement,\n      maxFeatures: this.maxFeatures,\n      nEstimators: this.nEstimators,\n      treeOptions: this.treeOptions,\n      isClassifier: this.isClassifier,\n      seed: this.seed,\n      estimators: this.estimators.map((est) => est.toJSON()),\n      useSampleBagging: this.useSampleBagging\n    };\n  }\n}\n","import { RandomForestBase } from './RandomForestBase';\n\nconst defaultOptions = {\n  maxFeatures: 1.0,\n  replacement: true,\n  nEstimators: 10,\n  seed: 42,\n  useSampleBagging: false\n};\n\n/**\n * @class RandomForestClassifier\n * @augments RandomForestBase\n */\nexport class RandomForestClassifier extends RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement=true] - use replacement over the sample features.\n   * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators=10] - number of estimator to use.\n   * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {boolean} [options.useSampleBagging=false] - use bagging over training samples.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      super(true, model.baseModel);\n    } else {\n      options = Object.assign({}, defaultOptions, options);\n      options.isClassifier = true;\n      super(options);\n    }\n  }\n\n  /**\n   * retrieve the prediction given the selection method.\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction\n   */\n  selection(values) {\n    return mode(values);\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    var baseModel = super.toJSON();\n    return {\n      baseModel: baseModel,\n      name: 'RFClassifier'\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {RandomForestClassifier}\n   */\n  static load(model) {\n    if (model.name !== 'RFClassifier') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new RandomForestClassifier(true, model);\n  }\n}\n\n/**\n * Return the most repeated element on the array.\n * @param {Array} arr\n * @return {number} mode\n */\nfunction mode(arr) {\n  return arr\n    .sort(\n      (a, b) =>\n        arr.filter((v) => v === a).length - arr.filter((v) => v === b).length\n    )\n    .pop();\n}\n","(function(){function a(d){for(var e=0,f=d.length-1,g=void 0,h=void 0,i=void 0,j=c(e,f);!0;){if(f<=e)return d[j];if(f==e+1)return d[e]>d[f]&&b(d,e,f),d[j];for(g=c(e,f),d[g]>d[f]&&b(d,g,f),d[e]>d[f]&&b(d,e,f),d[g]>d[e]&&b(d,g,e),b(d,g,e+1),h=e+1,i=f;!0;){do h++;while(d[e]>d[h]);do i--;while(d[i]>d[e]);if(i<h)break;b(d,h,i)}b(d,e,i),i<=j&&(e=h),i>=j&&(f=i-1)}}var b=function b(d,e,f){var _ref;return _ref=[d[f],d[e]],d[e]=_ref[0],d[f]=_ref[1],_ref},c=function c(d,e){return~~((d+e)/2)};'undefined'!=typeof module&&module.exports?module.exports=a:window.median=a})();\n","import quickSelectMedian from 'median-quickselect';\nimport isArray from 'is-any-array';\n\n/**\n * Computes the median of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction median(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  return quickSelectMedian(input.slice());\n}\n\nexport default median;\n","import arrayMean from 'ml-array-mean';\nimport arrayMedian from 'ml-array-median';\n\nimport { RandomForestBase } from './RandomForestBase';\n\nconst selectionMethods = {\n  mean: arrayMean,\n  median: arrayMedian\n};\n\nconst defaultOptions = {\n  maxFeatures: 1.0,\n  replacement: false,\n  nEstimators: 10,\n  treeOptions: {},\n  selectionMethod: 'mean',\n  seed: 42,\n  useSampleBagging: false\n};\n\n/**\n * @class RandomForestRegression\n * @augments RandomForestBase\n */\nexport class RandomForestRegression extends RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement=true] - use replacement over the sample features.\n   * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators=10] - number of estimator to use.\n   * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {string} [options.selectionMethod=\"mean\"] - the way to calculate the prediction from estimators, \"mean\" and \"median\" are supported.\n   * @param {boolean} [options.useSampleBagging=false] - use bagging over training samples.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      super(true, model.baseModel);\n      this.selectionMethod = model.selectionMethod;\n    } else {\n      options = Object.assign({}, defaultOptions, options);\n\n      if (\n        !(\n          options.selectionMethod === 'mean' ||\n          options.selectionMethod === 'median'\n        )\n      ) {\n        throw new RangeError(\n          `Unsupported selection method ${options.selectionMethod}`\n        );\n      }\n\n      options.isClassifier = false;\n\n      super(options);\n      this.selectionMethod = options.selectionMethod;\n    }\n  }\n\n  /**\n   * retrieve the prediction given the selection method.\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction\n   */\n  selection(values) {\n    return selectionMethods[this.selectionMethod](values);\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    var baseModel = super.toJSON();\n    return {\n      baseModel: baseModel,\n      selectionMethod: this.selectionMethod,\n      name: 'RFRegression'\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {RandomForestRegression}\n   */\n  static load(model) {\n    if (model.name !== 'RFRegression') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new RandomForestRegression(true, model);\n  }\n}\n","import { Matrix, MatrixTransposeView, EVD, SVD, NIPALS } from 'ml-matrix';\n\n/**\n * Creates new PCA (Principal Component Analysis) from the dataset\n * @param {Matrix} dataset - dataset or covariance matrix.\n * @param {Object} [options]\n * @param {boolean} [options.isCovarianceMatrix=false] - true if the dataset is a covariance matrix.\n * @param {boolean} [options.method='SVD'] - select which method to use: SVD (default), covarianceMatrirx or NIPALS.\n * @param {boolean} [options.nCompNIPALS=2] - number of components to be computed with NIPALS.\n * @param {boolean} [options.center=true] - should the data be centered (subtract the mean).\n * @param {boolean} [options.scale=false] - should the data be scaled (divide by the standard deviation).\n * @param {boolean} [options.ignoreZeroVariance=false] - ignore columns with zero variance if `scale` is `true`.\n * */\nexport class PCA {\n  constructor(dataset, options = {}) {\n    if (dataset === true) {\n      const model = options;\n      this.center = model.center;\n      this.scale = model.scale;\n      this.means = model.means;\n      this.stdevs = model.stdevs;\n      this.U = Matrix.checkMatrix(model.U);\n      this.S = model.S;\n      this.R = model.R;\n      this.excludedFeatures = model.excludedFeatures;\n      return;\n    }\n\n    dataset = new Matrix(dataset);\n\n    const {\n      isCovarianceMatrix = false,\n      method = 'SVD',\n      nCompNIPALS = 2,\n      center = true,\n      scale = false,\n      ignoreZeroVariance = false,\n    } = options;\n\n    this.center = center;\n    this.scale = scale;\n    this.means = null;\n    this.stdevs = null;\n    this.excludedFeatures = [];\n\n    if (isCovarianceMatrix) {\n      // User provided a covariance matrix instead of dataset.\n      this._computeFromCovarianceMatrix(dataset);\n      return;\n    }\n\n    this._adjust(dataset, ignoreZeroVariance);\n    switch (method) {\n      case 'covarianceMatrix': {\n        // User provided a dataset but wants us to compute and use the covariance matrix.\n        const covarianceMatrix = new MatrixTransposeView(dataset)\n          .mmul(dataset)\n          .div(dataset.rows - 1);\n        this._computeFromCovarianceMatrix(covarianceMatrix);\n        break;\n      }\n      case 'NIPALS': {\n        this._computeWithNIPALS(dataset, nCompNIPALS);\n        break;\n      }\n      case 'SVD': {\n        const svd = new SVD(dataset, {\n          computeLeftSingularVectors: false,\n          computeRightSingularVectors: true,\n          autoTranspose: true,\n        });\n\n        this.U = svd.rightSingularVectors;\n\n        const singularValues = svd.diagonal;\n        const eigenvalues = [];\n        for (const singularValue of singularValues) {\n          eigenvalues.push((singularValue * singularValue) / (dataset.rows - 1));\n        }\n        this.S = eigenvalues;\n        break;\n      }\n      default: {\n        throw new Error(`unknown method: ${method}`);\n      }\n    }\n  }\n\n  /**\n   * Load a PCA model from JSON\n   * @param {Object} model\n   * @return {PCA}\n   */\n  static load(model) {\n    if (typeof model.name !== 'string') {\n      throw new TypeError('model must have a name property');\n    }\n    if (model.name !== 'PCA') {\n      throw new RangeError(`invalid model: ${model.name}`);\n    }\n    return new PCA(true, model);\n  }\n\n  /**\n   * Project the dataset into the PCA space\n   * @param {Matrix} dataset\n   * @param {Object} options\n   * @return {Matrix} dataset projected in the PCA space\n   */\n  predict(dataset, options = {}) {\n    const { nComponents = this.U.columns } = options;\n    dataset = new Matrix(dataset);\n    if (this.center) {\n      dataset.subRowVector(this.means);\n      if (this.scale) {\n        for (let i of this.excludedFeatures) {\n          dataset.removeColumn(i);\n        }\n        dataset.divRowVector(this.stdevs);\n      }\n    }\n    var predictions = dataset.mmul(this.U);\n    return predictions.subMatrix(0, predictions.rows - 1, 0, nComponents - 1);\n  }\n\n  /**\n   * Calculates the inverse PCA transform\n   * @param {Matrix} dataset\n   * @return {Matrix} dataset projected in the PCA space\n   */\n  invert(dataset) {\n    dataset = Matrix.checkMatrix(dataset);\n\n    var inverse = dataset.mmul(this.U.transpose());\n\n    if (this.center) {\n      if (this.scale) {\n        inverse.mulRowVector(this.stdevs);\n      }\n      inverse.addRowVector(this.means);\n    }\n\n    return inverse;\n  }\n\n\n  /**\n   * Returns the proportion of variance for each component\n   * @return {[number]}\n   */\n  getExplainedVariance() {\n    var sum = 0;\n    for (const s of this.S) {\n      sum += s;\n    }\n    return this.S.map((value) => value / sum);\n  }\n\n  /**\n   * Returns the cumulative proportion of variance\n   * @return {[number]}\n   */\n  getCumulativeVariance() {\n    var explained = this.getExplainedVariance();\n    for (var i = 1; i < explained.length; i++) {\n      explained[i] += explained[i - 1];\n    }\n    return explained;\n  }\n\n  /**\n   * Returns the Eigenvectors of the covariance matrix\n   * @returns {Matrix}\n   */\n  getEigenvectors() {\n    return this.U;\n  }\n\n  /**\n   * Returns the Eigenvalues (on the diagonal)\n   * @returns {[number]}\n   */\n  getEigenvalues() {\n    return this.S;\n  }\n\n  /**\n   * Returns the standard deviations of the principal components\n   * @returns {[number]}\n   */\n  getStandardDeviations() {\n    return this.S.map((x) => Math.sqrt(x));\n  }\n\n  /**\n   * Returns the loadings matrix\n   * @return {Matrix}\n   */\n  getLoadings() {\n    return this.U.transpose();\n  }\n\n  /**\n   * Export the current model to a JSON object\n   * @return {Object} model\n   */\n  toJSON() {\n    return {\n      name: 'PCA',\n      center: this.center,\n      scale: this.scale,\n      means: this.means,\n      stdevs: this.stdevs,\n      U: this.U,\n      S: this.S,\n    };\n  }\n\n  _adjust(dataset, ignoreZeroVariance) {\n    if (this.center) {\n      const mean = dataset.mean('column');\n      const stdevs = this.scale\n        ? dataset.standardDeviation('column', { mean })\n        : null;\n      this.means = mean;\n      dataset.subRowVector(mean);\n      if (this.scale) {\n        for (let i = 0; i < stdevs.length; i++) {\n          if (stdevs[i] === 0) {\n            if (ignoreZeroVariance) {\n              dataset.removeColumn(i);\n              stdevs.splice(i, 1);\n              this.excludedFeatures.push(i);\n              i--;\n            } else {\n              throw new RangeError(\n                `Cannot scale the dataset (standard deviation is zero at index ${i}`,\n              );\n            }\n          }\n        }\n        this.stdevs = stdevs;\n        dataset.divRowVector(stdevs);\n      }\n    }\n  }\n\n  _computeFromCovarianceMatrix(dataset) {\n    const evd = new EVD(dataset, { assumeSymmetric: true });\n    this.U = evd.eigenvectorMatrix;\n    this.U.flipRows();\n    this.S = evd.realEigenvalues;\n    this.S.reverse();\n  }\n\n  _computeWithNIPALS(dataset, nCompNIPALS) {\n    this.U = new Matrix(nCompNIPALS, dataset.columns);\n    this.S = [];\n\n    let x = dataset;\n    for (let i = 0; i < nCompNIPALS; i++) {\n      let dc = new NIPALS(x);\n\n      this.U.setRow(i, dc.w.transpose());\n      this.S.push(Math.pow(dc.s.get(0, 0), 2));\n\n      x = dc.xResidual;\n    }\n    this.U = this.U.transpose(); // to be compatible with API\n  }\n}\n","export function squaredEuclidean(p, q) {\r\n    let d = 0;\r\n    for (let i = 0; i < p.length; i++) {\r\n        d += (p[i] - q[i]) * (p[i] - q[i]);\r\n    }\r\n    return d;\r\n}\r\nexport function euclidean(p, q) {\r\n    return Math.sqrt(squaredEuclidean(p, q));\r\n}\r\n","/**\n * Computes a distance/similarity matrix given an array of data and a distance/similarity function.\n * @param {Array} data An array of data\n * @param {function} distanceFn  A function that accepts two arguments and computes a distance/similarity between them\n * @return {Array<Array>} The distance/similarity matrix. The matrix is square and has a size equal to the length of\n * the data array\n */\nexport default function distanceMatrix(data, distanceFn) {\n  const result = getMatrix(data.length);\n\n  // Compute upper distance matrix\n  for (let i = 0; i < data.length; i++) {\n    for (let j = 0; j <= i; j++) {\n      result[i][j] = distanceFn(data[i], data[j]);\n      result[j][i] = result[i][j];\n    }\n  }\n\n  return result;\n}\n\nfunction getMatrix(size) {\n  const matrix = [];\n  for (let i = 0; i < size; i++) {\n    const row = [];\n    matrix.push(row);\n    for (let j = 0; j < size; j++) {\n      row.push(0);\n    }\n  }\n  return matrix;\n}\n","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n","module.exports = require('./lib/heap');\n","import Heap from 'heap';\n\nexport default class Cluster {\n  constructor() {\n    this.children = [];\n    this.height = 0;\n    this.size = 1;\n    this.index = -1;\n    this.isLeaf = false;\n  }\n\n  /**\n   * Creates an array of clusters where the maximum height is smaller than the threshold\n   * @param {number} threshold\n   * @return {Array<Cluster>}\n   */\n  cut(threshold) {\n    if (typeof threshold !== 'number') {\n      throw new TypeError('threshold must be a number');\n    }\n    if (threshold < 0) {\n      throw new RangeError('threshold must be a positive number');\n    }\n    let list = [this];\n    const ans = [];\n    while (list.length > 0) {\n      const aux = list.shift();\n      if (threshold >= aux.height) {\n        ans.push(aux);\n      } else {\n        list = list.concat(aux.children);\n      }\n    }\n    return ans;\n  }\n\n  /**\n   * Merge the leaves in the minimum way to have `groups` number of clusters.\n   * @param {number} groups - Them number of children the first level of the tree should have.\n   * @return {Cluster}\n   */\n  group(groups) {\n    if (!Number.isInteger(groups) || groups < 1) {\n      throw new RangeError('groups must be a positive integer');\n    }\n\n    const heap = new Heap((a, b) => {\n      return b.height - a.height;\n    });\n\n    heap.push(this);\n\n    while (heap.size() < groups) {\n      var first = heap.pop();\n      if (first.children.length === 0) {\n        break;\n      }\n      first.children.forEach((child) => heap.push(child));\n    }\n\n    var root = new Cluster();\n    root.children = heap.toArray();\n    root.height = this.height;\n\n    return root;\n  }\n\n  /**\n   * Traverses the tree depth-first and calls the provided callback with each individual node\n   * @param {function} cb - The callback to be called on each node encounter\n   */\n  traverse(cb) {\n    function visit(root, callback) {\n      callback(root);\n      if (root.children) {\n        for (const child of root.children) {\n          visit(child, callback);\n        }\n      }\n    }\n    visit(this, cb);\n  }\n\n  /**\n   * Returns a list of indices for all the leaves of this cluster.\n   * The list is ordered in such a way that a dendrogram could be drawn without crossing branches.\n   * @returns {Array<number>}\n   */\n  indices() {\n    const result = [];\n    this.traverse((cluster) => {\n      if (cluster.isLeaf) {\n        result.push(cluster.index);\n      }\n    });\n    return result;\n  }\n}\n","import { euclidean } from 'ml-distance-euclidean';\nimport getDistanceMatrix from 'ml-distance-matrix';\nimport { Matrix } from 'ml-matrix';\n\nimport Cluster from './Cluster';\n\nfunction singleLink(dKI, dKJ) {\n  return Math.min(dKI, dKJ);\n}\n\nfunction completeLink(dKI, dKJ) {\n  return Math.max(dKI, dKJ);\n}\n\nfunction averageLink(dKI, dKJ, dIJ, ni, nj) {\n  const ai = ni / (ni + nj);\n  const aj = nj / (ni + nj);\n  return ai * dKI + aj * dKJ;\n}\n\nfunction weightedAverageLink(dKI, dKJ) {\n  return (dKI + dKJ) / 2;\n}\n\nfunction centroidLink(dKI, dKJ, dIJ, ni, nj) {\n  const ai = ni / (ni + nj);\n  const aj = nj / (ni + nj);\n  const b = -(ni * nj) / (ni + nj) ** 2;\n  return ai * dKI + aj * dKJ + b * dIJ;\n}\n\nfunction medianLink(dKI, dKJ, dIJ) {\n  return dKI / 2 + dKJ / 2 - dIJ / 4;\n}\n\nfunction wardLink(dKI, dKJ, dIJ, ni, nj, nk) {\n  const ai = (ni + nk) / (ni + nj + nk);\n  const aj = (nj + nk) / (ni + nj + nk);\n  const b = -nk / (ni + nj + nk);\n  return ai * dKI + aj * dKJ + b * dIJ;\n}\n\nfunction wardLink2(dKI, dKJ, dIJ, ni, nj, nk) {\n  const ai = (ni + nk) / (ni + nj + nk);\n  const aj = (nj + nk) / (ni + nj + nk);\n  const b = -nk / (ni + nj + nk);\n  return Math.sqrt(ai * dKI * dKI + aj * dKJ * dKJ + b * dIJ * dIJ);\n}\n\n/**\n * Continuously merge nodes that have the least dissimilarity\n * @param {Array<Array<number>>} data - Array of points to be clustered\n * @param {object} [options]\n * @param {Function} [options.distanceFunction]\n * @param {string} [options.method] - Default: `'complete'`\n * @param {boolean} [options.isDistanceMatrix] - Is the input already a distance matrix?\n * @constructor\n */\nexport function agnes(data, options = {}) {\n  const {\n    distanceFunction = euclidean,\n    method = 'complete',\n    isDistanceMatrix = false,\n  } = options;\n\n  let updateFunc;\n  if (!isDistanceMatrix) {\n    data = getDistanceMatrix(data, distanceFunction);\n  }\n  let distanceMatrix = new Matrix(data);\n  const numLeaves = distanceMatrix.rows;\n\n  // allows to use a string or a given function\n  if (typeof method === 'string') {\n    switch (method.toLowerCase()) {\n      case 'single':\n        updateFunc = singleLink;\n        break;\n      case 'complete':\n        updateFunc = completeLink;\n        break;\n      case 'average':\n      case 'upgma':\n        updateFunc = averageLink;\n        break;\n      case 'wpgma':\n        updateFunc = weightedAverageLink;\n        break;\n      case 'centroid':\n      case 'upgmc':\n        updateFunc = centroidLink;\n        break;\n      case 'median':\n      case 'wpgmc':\n        updateFunc = medianLink;\n        break;\n      case 'ward':\n        updateFunc = wardLink;\n        break;\n      case 'ward2':\n        updateFunc = wardLink2;\n        break;\n      default:\n        throw new RangeError(`unknown clustering method: ${method}`);\n    }\n  } else if (typeof method !== 'function') {\n    throw new TypeError('method must be a string or function');\n  }\n\n  let clusters = [];\n  for (let i = 0; i < numLeaves; i++) {\n    const cluster = new Cluster();\n    cluster.isLeaf = true;\n    cluster.index = i;\n    clusters.push(cluster);\n  }\n\n  for (let n = 0; n < numLeaves - 1; n++) {\n    const [row, column, distance] = getSmallestDistance(distanceMatrix);\n    const cluster1 = clusters[row];\n    const cluster2 = clusters[column];\n    const newCluster = new Cluster();\n    newCluster.size = cluster1.size + cluster2.size;\n    newCluster.children.push(cluster1, cluster2);\n    newCluster.height = distance;\n\n    const newClusters = [newCluster];\n    const newDistanceMatrix = new Matrix(\n      distanceMatrix.rows - 1,\n      distanceMatrix.rows - 1,\n    );\n    const previous = (newIndex) =>\n      getPreviousIndex(newIndex, Math.min(row, column), Math.max(row, column));\n\n    for (let i = 1; i < newDistanceMatrix.rows; i++) {\n      const prevI = previous(i);\n      const prevICluster = clusters[prevI];\n      newClusters.push(prevICluster);\n      for (let j = 0; j < i; j++) {\n        if (j === 0) {\n          const dKI = distanceMatrix.get(row, prevI);\n          const dKJ = distanceMatrix.get(prevI, column);\n          const val = updateFunc(\n            dKI,\n            dKJ,\n            distance,\n            cluster1.size,\n            cluster2.size,\n            prevICluster.size,\n          );\n          newDistanceMatrix.set(i, j, val);\n          newDistanceMatrix.set(j, i, val);\n        } else {\n          // Just copy distance from previous matrix\n          const val = distanceMatrix.get(prevI, previous(j));\n          newDistanceMatrix.set(i, j, val);\n          newDistanceMatrix.set(j, i, val);\n        }\n      }\n    }\n\n    clusters = newClusters;\n    distanceMatrix = newDistanceMatrix;\n  }\n\n  return clusters[0];\n}\n\nfunction getSmallestDistance(distance) {\n  let smallest = Infinity;\n  let smallestI = 0;\n  let smallestJ = 0;\n  for (let i = 1; i < distance.rows; i++) {\n    for (let j = 0; j < i; j++) {\n      if (distance.get(i, j) < smallest) {\n        smallest = distance.get(i, j);\n        smallestI = i;\n        smallestJ = j;\n      }\n    }\n  }\n  return [smallestI, smallestJ, smallest];\n}\n\nfunction getPreviousIndex(newIndex, prev1, prev2) {\n  newIndex -= 1;\n  if (newIndex >= prev1) newIndex++;\n  if (newIndex >= prev2) newIndex++;\n  return newIndex;\n}\n","'use strict';\nimport { squaredEuclidean } from 'ml-distance-euclidean';\nconst defaultOptions = {\n    distanceFunction: squaredEuclidean\n};\nexport default function nearestVector(listVectors, vector, options = defaultOptions) {\n    const distanceFunction = options.distanceFunction || defaultOptions.distanceFunction;\n    const similarityFunction = options.similarityFunction || defaultOptions.similarityFunction;\n    let vectorIndex = -1;\n    if (typeof similarityFunction === 'function') {\n        // maximum similarity\n        let maxSim = Number.MIN_VALUE;\n        for (let j = 0; j < listVectors.length; j++) {\n            const sim = similarityFunction(vector, listVectors[j]);\n            if (sim > maxSim) {\n                maxSim = sim;\n                vectorIndex = j;\n            }\n        }\n    }\n    else if (typeof distanceFunction === 'function') {\n        // minimum distance\n        let minDist = Number.MAX_VALUE;\n        for (let i = 0; i < listVectors.length; i++) {\n            const dist = distanceFunction(vector, listVectors[i]);\n            if (dist < minDist) {\n                minDist = dist;\n                vectorIndex = i;\n            }\n        }\n    }\n    else {\n        throw new Error(\"A similarity or distance function it's required\");\n    }\n    return vectorIndex;\n}\nexport function findNearestVector(vectorList, vector, options = defaultOptions) {\n    const index = nearestVector(vectorList, vector, options);\n    return vectorList[index];\n}\n","import nearestVector from 'ml-nearest-vector';\n\n/**\n * Calculates the distance matrix for a given array of points\n * @ignore\n * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n * @param {function} distance - Distance function to use between the points\n * @return {Array<Array<number>>} - matrix with the distance values\n */\nexport function calculateDistanceMatrix(data, distance) {\n  var distanceMatrix = new Array(data.length);\n  for (var i = 0; i < data.length; ++i) {\n    for (var j = i; j < data.length; ++j) {\n      if (!distanceMatrix[i]) {\n        distanceMatrix[i] = new Array(data.length);\n      }\n      if (!distanceMatrix[j]) {\n        distanceMatrix[j] = new Array(data.length);\n      }\n      const dist = distance(data[i], data[j]);\n      distanceMatrix[i][j] = dist;\n      distanceMatrix[j][i] = dist;\n    }\n  }\n  return distanceMatrix;\n}\n\n/**\n * Updates the cluster identifier based in the new data\n * @ignore\n * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n * @param {Array<Array<number>>} centers - the K centers in format [x,y,z,...]\n * @param {Array <number>} clusterID - the cluster identifier for each data dot\n * @param {function} distance - Distance function to use between the points\n * @return {Array} the cluster identifier for each data dot\n */\nexport function updateClusterID(data, centers, clusterID, distance) {\n  for (var i = 0; i < data.length; i++) {\n    clusterID[i] = nearestVector(centers, data[i], {\n      distanceFunction: distance\n    });\n  }\n  return clusterID;\n}\n\n/**\n * Update the center values based in the new configurations of the clusters\n * @ignore\n * @param {Array<Array<number>>} prevCenters - Centroids from the previous iteration\n * @param {Array <Array <number>>} data - the [x,y,z,...] points to cluster\n * @param {Array <number>} clusterID - the cluster identifier for each data dot\n * @param {number} K - Number of clusters\n * @return {Array} he K centers in format [x,y,z,...]\n */\nexport function updateCenters(prevCenters, data, clusterID, K) {\n  const nDim = data[0].length;\n\n  // copy previous centers\n  var centers = new Array(K);\n  var centersLen = new Array(K);\n  for (var i = 0; i < K; i++) {\n    centers[i] = new Array(nDim);\n    centersLen[i] = 0;\n    for (var j = 0; j < nDim; j++) {\n      centers[i][j] = 0;\n    }\n  }\n\n  // add the value for all dimensions of the point\n  for (var l = 0; l < data.length; l++) {\n    centersLen[clusterID[l]]++;\n    for (var dim = 0; dim < nDim; dim++) {\n      centers[clusterID[l]][dim] += data[l][dim];\n    }\n  }\n\n  // divides by length\n  for (var id = 0; id < K; id++) {\n    for (var d = 0; d < nDim; d++) {\n      if (centersLen[id]) {\n        centers[id][d] /= centersLen[id];\n      } else {\n        centers[id][d] = prevCenters[id][d];\n      }\n    }\n  }\n  return centers;\n}\n\n/**\n * The centers have moved more than the tolerance value?\n * @ignore\n * @param {Array<Array<number>>} centers - the K centers in format [x,y,z,...]\n * @param {Array<Array<number>>} oldCenters - the K old centers in format [x,y,z,...]\n * @param {function} distanceFunction - Distance function to use between the points\n * @param {number} tolerance - Allowed distance for the centroids to move\n * @return {boolean}\n */\nexport function hasConverged(centers, oldCenters, distanceFunction, tolerance) {\n  for (var i = 0; i < centers.length; i++) {\n    if (distanceFunction(centers[i], oldCenters[i]) > tolerance) {\n      return false;\n    }\n  }\n  return true;\n}\n","const LOOP = 8;\nconst FLOAT_MUL = 1 / 16777216;\nconst sh1 = 15;\nconst sh2 = 18;\nconst sh3 = 11;\nfunction multiply_uint32(n, m) {\n    n >>>= 0;\n    m >>>= 0;\n    const nlo = n & 0xffff;\n    const nhi = n - nlo;\n    return (((nhi * m) >>> 0) + nlo * m) >>> 0;\n}\nexport default class XSadd {\n    constructor(seed = Date.now()) {\n        this.state = new Uint32Array(4);\n        this.init(seed);\n        this.random = this.getFloat.bind(this);\n    }\n    /**\n     * Returns a 32-bit integer r (0 <= r < 2^32)\n     */\n    getUint32() {\n        this.nextState();\n        return (this.state[3] + this.state[2]) >>> 0;\n    }\n    /**\n     * Returns a floating point number r (0.0 <= r < 1.0)\n     */\n    getFloat() {\n        return (this.getUint32() >>> 8) * FLOAT_MUL;\n    }\n    init(seed) {\n        if (!Number.isInteger(seed)) {\n            throw new TypeError('seed must be an integer');\n        }\n        this.state[0] = seed;\n        this.state[1] = 0;\n        this.state[2] = 0;\n        this.state[3] = 0;\n        for (let i = 1; i < LOOP; i++) {\n            this.state[i & 3] ^=\n                (i +\n                    multiply_uint32(1812433253, this.state[(i - 1) & 3] ^ ((this.state[(i - 1) & 3] >>> 30) >>> 0))) >>>\n                    0;\n        }\n        this.periodCertification();\n        for (let i = 0; i < LOOP; i++) {\n            this.nextState();\n        }\n    }\n    periodCertification() {\n        if (this.state[0] === 0 &&\n            this.state[1] === 0 &&\n            this.state[2] === 0 &&\n            this.state[3] === 0) {\n            this.state[0] = 88; // X\n            this.state[1] = 83; // S\n            this.state[2] = 65; // A\n            this.state[3] = 68; // D\n        }\n    }\n    nextState() {\n        let t = this.state[0];\n        t ^= t << sh1;\n        t ^= t >>> sh2;\n        t ^= this.state[3] << sh3;\n        this.state[0] = this.state[1];\n        this.state[1] = this.state[2];\n        this.state[2] = this.state[3];\n        this.state[3] = t;\n    }\n}\n","const PROB_TOLERANCE = 0.00000001;\nfunction randomChoice(values, options = {}, random = Math.random) {\n    const { size = 1, replace = false, probabilities } = options;\n    let valuesArr;\n    let cumSum;\n    if (typeof values === 'number') {\n        valuesArr = getArray(values);\n    }\n    else {\n        valuesArr = values.slice();\n    }\n    if (probabilities) {\n        if (!replace) {\n            throw new Error('choice with probabilities and no replacement is not implemented');\n        }\n        // check input is sane\n        if (probabilities.length !== valuesArr.length) {\n            throw new Error('the length of probabilities option should be equal to the number of choices');\n        }\n        cumSum = [probabilities[0]];\n        for (let i = 1; i < probabilities.length; i++) {\n            cumSum[i] = cumSum[i - 1] + probabilities[i];\n        }\n        if (Math.abs(1 - cumSum[cumSum.length - 1]) > PROB_TOLERANCE) {\n            throw new Error(`probabilities should sum to 1, but instead sums to ${cumSum[cumSum.length - 1]}`);\n        }\n    }\n    if (replace === false && size > valuesArr.length) {\n        throw new Error('size option is too large');\n    }\n    const result = [];\n    for (let i = 0; i < size; i++) {\n        const index = randomIndex(valuesArr.length, random, cumSum);\n        result.push(valuesArr[index]);\n        if (!replace) {\n            valuesArr.splice(index, 1);\n        }\n    }\n    return result;\n}\nfunction getArray(n) {\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(i);\n    }\n    return arr;\n}\nfunction randomIndex(n, random, cumSum) {\n    const rand = random();\n    if (!cumSum) {\n        return Math.floor(rand * n);\n    }\n    else {\n        let idx = 0;\n        while (rand > cumSum[idx]) {\n            idx++;\n        }\n        return idx;\n    }\n}\nexport default randomChoice;\n","// tslint:disable-next-line\nimport XSAdd from 'ml-xsadd';\nimport choice from './choice';\n/**\n * @classdesc Random class\n */\nexport default class Random {\n    /**\n     * @param [seedOrRandom=Math.random] - Control the random number generator used by the Random class instance. Pass a random number generator function with a uniform distribution over the half-open interval [0, 1[. If seed will pass it to ml-xsadd to create a seeded random number generator. If undefined will use Math.random.\n     */\n    constructor(seedOrRandom = Math.random) {\n        if (typeof seedOrRandom === 'number') {\n            const xsadd = new XSAdd(seedOrRandom);\n            this.randomGenerator = xsadd.random;\n        }\n        else {\n            this.randomGenerator = seedOrRandom;\n        }\n    }\n    choice(values, options) {\n        if (typeof values === 'number') {\n            return choice(values, options, this.randomGenerator);\n        }\n        return choice(values, options, this.randomGenerator);\n    }\n    /**\n     * Draw a random number from a uniform distribution on [0,1)\n     * @return The random number\n     */\n    random() {\n        return this.randomGenerator();\n    }\n    /**\n     * Draw a random integer from a uniform distribution on [low, high). If only low is specified, the number is drawn on [0, low)\n     * @param low - The lower bound of the uniform distribution interval.\n     * @param high - The higher bound of the uniform distribution interval.\n     */\n    randInt(low, high) {\n        if (high === undefined) {\n            high = low;\n            low = 0;\n        }\n        return low + Math.floor(this.randomGenerator() * (high - low));\n    }\n    /**\n     * Draw several random number from a uniform distribution on [0, 1)\n     * @param size - The number of number to draw\n     * @return - The list of drawn numbers.\n     */\n    randomSample(size) {\n        const result = [];\n        for (let i = 0; i < size; i++) {\n            result.push(this.random());\n        }\n        return result;\n    }\n}\n","import Random from 'ml-random';\nimport { squaredEuclidean } from 'ml-distance-euclidean';\nimport { Matrix } from 'ml-matrix';\n\n/**\n * Choose K different random points from the original data\n * @ignore\n * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {number} K - number of clusters\n * @param {number} seed - seed for random number generation\n * @return {Array<Array<number>>} - Initial random points\n */\nexport function random(data, K, seed) {\n  const random = new Random(seed);\n  return random.choice(data, { size: K });\n}\n\n/**\n * Chooses the most distant points to a first random pick\n * @ignore\n * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {number} K - number of clusters\n * @param {Array<Array<number>>} distanceMatrix - matrix with the distance values\n * @param {number} seed - seed for random number generation\n * @return {Array<Array<number>>} - Initial random points\n */\nexport function mostDistant(data, K, distanceMatrix, seed) {\n  const random = new Random(seed);\n  var ans = new Array(K);\n  // chooses a random point as initial cluster\n  ans[0] = Math.floor(random.random() * data.length);\n\n  if (K > 1) {\n    // chooses the more distant point\n    var maxDist = { dist: -1, index: -1 };\n    for (var l = 0; l < data.length; ++l) {\n      if (distanceMatrix[ans[0]][l] > maxDist.dist) {\n        maxDist.dist = distanceMatrix[ans[0]][l];\n        maxDist.index = l;\n      }\n    }\n    ans[1] = maxDist.index;\n\n    if (K > 2) {\n      // chooses the set of points that maximises the min distance\n      for (var k = 2; k < K; ++k) {\n        var center = { dist: -1, index: -1 };\n        for (var m = 0; m < data.length; ++m) {\n          // minimum distance to centers\n          var minDistCent = { dist: Number.MAX_VALUE, index: -1 };\n          for (var n = 0; n < k; ++n) {\n            if (\n              distanceMatrix[n][m] < minDistCent.dist &&\n              ans.indexOf(m) === -1\n            ) {\n              minDistCent = {\n                dist: distanceMatrix[n][m],\n                index: m\n              };\n            }\n          }\n\n          if (\n            minDistCent.dist !== Number.MAX_VALUE &&\n            minDistCent.dist > center.dist\n          ) {\n            center = Object.assign({}, minDistCent);\n          }\n        }\n\n        ans[k] = center.index;\n      }\n    }\n  }\n\n  return ans.map((index) => data[index]);\n}\n\n// Implementation inspired from scikit\nexport function kmeanspp(X, K, options = {}) {\n  X = new Matrix(X);\n  const nSamples = X.rows;\n  const random = new Random(options.seed);\n  // Set the number of trials\n  const centers = [];\n  const localTrials = options.localTrials || 2 + Math.floor(Math.log(K));\n\n  // Pick the first center at random from the dataset\n  const firstCenterIdx = random.randInt(nSamples);\n  centers.push(X.getRow(firstCenterIdx));\n\n  // Init closest distances\n  let closestDistSquared = new Matrix(1, X.rows);\n  for (let i = 0; i < X.rows; i++) {\n    closestDistSquared.set(0, i, squaredEuclidean(X.getRow(i), centers[0]));\n  }\n  let cumSumClosestDistSquared = [cumSum(closestDistSquared.getRow(0))];\n  const factor = 1 / cumSumClosestDistSquared[0][nSamples - 1];\n  let probabilities = Matrix.mul(closestDistSquared, factor);\n\n  // Iterate over the remaining centers\n  for (let i = 1; i < K; i++) {\n    const candidateIdx = random.choice(nSamples, {\n      replace: true,\n      size: localTrials,\n      probabilities: probabilities[0]\n    });\n\n    const candidates = X.selection(candidateIdx, range(X.columns));\n    const distanceToCandidates = euclideanDistances(candidates, X);\n\n    let bestCandidate;\n    let bestPot;\n    let bestDistSquared;\n\n    for (let j = 0; j < localTrials; j++) {\n      const newDistSquared = Matrix.min(closestDistSquared, [distanceToCandidates.getRow(j)]);\n      const newPot = newDistSquared.sum();\n      if (bestCandidate === undefined || newPot < bestPot) {\n        bestCandidate = candidateIdx[j];\n        bestPot = newPot;\n        bestDistSquared = newDistSquared;\n      }\n    }\n    centers[i] = X.getRow(bestCandidate);\n    closestDistSquared = bestDistSquared;\n    cumSumClosestDistSquared = [cumSum(closestDistSquared.getRow(0))];\n    probabilities = Matrix.mul(\n      closestDistSquared,\n      1 / cumSumClosestDistSquared[0][nSamples - 1]\n    );\n  }\n  return centers;\n}\n\nfunction euclideanDistances(A, B) {\n  const result = new Matrix(A.rows, B.rows);\n  for (let i = 0; i < A.rows; i++) {\n    for (let j = 0; j < B.rows; j++) {\n      result.set(i, j, squaredEuclidean(A.getRow(i), B.getRow(j)));\n    }\n  }\n  return result;\n}\n\nfunction range(l) {\n  let r = [];\n  for (let i = 0; i < l; i++) {\n    r.push(i);\n  }\n  return r;\n}\n\nfunction cumSum(arr) {\n  let cumSum = [arr[0]];\n  for (let i = 1; i < arr.length; i++) {\n    cumSum[i] = cumSum[i - 1] + arr[i];\n  }\n  return cumSum;\n}\n","import { updateClusterID } from './utils';\n\nconst distanceSymbol = Symbol('distance');\n\nexport default class KMeansResult {\n  /**\n   * Result of the kmeans algorithm\n   * @param {Array<number>} clusters - the cluster identifier for each data dot\n   * @param {Array<Array<object>>} centroids - the K centers in format [x,y,z,...], the error and size of the cluster\n   * @param {boolean} converged - Converge criteria satisfied\n   * @param {number} iterations - Current number of iterations\n   * @param {function} distance - (*Private*) Distance function to use between the points\n   * @constructor\n   */\n  constructor(clusters, centroids, converged, iterations, distance) {\n    this.clusters = clusters;\n    this.centroids = centroids;\n    this.converged = converged;\n    this.iterations = iterations;\n    this[distanceSymbol] = distance;\n  }\n\n  /**\n   * Allows to compute for a new array of points their cluster id\n   * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n   * @return {Array<number>} - cluster id for each point\n   */\n  nearest(data) {\n    const clusterID = new Array(data.length);\n    const centroids = this.centroids.map(function (centroid) {\n      return centroid.centroid;\n    });\n    return updateClusterID(data, centroids, clusterID, this[distanceSymbol]);\n  }\n\n  /**\n   * Returns a KMeansResult with the error and size of the cluster\n   * @ignore\n   * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n   * @return {KMeansResult}\n   */\n  computeInformation(data) {\n    var enrichedCentroids = this.centroids.map(function (centroid) {\n      return {\n        centroid: centroid,\n        error: 0,\n        size: 0\n      };\n    });\n\n    for (var i = 0; i < data.length; i++) {\n      enrichedCentroids[this.clusters[i]].error += this[distanceSymbol](\n        data[i],\n        this.centroids[this.clusters[i]]\n      );\n      enrichedCentroids[this.clusters[i]].size++;\n    }\n\n    for (var j = 0; j < this.centroids.length; j++) {\n      if (enrichedCentroids[j].size) {\n        enrichedCentroids[j].error /= enrichedCentroids[j].size;\n      } else {\n        enrichedCentroids[j].error = null;\n      }\n    }\n\n    return new KMeansResult(\n      this.clusters,\n      enrichedCentroids,\n      this.converged,\n      this.iterations,\n      this[distanceSymbol]\n    );\n  }\n}\n","import { squaredEuclidean } from 'ml-distance-euclidean';\n\nimport {\n  updateClusterID,\n  updateCenters,\n  hasConverged,\n  calculateDistanceMatrix\n} from './utils';\nimport { mostDistant, random, kmeanspp } from './initialization';\nimport KMeansResult from './KMeansResult';\n\nconst defaultOptions = {\n  maxIterations: 100,\n  tolerance: 1e-6,\n  withIterations: false,\n  initialization: 'kmeans++',\n  distanceFunction: squaredEuclidean\n};\n\n/**\n * Each step operation for kmeans\n * @ignore\n * @param {Array<Array<number>>} centers - K centers in format [x,y,z,...]\n * @param {Array<Array<number>>} data - Points [x,y,z,...] to cluster\n * @param {Array<number>} clusterID - Cluster identifier for each data dot\n * @param {number} K - Number of clusters\n * @param {object} [options] - Option object\n * @param {number} iterations - Current number of iterations\n * @return {KMeansResult}\n */\nfunction step(centers, data, clusterID, K, options, iterations) {\n  clusterID = updateClusterID(\n    data,\n    centers,\n    clusterID,\n    options.distanceFunction\n  );\n  var newCenters = updateCenters(centers, data, clusterID, K);\n  var converged = hasConverged(\n    newCenters,\n    centers,\n    options.distanceFunction,\n    options.tolerance\n  );\n  return new KMeansResult(\n    clusterID,\n    newCenters,\n    converged,\n    iterations,\n    options.distanceFunction\n  );\n}\n\n/**\n * Generator version for the algorithm\n * @ignore\n * @param {Array<Array<number>>} centers - K centers in format [x,y,z,...]\n * @param {Array<Array<number>>} data - Points [x,y,z,...] to cluster\n * @param {Array<number>} clusterID - Cluster identifier for each data dot\n * @param {number} K - Number of clusters\n * @param {object} [options] - Option object\n */\nfunction* kmeansGenerator(centers, data, clusterID, K, options) {\n  var converged = false;\n  var stepNumber = 0;\n  var stepResult;\n  while (!converged && stepNumber < options.maxIterations) {\n    stepResult = step(centers, data, clusterID, K, options, ++stepNumber);\n    yield stepResult.computeInformation(data);\n    converged = stepResult.converged;\n    centers = stepResult.centroids;\n  }\n}\n\n/**\n * K-means algorithm\n * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {number} K - Number of clusters\n * @param {object} [options] - Option object\n * @param {number} [options.maxIterations = 100] - Maximum of iterations allowed\n * @param {number} [options.tolerance = 1e-6] - Error tolerance\n * @param {boolean} [options.withIterations = false] - Store clusters and centroids for each iteration\n * @param {function} [options.distanceFunction = squaredDistance] - Distance function to use between the points\n * @param {number} [options.seed] - Seed for random initialization.\n * @param {string|Array<Array<number>>} [options.initialization = 'kmeans++'] - K centers in format [x,y,z,...] or a method for initialize the data:\n *  * You can either specify your custom start centroids, or select one of the following initialization method:\n *  * `'kmeans++'` will use the kmeans++ method as described by http://ilpubs.stanford.edu:8090/778/1/2006-13.pdf\n *  * `'random'` will choose K random different values.\n *  * `'mostDistant'` will choose the more distant points to a first random pick\n * @return {KMeansResult} - Cluster identifier for each data dot and centroids with the following fields:\n *  * `'clusters'`: Array of indexes for the clusters.\n *  * `'centroids'`: Array with the resulting centroids.\n *  * `'iterations'`: Number of iterations that took to converge\n */\nexport default function kmeans(data, K, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  if (K <= 0 || K > data.length || !Number.isInteger(K)) {\n    throw new Error(\n      'K should be a positive integer smaller than the number of points'\n    );\n  }\n\n  var centers;\n  if (Array.isArray(options.initialization)) {\n    if (options.initialization.length !== K) {\n      throw new Error('The initial centers should have the same length as K');\n    } else {\n      centers = options.initialization;\n    }\n  } else {\n    switch (options.initialization) {\n      case 'kmeans++':\n        centers = kmeanspp(data, K, options);\n        break;\n      case 'random':\n        centers = random(data, K, options.seed);\n        break;\n      case 'mostDistant':\n        centers = mostDistant(\n          data,\n          K,\n          calculateDistanceMatrix(data, options.distanceFunction),\n          options.seed\n        );\n        break;\n      default:\n        throw new Error(\n          `Unknown initialization method: \"${options.initialization}\"`\n        );\n    }\n  }\n\n  // infinite loop until convergence\n  if (options.maxIterations === 0) {\n    options.maxIterations = Number.MAX_VALUE;\n  }\n\n  var clusterID = new Array(data.length);\n  if (options.withIterations) {\n    return kmeansGenerator(centers, data, clusterID, K, options);\n  } else {\n    var converged = false;\n    var stepNumber = 0;\n    var stepResult;\n    while (!converged && stepNumber < options.maxIterations) {\n      stepResult = step(centers, data, clusterID, K, options, ++stepNumber);\n      converged = stepResult.converged;\n      centers = stepResult.centroids;\n    }\n    return stepResult.computeInformation(data);\n  }\n}\n","import Matrix from 'ml-matrix';\n\n/**\n * @private\n * Function that retuns an array of matrices of the cases that belong to each class.\n * @param {Matrix} X - dataset\n * @param {Array} y - predictions\n * @return {Array}\n */\nexport function separateClasses(X, y) {\n  var features = X.columns;\n\n  var classes = 0;\n  var totalPerClasses = new Array(10000); // max upperbound of classes\n  for (var i = 0; i < y.length; i++) {\n    if (totalPerClasses[y[i]] === undefined) {\n      totalPerClasses[y[i]] = 0;\n      classes++;\n    }\n    totalPerClasses[y[i]]++;\n  }\n  var separatedClasses = new Array(classes);\n  var currentIndex = new Array(classes);\n  for (i = 0; i < classes; ++i) {\n    separatedClasses[i] = new Matrix(totalPerClasses[i], features);\n    currentIndex[i] = 0;\n  }\n  for (i = 0; i < X.rows; ++i) {\n    separatedClasses[y[i]].setRow(currentIndex[y[i]], X.getRow(i));\n    currentIndex[y[i]]++;\n  }\n  return separatedClasses;\n}\n","import { Matrix } from 'ml-matrix';\n\nimport { separateClasses } from './utils';\n\nexport class GaussianNB {\n  /**\n   * Constructor for the Gaussian Naive Bayes classifier, the parameters here is just for loading purposes.\n   * @constructor\n   * @param {boolean} reload\n   * @param {object} model\n   */\n  constructor(reload, model) {\n    if (reload) {\n      this.means = model.means;\n      this.calculateProbabilities = model.calculateProbabilities;\n    }\n  }\n\n  /**\n   * Function that trains the classifier with a matrix that represents the training set and an array that\n   * represents the label of each row in the training set. the labels must be numbers between 0 to n-1 where\n   * n represents the number of classes.\n   *\n   * WARNING: in the case that one class, all the cases in one or more features have the same value, the\n   * Naive Bayes classifier will not work well.\n   * @param {Matrix|Array} trainingSet\n   * @param {Matrix|Array} trainingLabels\n   */\n  train(trainingSet, trainingLabels) {\n    var C1 = Math.sqrt(2 * Math.PI); // constant to precalculate the squared root\n    trainingSet = Matrix.checkMatrix(trainingSet);\n\n    if (trainingSet.rows !== trainingLabels.length) {\n      throw new RangeError(\n        'the size of the training set and the training labels must be the same.'\n      );\n    }\n\n    var separatedClasses = separateClasses(trainingSet, trainingLabels);\n    var calculateProbabilities = new Array(separatedClasses.length);\n    this.means = new Array(separatedClasses.length);\n    for (var i = 0; i < separatedClasses.length; ++i) {\n      var means = separatedClasses[i].mean('column');\n      var std = separatedClasses[i].standardDeviation('column', {\n        mean: means\n      });\n\n      var logPriorProbability = Math.log(\n        separatedClasses[i].rows / trainingSet.rows\n      );\n      calculateProbabilities[i] = new Array(means.length + 1);\n\n      calculateProbabilities[i][0] = logPriorProbability;\n      for (var j = 1; j < means.length + 1; ++j) {\n        var currentStd = std[j - 1];\n        calculateProbabilities[i][j] = [\n          1 / (C1 * currentStd),\n          -2 * currentStd * currentStd\n        ];\n      }\n\n      this.means[i] = means;\n    }\n\n    this.calculateProbabilities = calculateProbabilities;\n  }\n\n  /**\n   * function that predicts each row of the dataset (must be a matrix).\n   *\n   * @param {Matrix|Array} dataset\n   * @return {Array}\n   */\n  predict(dataset) {\n    dataset = Matrix.checkMatrix(dataset);\n    if (dataset.rows === this.calculateProbabilities[0].length) {\n      throw new RangeError(\n        'the dataset must have the same features as the training set'\n      );\n    }\n\n    var predictions = new Array(dataset.rows);\n\n    for (var i = 0; i < predictions.length; ++i) {\n      predictions[i] = getCurrentClass(\n        dataset.getRow(i),\n        this.means,\n        this.calculateProbabilities\n      );\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Function that export the NaiveBayes model.\n   * @return {object}\n   */\n  toJSON() {\n    return {\n      modelName: 'NaiveBayes',\n      means: this.means,\n      calculateProbabilities: this.calculateProbabilities\n    };\n  }\n\n  /**\n   * Function that create a GaussianNB classifier with the given model.\n   * @param {object} model\n   * @return {GaussianNB}\n   */\n  static load(model) {\n    if (model.modelName !== 'NaiveBayes') {\n      throw new RangeError(\n        'The current model is not a Multinomial Naive Bayes, current model:',\n        model.name\n      );\n    }\n\n    return new GaussianNB(true, model);\n  }\n}\n\n/**\n * @private\n * Function the retrieves a prediction with one case.\n *\n * @param {Array} currentCase\n * @param {Array} mean - Precalculated means of each class trained\n * @param {Array} classes - Precalculated value of each class (Prior probability and probability function of each feature)\n * @return {number}\n */\nfunction getCurrentClass(currentCase, mean, classes) {\n  var maxProbability = 0;\n  var predictedClass = -1;\n\n  // going through all precalculated values for the classes\n  for (var i = 0; i < classes.length; ++i) {\n    var currentProbability = classes[i][0]; // initialize with the prior probability\n    for (var j = 1; j < classes[0][1].length + 1; ++j) {\n      currentProbability += calculateLogProbability(\n        currentCase[j - 1],\n        mean[i][j - 1],\n        classes[i][j][0],\n        classes[i][j][1]\n      );\n    }\n\n    currentProbability = Math.exp(currentProbability);\n    if (currentProbability > maxProbability) {\n      maxProbability = currentProbability;\n      predictedClass = i;\n    }\n  }\n\n  return predictedClass;\n}\n\n/**\n * @private\n * function that retrieves the probability of the feature given the class.\n * @param {number} value - value of the feature.\n * @param {number} mean - mean of the feature for the given class.\n * @param {number} C1 - precalculated value of (1 / (sqrt(2*pi) * std)).\n * @param {number} C2 - precalculated value of (2 * std^2) for the denominator of the exponential.\n * @return {number}\n */\nfunction calculateLogProbability(value, mean, C1, C2) {\n  value = value - mean;\n  return Math.log(C1 * Math.exp((value * value) / C2));\n}\n","import { Matrix } from 'ml-matrix';\n\nimport { separateClasses } from './utils';\n\nexport class MultinomialNB {\n  /**\n   * Constructor for Multinomial Naive Bayes, the model parameter is for load purposes.\n   * @constructor\n   * @param {object} model - for load purposes.\n   */\n  constructor(model) {\n    if (model) {\n      this.conditionalProbability = Matrix.checkMatrix(\n        model.conditionalProbability\n      );\n      this.priorProbability = Matrix.checkMatrix(model.priorProbability);\n    }\n  }\n\n  /**\n   * Train the classifier with the current training set and labels, the labels must be numbers between 0 and n.\n   * @param {Matrix|Array} trainingSet\n   * @param {Array} trainingLabels\n   */\n  train(trainingSet, trainingLabels) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n\n    if (trainingSet.rows !== trainingLabels.length) {\n      throw new RangeError(\n        'the size of the training set and the training labels must be the same.'\n      );\n    }\n\n    var separateClass = separateClasses(trainingSet, trainingLabels);\n\n    this.priorProbability = new Matrix(separateClass.length, 1);\n\n    for (var i = 0; i < separateClass.length; ++i) {\n      this.priorProbability.set(i, 0, Math.log(\n        separateClass[i].rows / trainingSet.rows\n      ));\n    }\n\n    var features = trainingSet.columns;\n    this.conditionalProbability = new Matrix(separateClass.length, features);\n    for (i = 0; i < separateClass.length; ++i) {\n      var classValues = Matrix.checkMatrix(separateClass[i]);\n      var total = classValues.sum();\n      var divisor = total + features;\n      this.conditionalProbability.setRow(\n        i,\n        Matrix.rowVector(classValues\n          .sum('column'))\n          .add(1)\n          .div(divisor)\n          .apply(matrixLog)\n      );\n    }\n  }\n\n  /**\n   * Retrieves the predictions for the dataset with the current model.\n   * @param {Matrix|Array} dataset\n   * @return {Array} - predictions from the dataset.\n   */\n  predict(dataset) {\n    dataset = Matrix.checkMatrix(dataset);\n    var predictions = new Array(dataset.rows);\n    for (var i = 0; i < dataset.rows; ++i) {\n      var currentElement = dataset.getRowVector(i);\n      const v = Matrix.columnVector(this.conditionalProbability\n        .clone()\n        .mulRowVector(currentElement)\n        .sum('row'));\n      predictions[i] = v\n        .add(this.priorProbability)\n        .maxIndex()[0];\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Function that saves the current model.\n   * @return {object} - model in JSON format.\n   */\n  toJSON() {\n    return {\n      name: 'MultinomialNB',\n      priorProbability: this.priorProbability,\n      conditionalProbability: this.conditionalProbability\n    };\n  }\n\n  /**\n   * Creates a new MultinomialNB from the given model\n   * @param {object} model\n   * @return {MultinomialNB}\n   */\n  static load(model) {\n    if (model.name !== 'MultinomialNB') {\n      throw new RangeError(`${model.name} is not a Multinomial Naive Bayes`);\n    }\n\n    return new MultinomialNB(model);\n  }\n}\n\nfunction matrixLog(i, j) {\n  this.set(i, j, Math.log(this.get(i, j)));\n}\n","/*\n * Original code from:\n *\n * k-d Tree JavaScript - V 1.01\n *\n * https://github.com/ubilabs/kd-tree-javascript\n *\n * @author Mircea Pricop <pricop@ubilabs.net>, 2012\n * @author Martin Kleppe <kleppe@ubilabs.net>, 2012\n * @author Ubilabs http://ubilabs.net, 2012\n * @license MIT License <http://www.opensource.org/licenses/mit-license.php>\n */\n\nfunction Node(obj, dimension, parent) {\n  this.obj = obj;\n  this.left = null;\n  this.right = null;\n  this.parent = parent;\n  this.dimension = dimension;\n}\n\nexport default class KDTree {\n  constructor(points, metric) {\n    // If points is not an array, assume we're loading a pre-built tree\n    if (!Array.isArray(points)) {\n      this.dimensions = points.dimensions;\n      this.root = points;\n      restoreParent(this.root);\n    } else {\n      this.dimensions = new Array(points[0].length);\n      for (var i = 0; i < this.dimensions.length; i++) {\n        this.dimensions[i] = i;\n      }\n      this.root = buildTree(points, 0, null, this.dimensions);\n    }\n    this.metric = metric;\n  }\n\n  // Convert to a JSON serializable structure; this just requires removing\n  // the `parent` property\n  toJSON() {\n    const result = toJSONImpl(this.root, true);\n    result.dimensions = this.dimensions;\n    return result;\n  }\n\n  nearest(point, maxNodes, maxDistance) {\n    const metric = this.metric;\n    const dimensions = this.dimensions;\n    var i;\n\n    const bestNodes = new BinaryHeap(function (e) {\n      return -e[1];\n    });\n\n    function nearestSearch(node) {\n      const dimension = dimensions[node.dimension];\n      const ownDistance = metric(point, node.obj);\n      const linearPoint = {};\n      var bestChild, linearDistance, otherChild, i;\n\n      function saveNode(node, distance) {\n        bestNodes.push([node, distance]);\n        if (bestNodes.size() > maxNodes) {\n          bestNodes.pop();\n        }\n      }\n\n      for (i = 0; i < dimensions.length; i += 1) {\n        if (i === node.dimension) {\n          linearPoint[dimensions[i]] = point[dimensions[i]];\n        } else {\n          linearPoint[dimensions[i]] = node.obj[dimensions[i]];\n        }\n      }\n\n      linearDistance = metric(linearPoint, node.obj);\n\n      if (node.right === null && node.left === null) {\n        if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n          saveNode(node, ownDistance);\n        }\n        return;\n      }\n\n      if (node.right === null) {\n        bestChild = node.left;\n      } else if (node.left === null) {\n        bestChild = node.right;\n      } else {\n        if (point[dimension] < node.obj[dimension]) {\n          bestChild = node.left;\n        } else {\n          bestChild = node.right;\n        }\n      }\n\n      nearestSearch(bestChild);\n\n      if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n        saveNode(node, ownDistance);\n      }\n\n      if (\n        bestNodes.size() < maxNodes ||\n        Math.abs(linearDistance) < bestNodes.peek()[1]\n      ) {\n        if (bestChild === node.left) {\n          otherChild = node.right;\n        } else {\n          otherChild = node.left;\n        }\n        if (otherChild !== null) {\n          nearestSearch(otherChild);\n        }\n      }\n    }\n\n    if (maxDistance) {\n      for (i = 0; i < maxNodes; i += 1) {\n        bestNodes.push([null, maxDistance]);\n      }\n    }\n\n    if (this.root) {\n      nearestSearch(this.root);\n    }\n\n    const result = [];\n    for (i = 0; i < Math.min(maxNodes, bestNodes.content.length); i += 1) {\n      if (bestNodes.content[i][0]) {\n        result.push([bestNodes.content[i][0].obj, bestNodes.content[i][1]]);\n      }\n    }\n    return result;\n  }\n}\n\nfunction toJSONImpl(src) {\n  const dest = new Node(src.obj, src.dimension, null);\n  if (src.left) dest.left = toJSONImpl(src.left);\n  if (src.right) dest.right = toJSONImpl(src.right);\n  return dest;\n}\n\nfunction buildTree(points, depth, parent, dimensions) {\n  const dim = depth % dimensions.length;\n\n  if (points.length === 0) {\n    return null;\n  }\n  if (points.length === 1) {\n    return new Node(points[0], dim, parent);\n  }\n\n  points.sort((a, b) => a[dimensions[dim]] - b[dimensions[dim]]);\n\n  const median = Math.floor(points.length / 2);\n  const node = new Node(points[median], dim, parent);\n  node.left = buildTree(points.slice(0, median), depth + 1, node, dimensions);\n  node.right = buildTree(points.slice(median + 1), depth + 1, node, dimensions);\n\n  return node;\n}\n\nfunction restoreParent(root) {\n  if (root.left) {\n    root.left.parent = root;\n    restoreParent(root.left);\n  }\n\n  if (root.right) {\n    root.right.parent = root;\n    restoreParent(root.right);\n  }\n}\n\n// Binary heap implementation from:\n// http://eloquentjavascript.net/appendix2.html\nclass BinaryHeap {\n  constructor(scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  push(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n    // Allow it to bubble up.\n    this.bubbleUp(this.content.length - 1);\n  }\n\n  pop() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return result;\n  }\n\n  peek() {\n    return this.content[0];\n  }\n\n  size() {\n    return this.content.length;\n  }\n\n  bubbleUp(n) {\n    // Fetch the element that has to be moved.\n    var element = this.content[n];\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = Math.floor((n + 1) / 2) - 1;\n      const parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      } else {\n        // Found a parent that is less, no need to move it further.\n        break;\n      }\n    }\n  }\n\n  sinkDown(n) {\n    // Look up the target element and its score.\n    var length = this.content.length;\n    var element = this.content[n];\n    var elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) * 2;\n      var child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      var swap = null;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N];\n        var child1Score = this.scoreFunction(child1);\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N];\n        var child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      } else {\n        // Otherwise, we are done.\n        break;\n      }\n    }\n  }\n}\n","import { euclidean as euclideanDistance } from 'ml-distance-euclidean';\n\nimport KDTree from './KDTree';\n\nexport default class KNN {\n  /**\n   * @param {Array} dataset\n   * @param {Array} labels\n   * @param {object} options\n   * @param {number} [options.k=numberOfClasses + 1] - Number of neighbors to classify.\n   * @param {function} [options.distance=euclideanDistance] - Distance function that takes two parameters.\n   */\n  constructor(dataset, labels, options = {}) {\n    if (dataset === true) {\n      const model = labels;\n      this.kdTree = new KDTree(model.kdTree, options);\n      this.k = model.k;\n      this.classes = new Set(model.classes);\n      this.isEuclidean = model.isEuclidean;\n      return;\n    }\n\n    const classes = new Set(labels);\n\n    const { distance = euclideanDistance, k = classes.size + 1 } = options;\n\n    const points = new Array(dataset.length);\n    for (var i = 0; i < points.length; ++i) {\n      points[i] = dataset[i].slice();\n    }\n\n    for (i = 0; i < labels.length; ++i) {\n      points[i].push(labels[i]);\n    }\n\n    this.kdTree = new KDTree(points, distance);\n    this.k = k;\n    this.classes = classes;\n    this.isEuclidean = distance === euclideanDistance;\n  }\n\n  /**\n   * Create a new KNN instance with the given model.\n   * @param {object} model\n   * @param {function} distance=euclideanDistance - distance function must be provided if the model wasn't trained with euclidean distance.\n   * @return {KNN}\n   */\n  static load(model, distance = euclideanDistance) {\n    if (model.name !== 'KNN') {\n      throw new Error(`invalid model: ${model.name}`);\n    }\n    if (!model.isEuclidean && distance === euclideanDistance) {\n      throw new Error(\n        'a custom distance function was used to create the model. Please provide it again'\n      );\n    }\n    if (model.isEuclidean && distance !== euclideanDistance) {\n      throw new Error(\n        'the model was created with the default distance function. Do not load it with another one'\n      );\n    }\n    return new KNN(true, model, distance);\n  }\n\n  /**\n   * Return a JSON containing the kd-tree model.\n   * @return {object} JSON KNN model.\n   */\n  toJSON() {\n    return {\n      name: 'KNN',\n      kdTree: this.kdTree,\n      k: this.k,\n      classes: Array.from(this.classes),\n      isEuclidean: this.isEuclidean\n    };\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Array} dataset\n   * @return {Array} predictions\n   */\n  predict(dataset) {\n    if (Array.isArray(dataset)) {\n      if (typeof dataset[0] === 'number') {\n        return getSinglePrediction(this, dataset);\n      } else if (\n        Array.isArray(dataset[0]) &&\n        typeof dataset[0][0] === 'number'\n      ) {\n        const predictions = new Array(dataset.length);\n        for (var i = 0; i < dataset.length; i++) {\n          predictions[i] = getSinglePrediction(this, dataset[i]);\n        }\n        return predictions;\n      }\n    }\n    throw new TypeError('dataset to predict must be an array or a matrix');\n  }\n}\n\nfunction getSinglePrediction(knn, currentCase) {\n  var nearestPoints = knn.kdTree.nearest(currentCase, knn.k);\n  var pointsPerClass = {};\n  var predictedClass = -1;\n  var maxPoints = -1;\n  var lastElement = nearestPoints[0][0].length - 1;\n\n  for (var element of knn.classes) {\n    pointsPerClass[element] = 0;\n  }\n\n  for (var i = 0; i < nearestPoints.length; ++i) {\n    var currentClass = nearestPoints[i][0][lastElement];\n    var currentPoints = ++pointsPerClass[currentClass];\n    if (currentPoints > maxPoints) {\n      predictedClass = currentClass;\n      maxPoints = currentPoints;\n    }\n  }\n\n  return predictedClass;\n}\n","import Matrix from 'ml-matrix';\n\n/**\n * @private\n * Function that given vector, returns its norm\n * @param {Vector} X\n * @return {number} Norm of the vector\n */\nexport function norm(X) {\n  return Math.sqrt(X.clone().apply(pow2array).sum());\n}\n\n/**\n * @private\n * Function that pow 2 each element of a Matrix or a Vector,\n * used in the apply method of the Matrix object\n * @param {number} i - index i.\n * @param {number} j - index j.\n * @return {Matrix} The Matrix object modified at the index i, j.\n * */\nexport function pow2array(i, j) {\n  this.set(i, j, this.get(i, j) ** 2);\n}\n\n/**\n * @private\n * Function that normalize the dataset and return the means and\n * standard deviation of each feature.\n * @param {Matrix} dataset\n * @return {object} dataset normalized, means and standard deviations\n */\nexport function featureNormalize(dataset) {\n  var means = dataset.mean('column');\n  var std = dataset.standardDeviation('column', { mean: means, unbiased: true });\n  var result = Matrix.checkMatrix(dataset).subRowVector(means);\n  return { result: result.divRowVector(std), means: means, std: std };\n}\n\n/**\n * @private\n * Function that initialize an array of matrices.\n * @param {Array} array\n * @param {boolean} isMatrix\n * @return {Array} array with the matrices initialized.\n */\nexport function initializeMatrices(array, isMatrix) {\n  if (isMatrix) {\n    for (var i = 0; i < array.length; ++i) {\n      for (var j = 0; j < array[i].length; ++j) {\n        var elem = array[i][j];\n        array[i][j] = elem !== null ? new Matrix(array[i][j]) : undefined;\n      }\n    }\n  } else {\n    for (i = 0; i < array.length; ++i) {\n      array[i] = new Matrix(array[i]);\n    }\n  }\n\n  return array;\n}\n","import Matrix from 'ml-matrix';\n\nimport * as Utils from './utils';\n\n/**\n * @class PLS\n */\nexport class PLS {\n  /**\n   * Constructor for Partial Least Squares (PLS)\n   * @param {object} options\n   * @param {number} [options.latentVectors] - Number of latent vector to get (if the algorithm doesn't find a good model below the tolerance)\n   * @param {number} [options.tolerance=1e-5]\n   * @param {boolean} [options.scale=true] - rescale dataset using mean.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.meanX = model.meanX;\n      this.stdDevX = model.stdDevX;\n      this.meanY = model.meanY;\n      this.stdDevY = model.stdDevY;\n      this.PBQ = Matrix.checkMatrix(model.PBQ);\n      this.R2X = model.R2X;\n      this.scale = model.scale;\n      this.scaleMethod = model.scaleMethod;\n      this.tolerance = model.tolerance;\n    } else {\n      var {\n        tolerance = 1e-5,\n        scale = true,\n      } = options;\n      this.tolerance = tolerance;\n      this.scale = scale;\n      this.latentVectors = options.latentVectors;\n    }\n  }\n\n  /**\n   * Fits the model with the given data and predictions, in this function is calculated the\n   * following outputs:\n   *\n   * T - Score matrix of X\n   * P - Loading matrix of X\n   * U - Score matrix of Y\n   * Q - Loading matrix of Y\n   * B - Matrix of regression coefficient\n   * W - Weight matrix of X\n   *\n   * @param {Matrix|Array} trainingSet\n   * @param {Matrix|Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n    trainingValues = Matrix.checkMatrix(trainingValues);\n\n    if (trainingSet.length !== trainingValues.length) {\n      throw new RangeError('The number of X rows must be equal to the number of Y rows');\n    }\n\n    this.meanX = trainingSet.mean('column');\n    this.stdDevX = trainingSet.standardDeviation('column', { mean: this.meanX, unbiased: true });\n    this.meanY = trainingValues.mean('column');\n    this.stdDevY = trainingValues.standardDeviation('column', { mean: this.meanY, unbiased: true });\n\n    if (this.scale) {\n      trainingSet = trainingSet.clone().subRowVector(this.meanX).divRowVector(this.stdDevX);\n      trainingValues = trainingValues.clone().subRowVector(this.meanY).divRowVector(this.stdDevY);\n    }\n\n    if (this.latentVectors === undefined) {\n      this.latentVectors = Math.min(trainingSet.rows - 1, trainingSet.columns);\n    }\n\n    var rx = trainingSet.rows;\n    var cx = trainingSet.columns;\n    var ry = trainingValues.rows;\n    var cy = trainingValues.columns;\n\n    var ssqXcal = trainingSet.clone().mul(trainingSet).sum(); // for the r²\n    var sumOfSquaresY = trainingValues.clone().mul(trainingValues).sum();\n\n    var tolerance = this.tolerance;\n    var n = this.latentVectors;\n    var T = Matrix.zeros(rx, n);\n    var P = Matrix.zeros(cx, n);\n    var U = Matrix.zeros(ry, n);\n    var Q = Matrix.zeros(cy, n);\n    var B = Matrix.zeros(n, n);\n    var W = P.clone();\n    var k = 0;\n\n    while (Utils.norm(trainingValues) > tolerance && k < n) {\n      var transposeX = trainingSet.transpose();\n      var transposeY = trainingValues.transpose();\n\n      var tIndex = maxSumColIndex(trainingSet.clone().mul(trainingSet));\n      var uIndex = maxSumColIndex(trainingValues.clone().mul(trainingValues));\n\n      var t1 = trainingSet.getColumnVector(tIndex);\n      var u = trainingValues.getColumnVector(uIndex);\n      var t = Matrix.zeros(rx, 1);\n\n      while (Utils.norm(t1.clone().sub(t)) > tolerance) {\n        var w = transposeX.mmul(u);\n        w.div(Utils.norm(w));\n        t = t1;\n        t1 = trainingSet.mmul(w);\n        var q = transposeY.mmul(t1);\n        q.div(Utils.norm(q));\n        u = trainingValues.mmul(q);\n      }\n\n      t = t1;\n      var num = transposeX.mmul(t);\n      var den = t.transpose().mmul(t).get(0, 0);\n      var p = num.div(den);\n      var pnorm = Utils.norm(p);\n      p.div(pnorm);\n      t.mul(pnorm);\n      w.mul(pnorm);\n\n      num = u.transpose().mmul(t);\n      den = t.transpose().mmul(t).get(0, 0);\n      var b = num.div(den).get(0, 0);\n      trainingSet.sub(t.mmul(p.transpose()));\n      trainingValues.sub(t.clone().mul(b).mmul(q.transpose()));\n\n      T.setColumn(k, t);\n      P.setColumn(k, p);\n      U.setColumn(k, u);\n      Q.setColumn(k, q);\n      W.setColumn(k, w);\n\n      B.set(k, k, b);\n      k++;\n    }\n\n    k--;\n    T = T.subMatrix(0, T.rows - 1, 0, k);\n    P = P.subMatrix(0, P.rows - 1, 0, k);\n    U = U.subMatrix(0, U.rows - 1, 0, k);\n    Q = Q.subMatrix(0, Q.rows - 1, 0, k);\n    W = W.subMatrix(0, W.rows - 1, 0, k);\n    B = B.subMatrix(0, k, 0, k);\n\n    // TODO: review of R2Y\n    // this.R2Y = t.transpose().mmul(t).mul(q[k][0]*q[k][0]).divS(ssqYcal)[0][0];\n    //\n    this.ssqYcal = sumOfSquaresY;\n    this.E = trainingSet;\n    this.F = trainingValues;\n    this.T = T;\n    this.P = P;\n    this.U = U;\n    this.Q = Q;\n    this.W = W;\n    this.B = B;\n    this.PBQ = P.mmul(B).mmul(Q.transpose());\n    this.R2X = t.transpose().mmul(t).mmul(p.transpose().mmul(p)).div(ssqXcal).get(0, 0);\n  }\n\n  /**\n   * Predicts the behavior of the given dataset.\n   * @param {Matrix|Array} dataset - data to be predicted.\n   * @return {Matrix} - predictions of each element of the dataset.\n   */\n  predict(dataset) {\n    var X = Matrix.checkMatrix(dataset);\n    if (this.scale) {\n      X = X.subRowVector(this.meanX).divRowVector(this.stdDevX);\n    }\n    var Y = X.mmul(this.PBQ);\n    Y = Y.mulRowVector(this.stdDevY).addRowVector(this.meanY);\n    return Y;\n  }\n\n  /**\n   * Returns the explained variance on training of the PLS model\n   * @return {number}\n   */\n  getExplainedVariance() {\n    return this.R2X;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      name: 'PLS',\n      R2X: this.R2X,\n      meanX: this.meanX,\n      stdDevX: this.stdDevX,\n      meanY: this.meanY,\n      stdDevY: this.stdDevY,\n      PBQ: this.PBQ,\n      tolerance: this.tolerance,\n      scale: this.scale,\n    };\n  }\n\n  /**\n   * Load a PLS model from a JSON Object\n   * @param {object} model\n   * @return {PLS} - PLS object from the given model\n   */\n  static load(model) {\n    if (model.name !== 'PLS') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n    return new PLS(true, model);\n  }\n}\n\n/**\n * @private\n * Function that returns the index where the sum of each\n * column vector is maximum.\n * @param {Matrix} data\n * @return {number} index of the maximum\n */\nfunction maxSumColIndex(data) {\n  return Matrix.rowVector(data.sum('column')).maxIndex()[0];\n}\n","import { Matrix, SingularValueDecomposition, inverse } from 'ml-matrix';\n\nimport { initializeMatrices } from './utils';\n\n/**\n * @class KOPLS\n */\nexport class KOPLS {\n  /**\n     * Constructor for Kernel-based Orthogonal Projections to Latent Structures (K-OPLS)\n     * @param {object} options\n     * @param {number} [options.predictiveComponents] - Number of predictive components to use.\n     * @param {number} [options.orthogonalComponents] - Number of Y-Orthogonal components.\n     * @param {Kernel} [options.kernel] - Kernel object to apply, see [ml-kernel](https://github.com/mljs/kernel).\n     * @param {object} model - for load purposes.\n     */\n  constructor(options, model) {\n    if (options === true) {\n      this.trainingSet = new Matrix(model.trainingSet);\n      this.YLoadingMat = new Matrix(model.YLoadingMat);\n      this.SigmaPow = new Matrix(model.SigmaPow);\n      this.YScoreMat = new Matrix(model.YScoreMat);\n      this.predScoreMat = initializeMatrices(model.predScoreMat, false);\n      this.YOrthLoadingVec = initializeMatrices(model.YOrthLoadingVec, false);\n      this.YOrthEigen = model.YOrthEigen;\n      this.YOrthScoreMat = initializeMatrices(model.YOrthScoreMat, false);\n      this.toNorm = initializeMatrices(model.toNorm, false);\n      this.TURegressionCoeff = initializeMatrices(model.TURegressionCoeff, false);\n      this.kernelX = initializeMatrices(model.kernelX, true);\n      this.kernel = model.kernel;\n      this.orthogonalComp = model.orthogonalComp;\n      this.predictiveComp = model.predictiveComp;\n    } else {\n      if (options.predictiveComponents === undefined) {\n        throw new RangeError('no predictive components found!');\n      }\n      if (options.orthogonalComponents === undefined) {\n        throw new RangeError('no orthogonal components found!');\n      }\n      if (options.kernel === undefined) {\n        throw new RangeError('no kernel found!');\n      }\n\n      this.orthogonalComp = options.orthogonalComponents;\n      this.predictiveComp = options.predictiveComponents;\n      this.kernel = options.kernel;\n    }\n  }\n\n  /**\n     * Train the K-OPLS model with the given training set and labels.\n     * @param {Matrix|Array} trainingSet\n     * @param {Matrix|Array} trainingValues\n     */\n  train(trainingSet, trainingValues) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n    trainingValues = Matrix.checkMatrix(trainingValues);\n\n    // to save and compute kernel with the prediction dataset.\n    this.trainingSet = trainingSet.clone();\n\n    var kernelX = this.kernel.compute(trainingSet);\n\n    var Identity = Matrix.eye(kernelX.rows, kernelX.rows, 1);\n    var temp = kernelX;\n    kernelX = new Array(this.orthogonalComp + 1);\n    for (let i = 0; i < this.orthogonalComp + 1; i++) {\n      kernelX[i] = new Array(this.orthogonalComp + 1);\n    }\n    kernelX[0][0] = temp;\n\n    var result = new SingularValueDecomposition(trainingValues.transpose().mmul(kernelX[0][0]).mmul(trainingValues), {\n      computeLeftSingularVectors: true,\n      computeRightSingularVectors: false\n    });\n    var YLoadingMat = result.leftSingularVectors;\n    var Sigma = result.diagonalMatrix;\n\n    YLoadingMat = YLoadingMat.subMatrix(0, YLoadingMat.rows - 1, 0, this.predictiveComp - 1);\n    Sigma = Sigma.subMatrix(0, this.predictiveComp - 1, 0, this.predictiveComp - 1);\n\n    var YScoreMat = trainingValues.mmul(YLoadingMat);\n\n    var predScoreMat = new Array(this.orthogonalComp + 1);\n    var TURegressionCoeff = new Array(this.orthogonalComp + 1);\n    var YOrthScoreMat = new Array(this.orthogonalComp);\n    var YOrthLoadingVec = new Array(this.orthogonalComp);\n    var YOrthEigen = new Array(this.orthogonalComp);\n    var YOrthScoreNorm = new Array(this.orthogonalComp);\n\n    var SigmaPow = Matrix.pow(Sigma, -0.5);\n    // to avoid errors, check infinity\n    SigmaPow.apply(function (i, j) {\n      if (this.get(i, j) === Infinity) {\n        this.set(i, j, 0);\n      }\n    });\n\n    for (var i = 0; i < this.orthogonalComp; ++i) {\n      predScoreMat[i] = kernelX[0][i].transpose().mmul(YScoreMat).mmul(SigmaPow);\n\n      var TpiPrime = predScoreMat[i].transpose();\n      TURegressionCoeff[i] = inverse(TpiPrime.mmul(predScoreMat[i])).mmul(TpiPrime).mmul(YScoreMat);\n\n      result = new SingularValueDecomposition(TpiPrime.mmul(Matrix.sub(kernelX[i][i], predScoreMat[i].mmul(TpiPrime))).mmul(predScoreMat[i]), {\n        computeLeftSingularVectors: true,\n        computeRightSingularVectors: false\n      });\n      var CoTemp = result.leftSingularVectors;\n      var SoTemp = result.diagonalMatrix;\n\n      YOrthLoadingVec[i] = CoTemp.subMatrix(0, CoTemp.rows - 1, 0, 0);\n      YOrthEigen[i] = SoTemp.get(0, 0);\n\n      YOrthScoreMat[i] = Matrix.sub(kernelX[i][i], predScoreMat[i].mmul(TpiPrime)).mmul(predScoreMat[i]).mmul(YOrthLoadingVec[i]).mul(Math.pow(YOrthEigen[i], -0.5));\n\n      var toiPrime = YOrthScoreMat[i].transpose();\n      YOrthScoreNorm[i] = Matrix.sqrt(toiPrime.mmul(YOrthScoreMat[i]));\n\n      YOrthScoreMat[i] = YOrthScoreMat[i].divRowVector(YOrthScoreNorm[i]);\n\n      var ITo = Matrix.sub(Identity, YOrthScoreMat[i].mmul(YOrthScoreMat[i].transpose()));\n\n      kernelX[0][i + 1] = kernelX[0][i].mmul(ITo);\n      kernelX[i + 1][i + 1] = ITo.mmul(kernelX[i][i]).mmul(ITo);\n    }\n\n    var lastScoreMat = predScoreMat[this.orthogonalComp] = kernelX[0][this.orthogonalComp].transpose().mmul(YScoreMat).mmul(SigmaPow);\n\n    var lastTpPrime = lastScoreMat.transpose();\n    TURegressionCoeff[this.orthogonalComp] = inverse(lastTpPrime.mmul(lastScoreMat)).mmul(lastTpPrime).mmul(YScoreMat);\n\n    this.YLoadingMat = YLoadingMat;\n    this.SigmaPow = SigmaPow;\n    this.YScoreMat = YScoreMat;\n    this.predScoreMat = predScoreMat;\n    this.YOrthLoadingVec = YOrthLoadingVec;\n    this.YOrthEigen = YOrthEigen;\n    this.YOrthScoreMat = YOrthScoreMat;\n    this.toNorm = YOrthScoreNorm;\n    this.TURegressionCoeff = TURegressionCoeff;\n    this.kernelX = kernelX;\n  }\n\n  /**\n     * Predicts the output given the matrix to predict.\n     * @param {Matrix|Array} toPredict\n     * @return {{y: Matrix, predScoreMat: Array<Matrix>, predYOrthVectors: Array<Matrix>}} predictions\n     */\n  predict(toPredict) {\n    var KTestTrain = this.kernel.compute(toPredict, this.trainingSet);\n\n    var temp = KTestTrain;\n    KTestTrain = new Array(this.orthogonalComp + 1);\n    for (let i = 0; i < this.orthogonalComp + 1; i++) {\n      KTestTrain[i] = new Array(this.orthogonalComp + 1);\n    }\n    KTestTrain[0][0] = temp;\n\n    var YOrthScoreVector = new Array(this.orthogonalComp);\n    var predScoreMat = new Array(this.orthogonalComp);\n\n    var i;\n    for (i = 0; i < this.orthogonalComp; ++i) {\n      predScoreMat[i] = KTestTrain[i][0].mmul(this.YScoreMat).mmul(this.SigmaPow);\n\n      YOrthScoreVector[i] = Matrix.sub(KTestTrain[i][i], predScoreMat[i].mmul(this.predScoreMat[i].transpose())).mmul(this.predScoreMat[i]).mmul(this.YOrthLoadingVec[i]).mul(Math.pow(this.YOrthEigen[i], -0.5));\n\n      YOrthScoreVector[i] = YOrthScoreVector[i].divRowVector(this.toNorm[i]);\n\n      var scoreMatPrime = this.YOrthScoreMat[i].transpose();\n      KTestTrain[i + 1][0] = Matrix.sub(KTestTrain[i][0], YOrthScoreVector[i].mmul(scoreMatPrime).mmul(this.kernelX[0][i].transpose()));\n\n      var p1 = Matrix.sub(KTestTrain[i][0], KTestTrain[i][i].mmul(this.YOrthScoreMat[i]).mmul(scoreMatPrime));\n      var p2 = YOrthScoreVector[i].mmul(scoreMatPrime).mmul(this.kernelX[i][i]);\n      var p3 = p2.mmul(this.YOrthScoreMat[i]).mmul(scoreMatPrime);\n\n      KTestTrain[i + 1][i + 1] = p1.sub(p2).add(p3);\n    }\n\n    predScoreMat[i] = KTestTrain[i][0].mmul(this.YScoreMat).mmul(this.SigmaPow);\n    var prediction = predScoreMat[i].mmul(this.TURegressionCoeff[i]).mmul(this.YLoadingMat.transpose());\n\n    return {\n      prediction: prediction,\n      predScoreMat: predScoreMat,\n      predYOrthVectors: YOrthScoreVector\n    };\n  }\n\n  /**\n     * Export the current model to JSON.\n     * @return {object} - Current model.\n     */\n  toJSON() {\n    return {\n      name: 'K-OPLS',\n      YLoadingMat: this.YLoadingMat,\n      SigmaPow: this.SigmaPow,\n      YScoreMat: this.YScoreMat,\n      predScoreMat: this.predScoreMat,\n      YOrthLoadingVec: this.YOrthLoadingVec,\n      YOrthEigen: this.YOrthEigen,\n      YOrthScoreMat: this.YOrthScoreMat,\n      toNorm: this.toNorm,\n      TURegressionCoeff: this.TURegressionCoeff,\n      kernelX: this.kernelX,\n      trainingSet: this.trainingSet,\n      orthogonalComp: this.orthogonalComp,\n      predictiveComp: this.predictiveComp\n    };\n  }\n\n  /**\n     * Load a K-OPLS with the given model.\n     * @param {object} model\n     * @param {Kernel} kernel - kernel used on the model, see [ml-kernel](https://github.com/mljs/kernel).\n     * @return {KOPLS}\n     */\n  static load(model, kernel) {\n    if (model.name !== 'K-OPLS') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    if (!kernel) {\n      throw new RangeError('You must provide a kernel for the model!');\n    }\n\n    model.kernel = kernel;\n    return new KOPLS(true, model);\n  }\n}\n","/**\n *  Constructs a confusion matrix\n * @class ConfusionMatrix\n * @example\n * const CM = new ConfusionMatrix([[13, 2], [10, 5]], ['cat', 'dog'])\n * @param {Array<Array<number>>} matrix - The confusion matrix, a 2D Array. Rows represent the actual label and columns\n *     the predicted label.\n * @param {Array<any>} labels - Labels of the confusion matrix, a 1D Array\n */\nclass ConfusionMatrix {\n    constructor(matrix, labels) {\n        if (matrix.length !== matrix[0].length) {\n            throw new Error('Confusion matrix must be square');\n        }\n        if (labels.length !== matrix.length) {\n            throw new Error('Confusion matrix and labels should have the same length');\n        }\n        this.labels = labels;\n        this.matrix = matrix;\n    }\n\n\n    /**\n     * Construct confusion matrix from the predicted and actual labels (classes). Be sure to provide the arguments in\n     * the correct order!\n     * @param {Array<any>} actual  - The predicted labels of the classification\n     * @param {Array<any>} predicted     - The actual labels of the classification. Has to be of same length as\n     *     predicted.\n     * @param {object} [options] - Additional options\n     * @param {Array<any>} [options.labels] - The list of labels that should be used. If not provided the distinct set\n     *     of labels present in predicted and actual is used. Labels are compared using the strict equality operator\n     *     '==='\n     * @return {ConfusionMatrix} - Confusion matrix\n     */\n    static fromLabels(actual, predicted, options = {}) {\n        if (predicted.length !== actual.length) {\n            throw new Error('predicted and actual must have the same length');\n        }\n        let distinctLabels;\n        if (options.labels) {\n            distinctLabels = new Set(options.labels);\n        } else {\n            distinctLabels = new Set([...actual, ...predicted]);\n        }\n        distinctLabels = Array.from(distinctLabels);\n        if (options.sort) {\n            distinctLabels.sort(options.sort);\n        }\n\n        // Create confusion matrix and fill with 0's\n        const matrix = Array.from({length: distinctLabels.length});\n        for (let i = 0; i < matrix.length; i++) {\n            matrix[i] = new Array(matrix.length);\n            matrix[i].fill(0);\n        }\n\n        for (let i = 0; i < predicted.length; i++) {\n            const actualIdx = distinctLabels.indexOf(actual[i]);\n            const predictedIdx = distinctLabels.indexOf(predicted[i]);\n            if (actualIdx >= 0 && predictedIdx >= 0) {\n                matrix[actualIdx][predictedIdx]++;\n            }\n        }\n\n        return new ConfusionMatrix(matrix, distinctLabels);\n    }\n\n    /**\n     * Get the confusion matrix\n     * @return {Array<Array<number> >}\n     */\n    getMatrix() {\n        return this.matrix;\n    }\n\n    getLabels() {\n        return this.labels;\n    }\n\n    /**\n     * Get the total number of samples\n     * @return {number}\n     */\n    getTotalCount() {\n        let predicted = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            for (var j = 0; j < this.matrix.length; j++) {\n                predicted += this.matrix[i][j];\n            }\n        }\n        return predicted;\n    }\n\n    /**\n     * Get the total number of true predictions\n     * @return {number}\n     */\n    getTrueCount() {\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            count += this.matrix[i][i];\n        }\n        return count;\n    }\n\n    /**\n     * Get the total number of false predictions.\n     * @return {number}\n     */\n    getFalseCount() {\n        return this.getTotalCount() - this.getTrueCount();\n    }\n\n    /**\n     * Get the number of true positive predictions.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getTruePositiveCount(label) {\n        const index = this.getIndex(label);\n        return this.matrix[index][index];\n    }\n\n    /**\n     * Get the number of true negative predictions\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getTrueNegativeCount(label) {\n        const index = this.getIndex(label);\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            for (var j = 0; j < this.matrix.length; j++) {\n                if (i !== index && j !== index) {\n                    count += this.matrix[i][j];\n                }\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Get the number of false positive predictions.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalsePositiveCount(label) {\n        const index = this.getIndex(label);\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            if (i !== index) {\n                count += this.matrix[i][index];\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Get the number of false negative predictions.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseNegativeCount(label) {\n        const index = this.getIndex(label);\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            if (i !== index) {\n                count += this.matrix[index][i];\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Get the number of real positive samples.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getPositiveCount(label) {\n        return this.getTruePositiveCount(label) + this.getFalseNegativeCount(label);\n    }\n\n    /**\n     * Get the number of real negative samples.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getNegativeCount(label) {\n        return this.getTrueNegativeCount(label) + this.getFalsePositiveCount(label);\n    }\n\n    /**\n     * Get the index in the confusion matrix that corresponds to the given label\n     * @param {any} label - The label to search for\n     * @throws if the label is not found\n     * @return {number}\n     */\n    getIndex(label) {\n        const index = this.labels.indexOf(label);\n        if (index === -1) throw new Error('The label does not exist');\n        return index;\n    }\n\n    /**\n     * Get the true positive rate a.k.a. sensitivity. Computes the ratio between the number of true positive predictions and the total number of positive samples.\n     * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number} - The true positive rate [0-1]\n     */\n    getTruePositiveRate(label) {\n        return this.getTruePositiveCount(label) / this.getPositiveCount(label);\n    }\n\n    /**\n     * Get the true negative rate a.k.a. specificity. Computes the ration between the number of true negative predictions and the total number of negative samples.\n     * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getTrueNegativeRate(label) {\n        return this.getTrueNegativeCount(label) / this.getNegativeCount(label);\n    }\n\n    /**\n     * Get the positive predictive value a.k.a. precision. Computes TP / (TP + FP)\n     * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getPositivePredictiveValue(label) {\n        const TP = this.getTruePositiveCount(label);\n        return TP / (TP + this.getFalsePositiveCount(label));\n    }\n\n    /**\n     * Negative predictive value\n     * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getNegativePredictiveValue(label) {\n        const TN = this.getTrueNegativeCount(label);\n        return TN / (TN + this.getFalseNegativeCount(label));\n    }\n\n    /**\n     * False negative rate a.k.a. miss rate.\n     * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseNegativeRate(label) {\n        return 1 - this.getTruePositiveRate(label);\n    }\n\n    /**\n     * False positive rate a.k.a. fall-out rate.\n     * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalsePositiveRate(label) {\n        return 1 - this.getTrueNegativeRate(label);\n    }\n\n    /**\n     * False discovery rate (FDR)\n     * {@link https://en.wikipedia.org/wiki/False_discovery_rate}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseDiscoveryRate(label) {\n        const FP = this.getFalsePositiveCount(label);\n        return FP / (FP + this.getTruePositiveCount(label));\n    }\n\n    /**\n     * False omission rate (FOR)\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseOmissionRate(label) {\n        const FN = this.getFalseNegativeCount(label);\n        return FN / (FN + this.getTruePositiveCount(label));\n    }\n\n    /**\n     * F1 score\n     * {@link https://en.wikipedia.org/wiki/F1_score}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getF1Score(label) {\n        const TP = this.getTruePositiveCount(label);\n        return 2 * TP / (2 * TP + this.getFalsePositiveCount(label) + this.getFalseNegativeCount(label));\n    }\n\n    /**\n     * Matthews correlation coefficient (MCC)\n     * {@link https://en.wikipedia.org/wiki/Matthews_correlation_coefficient}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getMatthewsCorrelationCoefficient(label) {\n        const TP = this.getTruePositiveCount(label);\n        const TN = this.getTrueNegativeCount(label);\n        const FP = this.getFalsePositiveCount(label);\n        const FN = this.getFalseNegativeCount(label);\n        return (TP * TN - FP * FN) / Math.sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN));\n    }\n\n    /**\n     * Informedness\n     * {@link https://en.wikipedia.org/wiki/Youden%27s_J_statistic}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getInformedness(label) {\n        return this.getTruePositiveRate(label) + this.getTrueNegativeRate(label) - 1;\n    }\n\n    /**\n     * Markedness\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getMarkedness(label) {\n        return this.getPositivePredictiveValue(label) + this.getNegativePredictiveValue(label) - 1;\n    }\n\n    /**\n     * Get the confusion table.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {Array<Array<number> >} - The 2x2 confusion table. [[TP, FN], [FP, TN]]\n     */\n    getConfusionTable(label) {\n        return [\n            [\n                this.getTruePositiveCount(label),\n                this.getFalseNegativeCount(label)\n            ],\n            [\n                this.getFalsePositiveCount(label),\n                this.getTrueNegativeCount(label)\n            ]\n        ];\n    }\n\n    /**\n     * Get total accuracy.\n     * @return {number} - The ratio between the number of true predictions and total number of classifications ([0-1])\n     */\n    getAccuracy() {\n        let correct = 0;\n        let incorrect = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            for (var j = 0; j < this.matrix.length; j++) {\n                if (i === j) correct += this.matrix[i][j];\n                else incorrect += this.matrix[i][j];\n            }\n        }\n        return correct / (correct + incorrect);\n    }\n\n\n    /**\n     * Returns the element in the confusion matrix that corresponds to the given actual and predicted labels.\n     * @param {any} actual - The true label\n     * @param {any} predicted - The predicted label\n     * @return {number} - The element in the confusion matrix\n     */\n    getCount(actual, predicted) {\n        const actualIndex = this.getIndex(actual);\n        const predictedIndex = this.getIndex(predicted);\n        return this.matrix[actualIndex][predictedIndex];\n    }\n\n    /**\n     * Compute the general prediction accuracy\n     * @deprecated Use getAccuracy\n     * @return {number} - The prediction accuracy ([0-1]\n     */\n    get accuracy() {\n        return this.getAccuracy();\n    }\n\n    /**\n     * Compute the number of predicted observations\n     * @deprecated Use getTotalCount\n     * @return {number}\n     */\n    get total() {\n        return this.getTotalCount();\n    }\n}\n\nmodule.exports = ConfusionMatrix;\n","'use strict';\nconst defaultOptions = {\n  mode: 'index'\n};\n\nmodule.exports = function *(M, N, options) {\n  options = Object.assign({}, defaultOptions, options);\n  var a = new Array(N);\n  var c = new Array(M);\n  var b = new Array(N);\n  var p = new Array(N + 2);\n  var x, y, z;\n\n  // init a and b\n  for (var i = 0; i < N; i++) {\n    a[i] = i;\n    if (i < N - M) b[i] = 0;\n    else b[i] = 1;\n  }\n\n  // init c\n  for (i = 0; i < M; i++) {\n    c[i] = N - M + i;\n  }\n\n  // init p\n  for (i = 0; i < p.length; i++) {\n    if (i === 0) p[i] = N + 1;\n    else if (i <= N - M) p[i] = 0;\n    else if (i <= N) p[i] = i - N + M;\n    else p[i] = -2;\n  }\n\n  function twiddle() {\n    var i, j, k;\n    j = 1;\n    while (p[j] <= 0) {\n      j++;\n    }\n    if (p[j - 1] === 0) {\n      for (i = j - 1; i !== 1; i--) {\n        p[i] = -1;\n      }\n      p[j] = 0;\n      x = z = 0;\n      p[1] = 1;\n      y = j - 1;\n    } else {\n      if (j > 1) {\n        p[j - 1] = 0;\n      }\n      do {\n        j++;\n      }\n      while (p[j] > 0);\n      k = j - 1;\n      i = j;\n      while (p[i] === 0) {\n        p[i++] = -1;\n      }\n      if (p[i] === -1) {\n        p[i] = p[k];\n        z = p[k] - 1;\n        x = i - 1;\n        y = k - 1;\n        p[k] = -1;\n      } else {\n        if (i === p[0]) {\n          return 0;\n        } else {\n          p[j] = p[i];\n          z = p[i] - 1;\n          p[i] = 0;\n          x = j - 1;\n          y = i - 1;\n        }\n      }\n    }\n    return 1;\n  }\n\n  if (options.mode === 'index') {\n    yield c.slice();\n    while (twiddle()) {\n      c[z] = a[x];\n      yield c.slice();\n    }\n  } else if (options.mode === 'mask') {\n    yield b.slice();\n    while (twiddle()) {\n      b[x] = 1;\n      b[y] = 0;\n      yield b.slice();\n    }\n  } else {\n    throw new Error('Invalid mode');\n  }\n};\n","'use strict';\n\nconst ConfusionMatrix = require('ml-confusion-matrix');\n\nconst CV = {};\nconst combinations = require('ml-combinations');\n\n/**\n * Performs a leave-one-out cross-validation (LOO-CV) of the given samples. In LOO-CV, 1 observation is used as the\n * validation set while the rest is used as the training set. This is repeated once for each observation. LOO-CV is a\n * special case of LPO-CV. @see leavePout\n * @param {function} Classifier - The classifier's constructor to use for the cross validation. Expect ml-classifier\n *     api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nCV.leaveOneOut = function (Classifier, features, labels, classifierOptions) {\n    if (typeof labels === 'function') {\n        var callback = labels;\n        labels = features;\n        features = Classifier;\n        return CV.leavePOut(features, labels, 1, callback);\n    }\n    return CV.leavePOut(Classifier, features, labels, classifierOptions, 1);\n};\n\n\n/**\n * Performs a leave-p-out cross-validation (LPO-CV) of the given samples. In LPO-CV, p observations are used as the\n * validation set while the rest is used as the training set. This is repeated as many times as there are possible\n * ways to combine p observations from the set (unordered without replacement). Be aware that for relatively small\n * data-set size this can require a very large number of training and testing to do!\n * @param {function} Classifier - The classifier's constructor to use for the cross validation. Expect ml-classifier\n *     api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @param {number} p - The size of the validation sub-samples' set\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nCV.leavePOut = function (Classifier, features, labels, classifierOptions, p) {\n    if (typeof classifierOptions === 'function') {\n        var callback = classifierOptions;\n        p = labels;\n        labels = features;\n        features = Classifier;\n    }\n    check(features, labels);\n    const distinct = getDistinct(labels);\n    const confusionMatrix = initMatrix(distinct.length, distinct.length);\n\n    var N = features.length;\n    var gen = combinations(p, N);\n    var allIdx = new Array(N);\n    for (let i = 0; i < N; i++) {\n        allIdx[i] = i;\n    }\n    for (const testIdx of gen) {\n        var trainIdx = allIdx.slice();\n\n        for (let i = testIdx.length - 1; i >= 0; i--) {\n            trainIdx.splice(testIdx[i], 1);\n        }\n\n        if (callback) {\n            validateWithCallback(features, labels, testIdx, trainIdx, confusionMatrix, distinct, callback);\n        } else {\n            validate(Classifier, features, labels, classifierOptions, testIdx, trainIdx, confusionMatrix, distinct);\n        }\n\n    }\n\n    return new ConfusionMatrix(confusionMatrix, distinct);\n};\n\n/**\n * Performs k-fold cross-validation (KF-CV). KF-CV separates the data-set into k random equally sized partitions, and\n * uses each as a validation set, with all other partitions used in the training set. Observations left over from if k\n * does not divide the number of observations are left out of the cross-validation process.\n * @param {function} Classifier - The classifier's to use for the cross validation. Expect ml-classifier api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @param {number} k - The number of partitions to create\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nCV.kFold = function (Classifier, features, labels, classifierOptions, k) {\n    if (typeof classifierOptions === 'function') {\n        var callback = classifierOptions;\n        k = labels;\n        labels = features;\n        features = Classifier;\n    }\n    check(features, labels);\n    const distinct = getDistinct(labels);\n    const confusionMatrix = initMatrix(distinct.length, distinct.length);\n    var N = features.length;\n    var allIdx = new Array(N);\n    for (var i = 0; i < N; i++) {\n        allIdx[i] = i;\n    }\n\n    var l = Math.floor(N / k);\n    // create random k-folds\n    var current = [];\n    var folds = [];\n    while (allIdx.length) {\n        var randi = Math.floor(Math.random() * allIdx.length);\n        current.push(allIdx[randi]);\n        allIdx.splice(randi, 1);\n        if (current.length === l) {\n            folds.push(current);\n            current = [];\n        }\n    }\n    if (current.length) folds.push(current);\n    folds = folds.slice(0, k);\n\n\n    for (i = 0; i < folds.length; i++) {\n        var testIdx = folds[i];\n        var trainIdx = [];\n        for (var j = 0; j < folds.length; j++) {\n            if (j !== i) trainIdx = trainIdx.concat(folds[j]);\n        }\n\n        if (callback) {\n            validateWithCallback(features, labels, testIdx, trainIdx, confusionMatrix, distinct, callback);\n        } else {\n            validate(Classifier, features, labels, classifierOptions, testIdx, trainIdx, confusionMatrix, distinct);\n        }\n    }\n\n    return new ConfusionMatrix(confusionMatrix, distinct);\n};\n\nfunction check(features, labels) {\n    if (features.length !== labels.length) {\n        throw new Error('features and labels should have the same length');\n    }\n}\n\nfunction initMatrix(rows, columns) {\n    return new Array(rows).fill(0).map(() => new Array(columns).fill(0));\n}\n\nfunction getDistinct(arr) {\n    var s = new Set();\n    for (let i = 0; i < arr.length; i++) {\n        s.add(arr[i]);\n    }\n    return Array.from(s);\n}\n\nfunction validate(Classifier, features, labels, classifierOptions, testIdx, trainIdx, confusionMatrix, distinct) {\n    const {testFeatures, trainFeatures, testLabels, trainLabels} = getTrainTest(features, labels, testIdx, trainIdx);\n\n    var classifier;\n    if (Classifier.prototype.train) {\n        classifier = new Classifier(classifierOptions);\n        classifier.train(trainFeatures, trainLabels);\n    } else {\n        classifier = new Classifier(trainFeatures, trainLabels, classifierOptions);\n    }\n\n    var predictedLabels = classifier.predict(testFeatures);\n    updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct);\n}\n\nfunction validateWithCallback(features, labels, testIdx, trainIdx, confusionMatrix, distinct, callback) {\n    const {testFeatures, trainFeatures, testLabels, trainLabels} = getTrainTest(features, labels, testIdx, trainIdx);\n    const predictedLabels = callback(trainFeatures, trainLabels, testFeatures);\n    updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct);\n}\n\nfunction updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct) {\n\n    for (var i = 0; i < predictedLabels.length; i++) {\n        const actualIdx = distinct.indexOf(testLabels[i]);\n        const predictedIdx = distinct.indexOf(predictedLabels[i]);\n        if (actualIdx < 0 || predictedIdx < 0) {\n            // eslint-disable-next-line no-console\n            console.warn(`ignore unknown predicted label ${predictedLabels[i]}`);\n        }\n        confusionMatrix[actualIdx][predictedIdx]++;\n    }\n}\n\n\nfunction getTrainTest(features, labels, testIdx, trainIdx) {\n    return {\n        testFeatures: testIdx.map(function (index) {\n            return features[index];\n        }),\n        trainFeatures: trainIdx.map(function (index) {\n            return features[index];\n        }),\n        testLabels: testIdx.map(function (index) {\n            return labels[index];\n        }),\n        trainLabels: trainIdx.map(function (index) {\n            return labels[index];\n        })\n    };\n}\n\nmodule.exports = CV;\n","'use strict';\n\nvar mlMatrix = require('ml-matrix');\n\nfunction logistic(val) {\n  return 1 / (1 + Math.exp(-val));\n}\n\nfunction expELU(val, param) {\n  return val < 0 ? param * (Math.exp(val) - 1) : val;\n}\n\nfunction softExponential(val, param) {\n  if (param < 0) {\n    return -Math.log(1 - param * (val + param)) / param;\n  }\n  if (param > 0) {\n    return ((Math.exp(param * val) - 1) / param) + param;\n  }\n  return val;\n}\n\nfunction softExponentialPrime(val, param) {\n  if (param < 0) {\n    return 1 / (1 - param * (param + val));\n  } else {\n    return Math.exp(param * val);\n  }\n}\n\nconst ACTIVATION_FUNCTIONS = {\n  tanh: {\n    activation: Math.tanh,\n    derivate: (val) => 1 - (val * val)\n  },\n  identity: {\n    activation: (val) => val,\n    derivate: () => 1\n  },\n  logistic: {\n    activation: logistic,\n    derivate: (val) => logistic(val) * (1 - logistic(val))\n  },\n  arctan: {\n    activation: Math.atan,\n    derivate: (val) => 1 / (val * val + 1)\n  },\n  softsign: {\n    activation: (val) => val / (1 + Math.abs(val)),\n    derivate: (val) => 1 / ((1 + Math.abs(val)) * (1 + Math.abs(val)))\n  },\n  relu: {\n    activation: (val) => (val < 0 ? 0 : val),\n    derivate: (val) => (val < 0 ? 0 : 1)\n  },\n  softplus: {\n    activation: (val) => Math.log(1 + Math.exp(val)),\n    derivate: (val) => 1 / (1 + Math.exp(-val))\n  },\n  bent: {\n    activation: (val) => ((Math.sqrt(val * val + 1) - 1) / 2) + val,\n    derivate: (val) => (val / (2 * Math.sqrt(val * val + 1))) + 1\n  },\n  sinusoid: {\n    activation: Math.sin,\n    derivate: Math.cos\n  },\n  sinc: {\n    activation: (val) => (val === 0 ? 1 : Math.sin(val) / val),\n    derivate: (val) => (val === 0 ? 0 : (Math.cos(val) / val) - (Math.sin(val) / (val * val)))\n  },\n  gaussian: {\n    activation: (val) => Math.exp(-(val * val)),\n    derivate: (val) => -2 * val * Math.exp(-(val * val))\n  },\n  'parametric-relu': {\n    activation: (val, param) => (val < 0 ? param * val : val),\n    derivate: (val, param) => (val < 0 ? param : 1)\n  },\n  'exponential-elu': {\n    activation: expELU,\n    derivate: (val, param) => (val < 0 ? expELU(val, param) + param : 1)\n  },\n  'soft-exponential': {\n    activation: softExponential,\n    derivate: softExponentialPrime\n  }\n};\n\nclass Layer {\n  /**\n     * @private\n     * Create a new layer with the given options\n     * @param {object} options\n     * @param {number} [options.inputSize] - Number of conections that enter the neurons.\n     * @param {number} [options.outputSize] - Number of conections that leave the neurons.\n     * @param {number} [options.regularization] - Regularization parameter.\n     * @param {number} [options.epsilon] - Learning rate parameter.\n     * @param {string} [options.activation] - Activation function parameter from the FeedForwardNeuralNetwork class.\n     * @param {number} [options.activationParam] - Activation parameter if needed.\n     */\n  constructor(options) {\n    this.inputSize = options.inputSize;\n    this.outputSize = options.outputSize;\n    this.regularization = options.regularization;\n    this.epsilon = options.epsilon;\n    this.activation = options.activation;\n    this.activationParam = options.activationParam;\n\n    var selectedFunction = ACTIVATION_FUNCTIONS[options.activation];\n    var params = selectedFunction.activation.length;\n\n    var actFunction = params > 1 ? (val) => selectedFunction.activation(val, options.activationParam) : selectedFunction.activation;\n    var derFunction = params > 1 ? (val) => selectedFunction.derivate(val, options.activationParam) : selectedFunction.derivate;\n\n    this.activationFunction = function (i, j) {\n      this.set(i, j, actFunction(this.get(i, j)));\n    };\n    this.derivate = function (i, j) {\n      this.set(i, j, derFunction(this.get(i, j)));\n    };\n\n    if (options.model) {\n      // load model\n      this.W = mlMatrix.Matrix.checkMatrix(options.W);\n      this.b = mlMatrix.Matrix.checkMatrix(options.b);\n    } else {\n      // default constructor\n      this.W = mlMatrix.Matrix.rand(this.inputSize, this.outputSize);\n      this.b = mlMatrix.Matrix.zeros(1, this.outputSize);\n\n      this.W.apply(function (i, j) {\n        this.set(i, j, this.get(i, j) / Math.sqrt(options.inputSize));\n      });\n    }\n  }\n\n  /**\n     * @private\n     * propagate the given input through the current layer.\n     * @param {Matrix} X - input.\n     * @return {Matrix} output at the current layer.\n     */\n  forward(X) {\n    var z = X.mmul(this.W).addRowVector(this.b);\n    z.apply(this.activationFunction);\n    this.a = z.clone();\n    return z;\n  }\n\n  /**\n     * @private\n     * apply backpropagation algorithm at the current layer\n     * @param {Matrix} delta - delta values estimated at the following layer.\n     * @param {Matrix} a - 'a' values from the following layer.\n     * @return {Matrix} the new delta values for the next layer.\n     */\n  backpropagation(delta, a) {\n    this.dW = a.transpose().mmul(delta);\n    this.db = mlMatrix.Matrix.rowVector(delta.sum('column'));\n\n    var aCopy = a.clone();\n    return delta.mmul(this.W.transpose()).mul(aCopy.apply(this.derivate));\n  }\n\n  /**\n     * @private\n     * Function that updates the weights at the current layer with the derivatives.\n     */\n  update() {\n    this.dW.add(this.W.clone().mul(this.regularization));\n    this.W.add(this.dW.mul(-this.epsilon));\n    this.b.add(this.db.mul(-this.epsilon));\n  }\n\n  /**\n     * @private\n     * Export the current layer to JSON.\n     * @return {object} model\n     */\n  toJSON() {\n    return {\n      model: 'Layer',\n      inputSize: this.inputSize,\n      outputSize: this.outputSize,\n      regularization: this.regularization,\n      epsilon: this.epsilon,\n      activation: this.activation,\n      W: this.W,\n      b: this.b\n    };\n  }\n\n  /**\n     * @private\n     * Creates a new Layer with the given model.\n     * @param {object} model\n     * @return {Layer}\n     */\n  static load(model) {\n    if (model.model !== 'Layer') {\n      throw new RangeError('the current model is not a Layer model');\n    }\n    return new Layer(model);\n  }\n}\n\nclass OutputLayer extends Layer {\n  constructor(options) {\n    super(options);\n\n    this.activationFunction = function (i, j) {\n      this.set(i, j, Math.exp(this.get(i, j)));\n    };\n  }\n\n  static load(model) {\n    if (model.model !== 'Layer') {\n      throw new RangeError('the current model is not a Layer model');\n    }\n\n    return new OutputLayer(model);\n  }\n}\n\nclass FeedForwardNeuralNetworks {\n  /**\n   * Create a new Feedforward neural network model.\n   * @class FeedForwardNeuralNetworks\n   * @param {object} [options]\n   * @param {Array} [options.hiddenLayers=[10]] - Array that contains the sizes of the hidden layers.\n   * @param {number} [options.iterations=50] - Number of iterations at the training step.\n   * @param {number} [options.learningRate=0.01] - Learning rate of the neural net (also known as epsilon).\n   * @param {number} [options.regularization=0.01] - Regularization parameter af the neural net.\n   * @param {string} [options.activation='tanh'] - activation function to be used. (options: 'tanh'(default),\n   * 'identity', 'logistic', 'arctan', 'softsign', 'relu', 'softplus', 'bent', 'sinusoid', 'sinc', 'gaussian').\n   * (single-parametric options: 'parametric-relu', 'exponential-relu', 'soft-exponential').\n   * @param {number} [options.activationParam=1] - if the selected activation function needs a parameter.\n   */\n  constructor(options) {\n    options = options || {};\n    if (options.model) {\n      // load network\n      this.hiddenLayers = options.hiddenLayers;\n      this.iterations = options.iterations;\n      this.learningRate = options.learningRate;\n      this.regularization = options.regularization;\n      this.dicts = options.dicts;\n      this.activation = options.activation;\n      this.activationParam = options.activationParam;\n      this.model = new Array(options.layers.length);\n\n      for (var i = 0; i < this.model.length - 1; ++i) {\n        this.model[i] = Layer.load(options.layers[i]);\n      }\n      this.model[this.model.length - 1] = OutputLayer.load(options.layers[this.model.length - 1]);\n    } else {\n      // default constructor\n      this.hiddenLayers = options.hiddenLayers || [10];\n      this.iterations = options.iterations || 50;\n\n      this.learningRate = options.learningRate || 0.01;\n      this.regularization = options.regularization || 0.01;\n\n      this.activation = options.activation || 'tanh';\n      this.activationParam = options.activationParam || 1;\n      if (!(this.activation in Object.keys(ACTIVATION_FUNCTIONS))) {\n        this.activation = 'tanh';\n      }\n    }\n  }\n\n  /**\n   * @private\n   * Function that build and initialize the neural net.\n   * @param {number} inputSize - total of features to fit.\n   * @param {number} outputSize - total of labels of the prediction set.\n   */\n  buildNetwork(inputSize, outputSize) {\n    var size = 2 + (this.hiddenLayers.length - 1);\n    this.model = new Array(size);\n\n    // input layer\n    this.model[0] = new Layer({\n      inputSize: inputSize,\n      outputSize: this.hiddenLayers[0],\n      activation: this.activation,\n      activationParam: this.activationParam,\n      regularization: this.regularization,\n      epsilon: this.learningRate\n    });\n\n    // hidden layers\n    for (var i = 1; i < this.hiddenLayers.length; ++i) {\n      this.model[i] = new Layer({\n        inputSize: this.hiddenLayers[i - 1],\n        outputSize: this.hiddenLayers[i],\n        activation: this.activation,\n        activationParam: this.activationParam,\n        regularization: this.regularization,\n        epsilon: this.learningRate\n      });\n    }\n\n    // output layer\n    this.model[size - 1] = new OutputLayer({\n      inputSize: this.hiddenLayers[this.hiddenLayers.length - 1],\n      outputSize: outputSize,\n      activation: this.activation,\n      activationParam: this.activationParam,\n      regularization: this.regularization,\n      epsilon: this.learningRate\n    });\n  }\n\n  /**\n   * Train the neural net with the given features and labels.\n   * @param {Matrix|Array} features\n   * @param {Matrix|Array} labels\n   */\n  train(features, labels) {\n    features = mlMatrix.Matrix.checkMatrix(features);\n    this.dicts = dictOutputs(labels);\n\n    var inputSize = features.columns;\n    var outputSize = Object.keys(this.dicts.inputs).length;\n\n    if (!this.model) {\n      this.buildNetwork(inputSize, outputSize);\n    }\n\n    for (var i = 0; i < this.iterations; ++i) {\n      var probabilities = this.propagate(features);\n      this.backpropagation(features, labels, probabilities);\n    }\n  }\n\n  /**\n   * @private\n   * Propagate the input(training set) and retrives the probabilities of each class.\n   * @param {Matrix} X\n   * @return {Matrix} probabilities of each class.\n   */\n  propagate(X) {\n    var input = X;\n    for (var i = 0; i < this.model.length; ++i) {\n      input = this.model[i].forward(input);\n    }\n\n    // get probabilities\n    return input.divColumnVector(input.sum('row'));\n  }\n\n  /**\n   * @private\n   * Function that applies the backpropagation algorithm on each layer of the network\n   * in order to fit the features and labels.\n   * @param {Matrix} features\n   * @param {Array} labels\n   * @param {Matrix} probabilities - probabilities of each class of the feature set.\n   */\n  backpropagation(features, labels, probabilities) {\n    for (var i = 0; i < probabilities.rows; ++i) {\n      probabilities.set(i, this.dicts.inputs[labels[i]], probabilities.get(i, this.dicts.inputs[labels[i]]) - 1);\n    }\n\n    // remember, the last delta doesn't matter\n    var delta = probabilities;\n    for (i = this.model.length - 1; i >= 0; --i) {\n      var a = i > 0 ? this.model[i - 1].a : features;\n      delta = this.model[i].backpropagation(delta, a);\n    }\n\n    for (i = 0; i < this.model.length; ++i) {\n      this.model[i].update();\n    }\n  }\n\n  /**\n   * Predict the output given the feature set.\n   * @param {Array|Matrix} features\n   * @return {Array}\n   */\n  predict(features) {\n    features = mlMatrix.Matrix.checkMatrix(features);\n    var outputs = new Array(features.rows);\n    var probabilities = this.propagate(features);\n    for (var i = 0; i < features.rows; ++i) {\n      outputs[i] = this.dicts.outputs[probabilities.maxRowIndex(i)[1]];\n    }\n\n    return outputs;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} model\n   */\n  toJSON() {\n    var model = {\n      model: 'FNN',\n      hiddenLayers: this.hiddenLayers,\n      iterations: this.iterations,\n      learningRate: this.learningRate,\n      regularization: this.regularization,\n      activation: this.activation,\n      activationParam: this.activationParam,\n      dicts: this.dicts,\n      layers: new Array(this.model.length)\n    };\n\n    for (var i = 0; i < this.model.length; ++i) {\n      model.layers[i] = this.model[i].toJSON();\n    }\n\n    return model;\n  }\n\n  /**\n   * Load a Feedforward Neural Network with the current model.\n   * @param {object} model\n   * @return {FeedForwardNeuralNetworks}\n   */\n  static load(model) {\n    if (model.model !== 'FNN') {\n      throw new RangeError('the current model is not a feed forward network');\n    }\n\n    return new FeedForwardNeuralNetworks(model);\n  }\n}\n\n/**\n * @private\n * Method that given an array of labels(predictions), returns two dictionaries, one to transform from labels to\n * numbers and other in the reverse way\n * @param {Array} array\n * @return {object}\n */\nfunction dictOutputs(array) {\n  var inputs = {};\n  var outputs = {};\n  var index = 0;\n  for (var i = 0; i < array.length; i += 1) {\n    if (inputs[array[i]] === undefined) {\n      inputs[array[i]] = index;\n      outputs[index] = array[i];\n      index++;\n    }\n  }\n\n  return {\n    inputs: inputs,\n    outputs: outputs\n  };\n}\n\nmodule.exports = FeedForwardNeuralNetworks;\n","function NodeSquare(x, y, weights, som) {\n    this.x = x;\n    this.y = y;\n    this.weights = weights;\n    this.som = som;\n    this.neighbors = {};\n}\n\nNodeSquare.prototype.adjustWeights = function adjustWeights(target, learningRate, influence) {\n    for (var i = 0, ii = this.weights.length; i < ii; i++) {\n        this.weights[i] += learningRate * influence * (target[i] - this.weights[i]);\n    }\n};\n\nNodeSquare.prototype.getDistance = function getDistance(otherNode) {\n    return Math.max(Math.abs(this.x - otherNode.x), Math.abs(this.y - otherNode.y));\n};\n\nNodeSquare.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {\n    var distX = Math.abs(this.x - otherNode.x),\n        distY = Math.abs(this.y - otherNode.y);\n    return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY));\n};\n\nNodeSquare.prototype.getNeighbors = function getNeighbors(xy) {\n    if (!this.neighbors[xy]) {\n        this.neighbors[xy] = new Array(2);\n\n        // left or bottom neighbor\n        var v;\n        if (this[xy] > 0) {\n            v = this[xy] - 1;\n        } else if (this.som.torus) {\n            v = this.som.gridDim[xy] - 1\n        }\n        if (typeof v !== 'undefined') {\n            var x, y;\n            if (xy === 'x') {\n                x = v;\n                y = this.y;\n            } else {\n                x = this.x;\n                y = v;\n            }\n            this.neighbors[xy][0] = this.som.nodes[x][y];\n        }\n\n        // top or right neighbor\n        var w;\n        if (this[xy] < (this.som.gridDim[xy] - 1)) {\n            w = this[xy] + 1;\n        } else if (this.som.torus) {\n            w = 0;\n        }\n        if (typeof w !== 'undefined') {\n            if (xy === 'x') {\n                x = w;\n                y = this.y;\n            } else {\n                x = this.x;\n                y = w;\n            }\n            this.neighbors[xy][1] = this.som.nodes[x][y];\n        }\n    }\n    return this.neighbors[xy];\n};\n\nNodeSquare.prototype.getPos = function getPos(xy, element) {\n    var neighbors = this.getNeighbors(xy),\n        distance = this.som.distance,\n        bestNeighbor,\n        direction;\n    if(neighbors[0]) {\n        if (neighbors[1]) {\n            var dist1 = distance(element, neighbors[0].weights),\n                dist2 = distance(element, neighbors[1].weights);\n            if(dist1 < dist2) {\n                bestNeighbor = neighbors[0];\n                direction = -1;\n            } else {\n                bestNeighbor = neighbors[1];\n                direction = 1;\n            }\n        } else {\n            bestNeighbor = neighbors[0];\n            direction = -1;\n        }\n    } else {\n        bestNeighbor = neighbors[1];\n        direction = 1;\n    }\n    var simA = 1 - distance(element, this.weights),\n        simB = 1 - distance(element, bestNeighbor.weights);\n    var factor = ((simA - simB) / (2 - simA - simB));\n    return 0.5 + 0.5 * factor * direction;\n};\n\nNodeSquare.prototype.getPosition = function getPosition(element) {\n    return [\n        this.getPos('x', element),\n        this.getPos('y', element)\n    ];\n};\n\nmodule.exports = NodeSquare;","var NodeSquare = require('./node-square');\n\nfunction NodeHexagonal(x, y, weights, som) {\n\n    NodeSquare.call(this, x, y, weights, som);\n\n    this.hX = x - Math.floor(y / 2);\n    this.z = 0 - this.hX - y;\n\n}\n\nNodeHexagonal.prototype = new NodeSquare;\nNodeHexagonal.prototype.constructor = NodeHexagonal;\n\nNodeHexagonal.prototype.getDistance = function getDistanceHexagonal(otherNode) {\n    return Math.max(Math.abs(this.hX - otherNode.hX), Math.abs(this.y - otherNode.y), Math.abs(this.z - otherNode.z));\n};\n\nNodeHexagonal.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {\n    var distX = Math.abs(this.hX - otherNode.hX),\n        distY = Math.abs(this.y - otherNode.y),\n        distZ = Math.abs(this.z - otherNode.z);\n    return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY), Math.min(distZ, this.som.gridDim.z - distZ));\n};\n\nNodeHexagonal.prototype.getPosition = function getPosition() {\n    throw new Error('Unimplemented : cannot get position of the points for hexagonal grid');\n};\n\nmodule.exports = NodeHexagonal;","'use strict';\n\nvar NodeSquare = require('./node-square'),\n    NodeHexagonal = require('./node-hexagonal');\n\nvar defaultOptions = {\n    fields: 3,\n    randomizer: Math.random,\n    distance: squareEuclidean,\n    iterations: 10,\n    learningRate: 0.1,\n    gridType: 'rect',\n    torus: true,\n    method: 'random'\n};\n\nfunction SOM(x, y, options, reload) {\n\n    this.x = x;\n    this.y = y;\n\n    options = options || {};\n    this.options = {};\n    for (var i in defaultOptions) {\n        if (options.hasOwnProperty(i)) {\n            this.options[i] = options[i];\n        } else {\n            this.options[i] = defaultOptions[i];\n        }\n    }\n\n    if (typeof this.options.fields === 'number') {\n        this.numWeights = this.options.fields;\n    } else if (Array.isArray(this.options.fields)) {\n        this.numWeights = this.options.fields.length;\n        var converters = getConverters(this.options.fields);\n        this.extractor = converters.extractor;\n        this.creator = converters.creator;\n    } else {\n        throw new Error('Invalid fields definition');\n    }\n\n    if (this.options.gridType === 'rect') {\n        this.nodeType = NodeSquare;\n        this.gridDim = {\n            x: x,\n            y: y\n        };\n    } else {\n        this.nodeType = NodeHexagonal;\n        var hx = this.x - Math.floor(this.y / 2);\n        this.gridDim = {\n            x: hx,\n            y: this.y,\n            z: -(0 - hx - this.y)\n        };\n    }\n\n    this.torus = this.options.torus;\n    this.distanceMethod = this.torus ? 'getDistanceTorus' : 'getDistance';\n\n    this.distance = this.options.distance;\n\n    this.maxDistance = getMaxDistance(this.distance, this.numWeights);\n\n    if (reload === true) { // For model loading\n        this.done = true;\n        return;\n    }\n    if (!(x > 0 && y > 0)) {\n        throw new Error('x and y must be positive');\n    }\n\n    this.times = {\n        findBMU: 0,\n        adjust: 0\n    };\n\n    this.randomizer = this.options.randomizer;\n\n    this.iterationCount = 0;\n    this.iterations = this.options.iterations;\n\n    this.startLearningRate = this.learningRate = this.options.learningRate;\n\n    this.mapRadius = Math.floor(Math.max(x, y) / 2);\n\n    this.algorithmMethod = this.options.method;\n\n    this._initNodes();\n\n    this.done = false;\n}\n\nSOM.load = function loadModel(model, distance) {\n    if (model.name === 'SOM') {\n        var x = model.data.length,\n            y = model.data[0].length;\n        if (distance) {\n            model.options.distance = distance;\n        } else if (model.options.distance) {\n            model.options.distance = eval('(' + model.options.distance + ')');\n        }\n        var som = new SOM(x, y, model.options, true);\n        som.nodes = new Array(x);\n        for (var i = 0; i < x; i++) {\n            som.nodes[i] = new Array(y);\n            for (var j = 0; j < y; j++) {\n                som.nodes[i][j] = new som.nodeType(i, j, model.data[i][j], som);\n            }\n        }\n        return som;\n    } else {\n        throw new Error('expecting a SOM model');\n    }\n};\n\nSOM.prototype.export = function exportModel(includeDistance) {\n    if (!this.done) {\n        throw new Error('model is not ready yet');\n    }\n    var model = {\n        name: 'SOM'\n    };\n    model.options = {\n        fields: this.options.fields,\n        gridType: this.options.gridType,\n        torus: this.options.torus\n    };\n    model.data = new Array(this.x);\n    for (var i = 0; i < this.x; i++) {\n        model.data[i] = new Array(this.y);\n        for (var j = 0; j < this.y; j++) {\n            model.data[i][j] = this.nodes[i][j].weights;\n        }\n    }\n    if (includeDistance) {\n        model.options.distance = this.distance.toString();\n    }\n    return model;\n};\n\nSOM.prototype._initNodes = function initNodes() {\n    var now = Date.now(),\n        i, j, k;\n    this.nodes = new Array(this.x);\n    for (i = 0; i < this.x; i++) {\n        this.nodes[i] = new Array(this.y);\n        for (j = 0; j < this.y; j++) {\n            var weights = new Array(this.numWeights);\n            for (k = 0; k < this.numWeights; k++) {\n                weights[k] = this.randomizer();\n            }\n            this.nodes[i][j] = new this.nodeType(i, j, weights, this);\n        }\n    }\n    this.times.initNodes = Date.now() - now;\n};\n\nSOM.prototype.setTraining = function setTraining(trainingSet) {\n    if (this.trainingSet) {\n        throw new Error('training set has already been set');\n    }\n    var now = Date.now();\n    var convertedSet = trainingSet;\n    var i, l = trainingSet.length;\n    if (this.extractor) {\n        convertedSet = new Array(l);\n        for (i = 0; i < l; i++) {\n            convertedSet[i] = this.extractor(trainingSet[i]);\n        }\n    }\n    this.numIterations = this.iterations * l;\n\n    if (this.algorithmMethod === 'random') {\n        this.timeConstant = this.numIterations / Math.log(this.mapRadius);\n    } else {\n        this.timeConstant = l / Math.log(this.mapRadius);\n    }\n    this.trainingSet = convertedSet;\n    this.times.setTraining = Date.now() - now;\n};\n\nSOM.prototype.trainOne = function trainOne() {\n    if (this.done) {\n\n        return false;\n\n    } else if (this.numIterations-- > 0) {\n\n        var neighbourhoodRadius,\n            trainingValue,\n            trainingSetFactor;\n\n        if (this.algorithmMethod === 'random') { // Pick a random value of the training set at each step\n            neighbourhoodRadius = this.mapRadius * Math.exp(-this.iterationCount / this.timeConstant);\n            trainingValue = getRandomValue(this.trainingSet, this.randomizer);\n            this._adjust(trainingValue, neighbourhoodRadius);\n            this.learningRate = this.startLearningRate * Math.exp(-this.iterationCount / this.numIterations);\n        } else { // Get next input vector\n            trainingSetFactor = -Math.floor(this.iterationCount / this.trainingSet.length);\n            neighbourhoodRadius = this.mapRadius * Math.exp(trainingSetFactor / this.timeConstant);\n            trainingValue = this.trainingSet[this.iterationCount % this.trainingSet.length];\n            this._adjust(trainingValue, neighbourhoodRadius);\n            if (((this.iterationCount + 1) % this.trainingSet.length) === 0) {\n                this.learningRate = this.startLearningRate * Math.exp(trainingSetFactor / Math.floor(this.numIterations / this.trainingSet.length));\n            }\n        }\n\n        this.iterationCount++;\n\n        return true;\n\n    } else {\n\n        this.done = true;\n        return false;\n\n    }\n};\n\nSOM.prototype._adjust = function adjust(trainingValue, neighbourhoodRadius) {\n    var now = Date.now(),\n        x, y, dist, influence;\n\n    var bmu = this._findBestMatchingUnit(trainingValue);\n\n    var now2 = Date.now();\n    this.times.findBMU += now2 - now;\n\n    var radiusLimit = Math.floor(neighbourhoodRadius);\n    var xMin = bmu.x - radiusLimit,\n        xMax = bmu.x + radiusLimit,\n        yMin = bmu.y - radiusLimit,\n        yMax = bmu.y + radiusLimit;\n\n    for (x = xMin; x <= xMax; x++) {\n        var theX = x;\n        if (x < 0) {\n            theX += this.x;\n        } else if (x >= this.x) {\n            theX -= this.x;\n        }\n        for (y = yMin; y <= yMax; y++) {\n            var theY = y;\n            if (y < 0) {\n                theY += this.y;\n            } else if (y >= this.y) {\n                theY -= this.y;\n            }\n\n            dist = bmu[this.distanceMethod](this.nodes[theX][theY]);\n\n            if (dist < neighbourhoodRadius) {\n                influence = Math.exp(-dist / (2 * neighbourhoodRadius));\n                this.nodes[theX][theY].adjustWeights(trainingValue, this.learningRate, influence);\n            }\n\n        }\n    }\n\n    this.times.adjust += (Date.now() - now2);\n\n};\n\nSOM.prototype.train = function train(trainingSet) {\n    if (!this.done) {\n        this.setTraining(trainingSet);\n        while (this.trainOne()) {\n        }\n    }\n};\n\nSOM.prototype.getConvertedNodes = function getConvertedNodes() {\n    var result = new Array(this.x);\n    for (var i = 0; i < this.x; i++) {\n        result[i] = new Array(this.y);\n        for (var j = 0; j < this.y; j++) {\n            var node = this.nodes[i][j];\n            result[i][j] = this.creator ? this.creator(node.weights) : node.weights;\n        }\n    }\n    return result;\n};\n\nSOM.prototype._findBestMatchingUnit = function findBestMatchingUnit(candidate) {\n\n    var bmu,\n        lowest = Infinity,\n        dist;\n\n    for (var i = 0; i < this.x; i++) {\n        for (var j = 0; j < this.y; j++) {\n            dist = this.distance(this.nodes[i][j].weights, candidate);\n            if (dist < lowest) {\n                lowest = dist;\n                bmu = this.nodes[i][j];\n            }\n        }\n    }\n\n    return bmu;\n\n};\n\nSOM.prototype.predict = function predict(data, computePosition) {\n    if (typeof data === 'boolean') {\n        computePosition = data;\n        data = null;\n    }\n    if (!data) {\n        data = this.trainingSet;\n    }\n    if (Array.isArray(data) && (Array.isArray(data[0]) || (typeof data[0] === 'object'))) { // predict a dataset\n        var self = this;\n        return data.map(function (element) {\n            return self._predict(element, computePosition);\n        });\n    } else { // predict a single element\n        return this._predict(data, computePosition);\n    }\n};\n\nSOM.prototype._predict = function _predict(element, computePosition) {\n    if (!Array.isArray(element)) {\n        element = this.extractor(element);\n    }\n    var bmu = this._findBestMatchingUnit(element);\n    var result = [bmu.x, bmu.y];\n    if (computePosition) {\n        result[2] = bmu.getPosition(element);\n    }\n    return result;\n};\n\n// As seen in http://www.scholarpedia.org/article/Kohonen_network\nSOM.prototype.getQuantizationError = function getQuantizationError() {\n    var fit = this.getFit(),\n        l = fit.length,\n        sum = 0;\n    for (var i = 0; i < l; i++) {\n        sum += fit[i];\n    }\n    return sum / l;\n};\n\nSOM.prototype.getFit = function getFit(dataset) {\n    if (!dataset) {\n        dataset = this.trainingSet;\n    }\n    var l = dataset.length,\n        bmu,\n        result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        bmu = this._findBestMatchingUnit(dataset[i]);\n        result[i] = Math.sqrt(this.distance(dataset[i], bmu.weights));\n    }\n    return result;\n};\n\nfunction getConverters(fields) {\n    var l = fields.length,\n        normalizers = new Array(l),\n        denormalizers = new Array(l);\n    for (var i = 0; i < l; i++) {\n        normalizers[i] = getNormalizer(fields[i].range);\n        denormalizers[i] = getDenormalizer(fields[i].range);\n    }\n    return {\n        extractor: function extractor(value) {\n            var result = new Array(l);\n            for (var i = 0; i < l; i++) {\n                result[i] = normalizers[i](value[fields[i].name]);\n            }\n            return result;\n        },\n        creator: function creator(value) {\n            var result = {};\n            for (var i = 0; i < l; i++) {\n                result[fields[i].name] = denormalizers[i](value[i]);\n            }\n            return result;\n        }\n    };\n}\n\nfunction getNormalizer(minMax) {\n    return function normalizer(value) {\n        return (value - minMax[0]) / (minMax[1] - minMax[0]);\n    };\n}\n\nfunction getDenormalizer(minMax) {\n    return function denormalizer(value) {\n        return (minMax[0] + value * (minMax[1] - minMax[0]));\n    };\n}\n\nfunction squareEuclidean(a, b) {\n    var d = 0;\n    for (var i = 0, ii = a.length; i < ii; i++) {\n        d += (a[i] - b[i]) * (a[i] - b[i]);\n    }\n    return d;\n}\n\nfunction getRandomValue(arr, randomizer) {\n    return arr[Math.floor(randomizer() * arr.length)];\n}\n\nfunction getMaxDistance(distance, numWeights) {\n    var zero = new Array(numWeights),\n        one = new Array(numWeights);\n    for (var i = 0; i < numWeights; i++) {\n        zero[i] = 0;\n        one[i] = 1;\n    }\n    return distance(zero, one);\n}\n\nmodule.exports = SOM;","export default function maybeToPrecision(value, digits) {\n  if (value < 0) {\n    value = 0 - value;\n    if (typeof digits === 'number') {\n      return `- ${value.toPrecision(digits)}`;\n    } else {\n      return `- ${value.toString()}`;\n    }\n  } else {\n    if (typeof digits === 'number') {\n      return value.toPrecision(digits);\n    } else {\n      return value.toString();\n    }\n  }\n}\n","export default function checkArraySize(x, y) {\n  if (!Array.isArray(x) || !Array.isArray(y)) {\n    throw new TypeError('x and y must be arrays');\n  }\n  if (x.length !== y.length) {\n    throw new RangeError('x and y arrays must have the same length');\n  }\n}\n","export { default as maybeToPrecision } from './maybeToPrecision';\nexport { default as checkArrayLength } from './checkArrayLength';\n\nexport default class BaseRegression {\n  constructor() {\n    if (new.target === BaseRegression) {\n      throw new Error('BaseRegression must be subclassed');\n    }\n  }\n\n  predict(x) {\n    if (typeof x === 'number') {\n      return this._predict(x);\n    } else if (Array.isArray(x)) {\n      const y = [];\n      for (let i = 0; i < x.length; i++) {\n        y.push(this._predict(x[i]));\n      }\n      return y;\n    } else {\n      throw new TypeError('x must be a number or array');\n    }\n  }\n\n  _predict() {\n    throw new Error('_predict must be implemented');\n  }\n\n  train() {\n    // Do nothing for this package\n  }\n\n  toString() {\n    return '';\n  }\n\n  toLaTeX() {\n    return '';\n  }\n\n  /**\n   * Return the correlation coefficient of determination (r) and chi-square.\n   * @param {Array<number>} x\n   * @param {Array<number>} y\n   * @return {object}\n   */\n  score(x, y) {\n    if (!Array.isArray(x) || !Array.isArray(y) || x.length !== y.length) {\n      throw new Error('x and y must be arrays of the same length');\n    }\n\n    const n = x.length;\n    const y2 = new Array(n);\n    for (let i = 0; i < n; i++) {\n      y2[i] = this._predict(x[i]);\n    }\n\n    let xSum = 0;\n    let ySum = 0;\n    let chi2 = 0;\n    let rmsd = 0;\n    let xSquared = 0;\n    let ySquared = 0;\n    let xY = 0;\n    for (let i = 0; i < n; i++) {\n      xSum += y2[i];\n      ySum += y[i];\n      xSquared += y2[i] * y2[i];\n      ySquared += y[i] * y[i];\n      xY += y2[i] * y[i];\n      if (y[i] !== 0) {\n        chi2 += ((y[i] - y2[i]) * (y[i] - y2[i])) / y[i];\n      }\n      rmsd += (y[i] - y2[i]) * (y[i] - y2[i]);\n    }\n\n    const r =\n      (n * xY - xSum * ySum) /\n      Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));\n\n    return {\n      r: r,\n      r2: r * r,\n      chi2: chi2,\n      rmsd: Math.sqrt(rmsd / n)\n    };\n  }\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport { Matrix, MatrixTransposeView, solve } from 'ml-matrix';\n\nexport default class PolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y, degree);\n    }\n  }\n\n  _predict(x) {\n    let y = 0;\n    for (let k = 0; k < this.powers.length; k++) {\n      y += this.coefficients[k] * Math.pow(x, this.powers[k]);\n    }\n    return y;\n  }\n\n  toJSON() {\n    return {\n      name: 'polynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients\n    };\n  }\n\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n\n    let fn = '';\n    let str = '';\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str =\n              `${maybeToPrecision(this.coefficients[k], precision) + times}x`;\n          } else {\n            str =\n              `${maybeToPrecision(this.coefficients[k], precision) +\n              times\n              }x${\n                sup\n              }${this.powers[k]\n              }${closeSup}`;\n          }\n        }\n\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n      fn = str + fn;\n    }\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n\n    return `f(x) = ${fn}`;\n  }\n\n  static load(json) {\n    if (json.name !== 'polynomialRegression') {\n      throw new TypeError('not a polynomial regression model');\n    }\n    return new PolynomialRegression(true, json);\n  }\n}\n\nfunction regress(pr, x, y, degree) {\n  const n = x.length;\n  let powers;\n  if (Array.isArray(degree)) {\n    powers = degree;\n    degree = powers.length;\n  } else {\n    degree++;\n    powers = new Array(degree);\n    for (let k = 0; k < degree; k++) {\n      powers[k] = k;\n    }\n  }\n  const F = new Matrix(n, degree);\n  const Y = new Matrix([y]);\n  for (let k = 0; k < degree; k++) {\n    for (let i = 0; i < n; i++) {\n      if (powers[k] === 0) {\n        F.set(i, k, 1);\n      } else {\n        F.set(i, k, Math.pow(x[i], powers[k]));\n      }\n    }\n  }\n\n  const FT = new MatrixTransposeView(F);\n  const A = FT.mmul(F);\n  const B = FT.mmul(new MatrixTransposeView(Y));\n\n  pr.degree = degree - 1;\n  pr.powers = powers;\n  pr.coefficients = solve(A, B).to1DArray();\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\n\nexport default class SimpleLinearRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = [y.intercept, y.slope];\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'simpleLinearRegression',\n      slope: this.slope,\n      intercept: this.intercept\n    };\n  }\n\n  _predict(x) {\n    return this.slope * x + this.intercept;\n  }\n\n  computeX(y) {\n    return (y - this.intercept) / this.slope;\n  }\n\n  toString(precision) {\n    let result = 'f(x) = ';\n    if (this.slope !== 0) {\n      const xFactor = maybeToPrecision(this.slope, precision);\n      result += `${xFactor === '1' ? '' : `${xFactor} * `}x`;\n      if (this.intercept !== 0) {\n        const absIntercept = Math.abs(this.intercept);\n        const operator = absIntercept === this.intercept ? '+' : '-';\n        result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n\n  static load(json) {\n    if (json.name !== 'simpleLinearRegression') {\n      throw new TypeError('not a SLR model');\n    }\n    return new SimpleLinearRegression(true, json);\n  }\n}\n\nfunction regress(slr, x, y) {\n  const n = x.length;\n  let xSum = 0;\n  let ySum = 0;\n\n  let xSquared = 0;\n  let xY = 0;\n\n  for (let i = 0; i < n; i++) {\n    xSum += x[i];\n    ySum += y[i];\n    xSquared += x[i] * x[i];\n    xY += x[i] * y[i];\n  }\n\n  const numerator = n * xY - xSum * ySum;\n  slr.slope = numerator / (n * xSquared - xSum * xSum);\n  slr.intercept = (1 / n) * ySum - slr.slope * (1 / n) * xSum;\n  slr.coefficients = [slr.intercept, slr.slope];\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\n\nexport default class ExponentialRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(input) {\n    return this.B * Math.exp(input * this.A);\n  }\n\n  toJSON() {\n    return {\n      name: 'exponentialRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n\n  toString(precision) {\n    return (\n      `f(x) = ${\n        maybeToPrecision(this.B, precision)\n      } * e^(${\n        maybeToPrecision(this.A, precision)\n      } * x)`\n    );\n  }\n\n  toLaTeX(precision) {\n    if (this.A >= 0) {\n      return (\n        `f(x) = ${\n          maybeToPrecision(this.B, precision)\n        }e^{${\n          maybeToPrecision(this.A, precision)\n        }x}`\n      );\n    } else {\n      return (\n        `f(x) = \\\\frac{${\n          maybeToPrecision(this.B, precision)\n        }}{e^{${\n          maybeToPrecision(-this.A, precision)\n        }x}}`\n      );\n    }\n  }\n\n  static load(json) {\n    if (json.name !== 'exponentialRegression') {\n      throw new TypeError('not a exponential regression model');\n    }\n    return new ExponentialRegression(true, json);\n  }\n}\n\nfunction regress(er, x, y) {\n  const n = x.length;\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(x, yl);\n  er.A = linear.slope;\n  er.B = Math.exp(linear.intercept);\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\n\nexport default class PowerRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // reloading model\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(newInputs) {\n    return this.A * Math.pow(newInputs, this.B);\n  }\n\n  toJSON() {\n    return {\n      name: 'powerRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(\n      this.A,\n      precision\n    )} * x^${maybeToPrecision(this.B, precision)}`;\n  }\n\n  toLaTeX(precision) {\n    let latex = '';\n    if (this.B >= 0) {\n      latex = `f(x) = ${maybeToPrecision(\n        this.A,\n        precision\n      )}x^{${maybeToPrecision(this.B, precision)}}`;\n    } else {\n      latex = `f(x) = \\\\frac{${maybeToPrecision(\n        this.A,\n        precision\n      )}}{x^{${maybeToPrecision(-this.B, precision)}}}`;\n    }\n    latex = latex.replace(/e([+-]?[0-9]+)/g, 'e^{$1}');\n    return latex;\n  }\n\n  static load(json) {\n    if (json.name !== 'powerRegression') {\n      throw new TypeError('not a power regression model');\n    }\n    return new PowerRegression(true, json);\n  }\n}\n\nfunction regress(pr, x, y) {\n  const n = x.length;\n  const xl = new Array(n);\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    xl[i] = Math.log(x[i]);\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(xl, yl);\n  pr.A = Math.exp(linear.intercept);\n  pr.B = linear.slope;\n}\n","import Matrix, { SVD, pseudoInverse } from 'ml-matrix';\n\nexport default class MultivariateLinearRegression {\n  constructor(x, y, options = {}) {\n    const { intercept = true, statistics = true } = options;\n    this.statistics = statistics;\n    if (x === true) {\n      this.weights = y.weights;\n      this.inputs = y.inputs;\n      this.outputs = y.outputs;\n      this.intercept = y.intercept;\n    } else {\n      x = new Matrix(x);\n      y = new Matrix(y);\n      if (intercept) {\n        x.addColumn(new Array(x.rows).fill(1));\n      }\n      let xt = x.transpose();\n      const xx = xt\n        .mmul(x);\n      const xy = xt\n        .mmul(y);\n      const invxx = new SVD(xx)\n        .inverse();\n      const beta = xy\n        .transpose()\n        .mmul(invxx)\n        .transpose();\n      this.weights = beta.to2DArray();\n      this.inputs = x.columns;\n      this.outputs = y.columns;\n      if (intercept) this.inputs--;\n      this.intercept = intercept;\n      if (statistics) {\n        /*\n         * Let's add some basic statistics about the beta's to be able to interpret them.\n         * source: http://dept.stat.lsa.umich.edu/~kshedden/Courses/Stat401/Notes/401-multreg.pdf\n         * validated against Excel Regression AddIn\n         * test: \"datamining statistics test\"\n         */\n        const fittedValues = x.mmul(beta);\n        const residuals = y.clone().addM(fittedValues.neg());\n        const variance =\n          residuals\n            .to2DArray()\n            .map((ri) => Math.pow(ri[0], 2))\n            .reduce((a, b) => a + b) /\n          (y.rows - x.columns);\n        this.stdError = Math.sqrt(variance);\n        this.stdErrorMatrix = pseudoInverse(xx).mul(variance);\n        this.stdErrors = this.stdErrorMatrix\n          .diagonal()\n          .map((d) => Math.sqrt(d));\n        this.tStats = this.weights.map((d, i) =>\n          (this.stdErrors[i] === 0 ? 0 : d[0] / this.stdErrors[i])\n        );\n      }\n    }\n  }\n\n  predict(x) {\n    if (Array.isArray(x)) {\n      if (typeof x[0] === 'number') {\n        return this._predict(x);\n      } else if (Array.isArray(x[0])) {\n        const y = new Array(x.length);\n        for (let i = 0; i < x.length; i++) {\n          y[i] = this._predict(x[i]);\n        }\n        return y;\n      }\n    } else if (Matrix.isMatrix(x)) {\n      const y = new Matrix(x.rows, this.outputs);\n      for (let i = 0; i < x.rows; i++) {\n        y.setRow(i, this._predict(x.getRow(i)));\n      }\n      return y;\n    }\n    throw new TypeError('x must be a matrix or array of numbers');\n  }\n\n  _predict(x) {\n    const result = new Array(this.outputs);\n    if (this.intercept) {\n      for (let i = 0; i < this.outputs; i++) {\n        result[i] = this.weights[this.inputs][i];\n      }\n    } else {\n      result.fill(0);\n    }\n    for (let i = 0; i < this.inputs; i++) {\n      for (let j = 0; j < this.outputs; j++) {\n        result[j] += this.weights[i][j] * x[i];\n      }\n    }\n    return result;\n  }\n\n  score() {\n    throw new Error('score method is not implemented yet');\n  }\n\n  toJSON() {\n    return {\n      name: 'multivariateLinearRegression',\n      weights: this.weights,\n      inputs: this.inputs,\n      outputs: this.outputs,\n      intercept: this.intercept,\n      summary: this.statistics\n        ? {\n          regressionStatistics: {\n            standardError: this.stdError,\n            observations: this.outputs\n          },\n          variables: this.weights.map((d, i) => {\n            return {\n              label:\n                  i === this.weights.length - 1\n                    ? 'Intercept'\n                    : `X Variable ${i + 1}`,\n              coefficients: d,\n              standardError: this.stdErrors[i],\n              tStat: this.tStats[i]\n            };\n          })\n        }\n        : undefined\n    };\n  }\n\n  static load(model) {\n    if (model.name !== 'multivariateLinearRegression') {\n      throw new Error('not a MLR model');\n    }\n    return new MultivariateLinearRegression(true, model);\n  }\n}\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass GaussianKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n    this.divisor = 2 * options.sigma * options.sigma;\n  }\n  compute(x, y) {\n    const distance = squaredEuclidean(x, y);\n    return Math.exp(-distance / this.divisor);\n  }\n}\n\nmodule.exports = GaussianKernel;\n","'use strict';\n\nconst defaultOptions = {\n  degree: 1,\n  constant: 1,\n  scale: 1\n};\n\nclass PolynomialKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n\n    this.degree = options.degree;\n    this.constant = options.constant;\n    this.scale = options.scale;\n  }\n\n  compute(x, y) {\n    var sum = 0;\n    for (var i = 0; i < x.length; i++) {\n      sum += x[i] * y[i];\n    }\n    return Math.pow(this.scale * sum + this.constant, this.degree);\n  }\n}\n\nmodule.exports = PolynomialKernel;\n","'use strict';\n\nconst defaultOptions = {\n  alpha: 0.01,\n  constant: -Math.E\n};\n\nclass SigmoidKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.alpha = options.alpha;\n    this.constant = options.constant;\n  }\n\n  compute(x, y) {\n    var sum = 0;\n    for (var i = 0; i < x.length; i++) {\n      sum += x[i] * y[i];\n    }\n    return Math.tanh(this.alpha * sum + this.constant);\n  }\n}\n\nmodule.exports = SigmoidKernel;\n","'use strict';\n\nconst defaultOptions = {\n  sigma: 1,\n  degree: 1\n};\n\nclass ANOVAKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n    this.degree = options.degree;\n  }\n\n  compute(x, y) {\n    var sum = 0;\n    var len = Math.min(x.length, y.length);\n    for (var i = 1; i <= len; ++i) {\n      sum += Math.pow(\n        Math.exp(\n          -this.sigma *\n            Math.pow(Math.pow(x[i - 1], i) - Math.pow(y[i - 1], i), 2)\n        ),\n        this.degree\n      );\n    }\n    return sum;\n  }\n}\n\nmodule.exports = ANOVAKernel;\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass CauchyKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n  }\n\n  compute(x, y) {\n    return 1 / (1 + squaredEuclidean(x, y) / (this.sigma * this.sigma));\n  }\n}\n\nmodule.exports = CauchyKernel;\n","'use strict';\n\nconst { euclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass ExponentialKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n    this.divisor = 2 * options.sigma * options.sigma;\n  }\n\n  compute(x, y) {\n    const distance = euclidean(x, y);\n    return Math.exp(-distance / this.divisor);\n  }\n}\n\nmodule.exports = ExponentialKernel;\n","'use strict';\n\nclass HistogramIntersectionKernel {\n  compute(x, y) {\n    var min = Math.min(x.length, y.length);\n    var sum = 0;\n    for (var i = 0; i < min; ++i) {\n      sum += Math.min(x[i], y[i]);\n    }\n\n    return sum;\n  }\n}\n\nmodule.exports = HistogramIntersectionKernel;\n","'use strict';\n\nconst { euclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass LaplacianKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n  }\n\n  compute(x, y) {\n    const distance = euclidean(x, y);\n    return Math.exp(-distance / this.sigma);\n  }\n}\n\nmodule.exports = LaplacianKernel;\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  constant: 1\n};\n\nclass MultiquadraticKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.constant = options.constant;\n  }\n\n  compute(x, y) {\n    return Math.sqrt(squaredEuclidean(x, y) + this.constant * this.constant);\n  }\n}\n\nmodule.exports = MultiquadraticKernel;\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  constant: 1\n};\n\nclass RationalQuadraticKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.constant = options.constant;\n  }\n\n  compute(x, y) {\n    const distance = squaredEuclidean(x, y);\n    return 1 - distance / (distance + this.constant);\n  }\n}\n\nmodule.exports = RationalQuadraticKernel;\n","'use strict';\n\nconst { Matrix, MatrixTransposeView } = require('ml-matrix');\nconst GaussianKernel = require('ml-kernel-gaussian');\nconst PolynomialKernel = require('ml-kernel-polynomial');\nconst SigmoidKernel = require('ml-kernel-sigmoid');\n\nconst ANOVAKernel = require('./kernels/anova-kernel');\nconst CauchyKernel = require('./kernels/cauchy-kernel');\nconst ExponentialKernel = require('./kernels/exponential-kernel');\nconst HistogramKernel = require('./kernels/histogram-intersection-kernel');\nconst LaplacianKernel = require('./kernels/laplacian-kernel');\nconst MultiquadraticKernel = require('./kernels/multiquadratic-kernel');\nconst RationalKernel = require('./kernels/rational-quadratic-kernel');\n\nconst kernelType = {\n  gaussian: GaussianKernel,\n  rbf: GaussianKernel,\n  polynomial: PolynomialKernel,\n  poly: PolynomialKernel,\n  anova: ANOVAKernel,\n  cauchy: CauchyKernel,\n  exponential: ExponentialKernel,\n  histogram: HistogramKernel,\n  min: HistogramKernel,\n  laplacian: LaplacianKernel,\n  multiquadratic: MultiquadraticKernel,\n  rational: RationalKernel,\n  sigmoid: SigmoidKernel,\n  mlp: SigmoidKernel\n};\n\nclass Kernel {\n  constructor(type, options) {\n    this.kernelType = type;\n    if (type === 'linear') return;\n\n    if (typeof type === 'string') {\n      type = type.toLowerCase();\n\n      var KernelConstructor = kernelType[type];\n      if (KernelConstructor) {\n        this.kernelFunction = new KernelConstructor(options);\n      } else {\n        throw new Error(`unsupported kernel type: ${type}`);\n      }\n    } else if (typeof type === 'object' && typeof type.compute === 'function') {\n      this.kernelFunction = type;\n    } else {\n      throw new TypeError(\n        'first argument must be a valid kernel type or instance'\n      );\n    }\n  }\n\n  compute(inputs, landmarks) {\n    inputs = Matrix.checkMatrix(inputs);\n    if (landmarks === undefined) {\n      landmarks = inputs;\n    } else {\n      landmarks = Matrix.checkMatrix(landmarks);\n    }\n    if (this.kernelType === 'linear') {\n      return inputs.mmul(new MatrixTransposeView(landmarks));\n    }\n\n    const kernelMatrix = new Matrix(inputs.rows, landmarks.rows);\n    if (inputs === landmarks) {\n      // fast path, matrix is symmetric\n      for (let i = 0; i < inputs.rows; i++) {\n        for (let j = i; j < inputs.rows; j++) {\n          const value = this.kernelFunction.compute(\n            inputs.getRow(i),\n            inputs.getRow(j)\n          );\n          kernelMatrix.set(i, j, value);\n          kernelMatrix.set(j, i, value);\n        }\n      }\n    } else {\n      for (let i = 0; i < inputs.rows; i++) {\n        for (let j = 0; j < landmarks.rows; j++) {\n          kernelMatrix.set(\n            i,\n            j,\n            this.kernelFunction.compute(inputs.getRow(i), landmarks.getRow(j))\n          );\n        }\n      }\n    }\n    return kernelMatrix;\n  }\n}\n\nmodule.exports = Kernel;\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport median from 'ml-array-median';\n\nexport default class TheilSenRegression extends BaseRegression {\n  /**\n   * Theil–Sen estimator\n   * https://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator\n   * @param {Array<number>|boolean} x\n   * @param {Array<number>|object} y\n   * @constructor\n   */\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // loads the model\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = y.coefficients;\n    } else {\n      // creates the model\n      checkArrayLength(x, y);\n      theilSen(this, x, y);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'TheilSenRegression',\n      slope: this.slope,\n      intercept: this.intercept\n    };\n  }\n\n  _predict(input) {\n    return this.slope * input + this.intercept;\n  }\n\n  computeX(input) {\n    return (input - this.intercept) / this.slope;\n  }\n\n  toString(precision) {\n    var result = 'f(x) = ';\n    if (this.slope) {\n      var xFactor = maybeToPrecision(this.slope, precision);\n      result += `${Math.abs(xFactor - 1) < 1e-5 ? '' : `${xFactor} * `}x`;\n      if (this.intercept) {\n        var absIntercept = Math.abs(this.intercept);\n        var operator = absIntercept === this.intercept ? '+' : '-';\n        result +=\n          ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n\n  static load(json) {\n    if (json.name !== 'TheilSenRegression') {\n      throw new TypeError('not a Theil-Sen model');\n    }\n    return new TheilSenRegression(true, json);\n  }\n}\n\nfunction theilSen(regression, x, y) {\n  let len = x.length;\n  let slopes = new Array(len * len);\n  let count = 0;\n  for (let i = 0; i < len; ++i) {\n    for (let j = i + 1; j < len; ++j) {\n      if (x[i] !== x[j]) {\n        slopes[count++] = (y[j] - y[i]) / (x[j] - x[i]);\n      }\n    }\n  }\n  slopes.length = count;\n  let medianSlope = median(slopes);\n\n  let cuts = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    cuts[i] = y[i] - medianSlope * x[i];\n  }\n\n  regression.slope = medianSlope;\n  regression.intercept = median(cuts);\n  regression.coefficients = [regression.intercept, regression.slope];\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport { solve } from 'ml-matrix';\n\n/**\n * @class RobustPolynomialRegression\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree - polynomial degree\n */\nexport default class RobustPolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      robustPolynomial(this, x, y, degree);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'robustPolynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients\n    };\n  }\n\n  _predict(x) {\n    return predict(x, this.powers, this.coefficients);\n  }\n\n  /**\n   * Display the formula\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n\n  /**\n   * Display the formula in LaTeX format\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n\n    let fn = '';\n    let str = '';\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x`;\n          } else {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x${sup}${this.powers[k]}${closeSup}`;\n          }\n        }\n\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n      fn = str + fn;\n    }\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n\n    return `f(x) = ${fn}`;\n  }\n\n  static load(json) {\n    if (json.name !== 'robustPolynomialRegression') {\n      throw new TypeError('not a RobustPolynomialRegression model');\n    }\n    return new RobustPolynomialRegression(true, json);\n  }\n}\n\nfunction robustPolynomial(regression, x, y, degree) {\n  let powers = Array(degree)\n    .fill(0)\n    .map((_, index) => index);\n\n  const tuples = getRandomTuples(x, y, degree);\n\n  var min;\n  for (var i = 0; i < tuples.length; i++) {\n    var tuple = tuples[i];\n    var coefficients = calcCoefficients(tuple, powers);\n\n    var residuals = x.slice();\n    for (var j = 0; j < x.length; j++) {\n      residuals[j] = y[j] - predict(x[j], powers, coefficients);\n      residuals[j] = {\n        residual: residuals[j] * residuals[j],\n        coefficients\n      };\n    }\n\n    var median = residualsMedian(residuals);\n    if (!min || median.residual < min.residual) {\n      min = median;\n    }\n  }\n\n  regression.degree = degree;\n  regression.powers = powers;\n  regression.coefficients = min.coefficients;\n}\n\n/**\n * @ignore\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree\n * @return {Array<{x:number,y:number}>}\n */\nfunction getRandomTuples(x, y, degree) {\n  var len = Math.floor(x.length / degree);\n  var tuples = new Array(len);\n\n  for (var i = 0; i < x.length; i++) {\n    var pos = Math.floor(Math.random() * len);\n\n    var counter = 0;\n    while (counter < x.length) {\n      if (!tuples[pos]) {\n        tuples[pos] = [\n          {\n            x: x[i],\n            y: y[i]\n          }\n        ];\n        break;\n      } else if (tuples[pos].length < degree) {\n        tuples[pos].push({\n          x: x[i],\n          y: y[i]\n        });\n        break;\n      } else {\n        counter++;\n        pos = (pos + 1) % len;\n      }\n    }\n\n    if (counter === x.length) {\n      return tuples;\n    }\n  }\n  return tuples;\n}\n\n/**\n * @ignore\n * @param {{x:number,y:number}} tuple\n * @param {Array<number>} powers\n * @return {Array<number>}\n */\nfunction calcCoefficients(tuple, powers) {\n  var X = tuple.slice();\n  var Y = tuple.slice();\n  for (var i = 0; i < X.length; i++) {\n    Y[i] = [tuple[i].y];\n    X[i] = new Array(powers.length);\n    for (var j = 0; j < powers.length; j++) {\n      X[i][j] = Math.pow(tuple[i].x, powers[j]);\n    }\n  }\n\n  return solve(X, Y).to1DArray();\n}\n\nfunction predict(x, powers, coefficients) {\n  let y = 0;\n  for (let k = 0; k < powers.length; k++) {\n    y += coefficients[k] * Math.pow(x, powers[k]);\n  }\n  return y;\n}\n\nfunction residualsMedian(residuals) {\n  residuals.sort((a, b) => a.residual - b.residual);\n\n  var l = residuals.length;\n  var half = Math.floor(l / 2);\n  return l % 2 === 0 ? residuals[half - 1] : residuals[half];\n}\n","/**\n * Calculate current error\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} parameters - Array of current parameter values\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {number}\n */\nexport default function errorCalculation(\n  data,\n  parameters,\n  parameterizedFunction\n) {\n  var error = 0;\n  const func = parameterizedFunction(parameters);\n\n  for (var i = 0; i < data.x.length; i++) {\n    error += Math.abs(data.y[i] - func(data.x[i]));\n  }\n\n  return error;\n}\n","import { inverse, Matrix } from 'ml-matrix';\n\n/**\n * Difference of the matrix function over the parameters\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} evaluatedData - Array of previous evaluated function values\n * @param {Array<number>} params - Array of previous parameter values\n * @param {number} gradientDifference - Adjustment for decrease the damping parameter\n * @param {function} paramFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {Matrix}\n */\nfunction gradientFunction(\n  data,\n  evaluatedData,\n  params,\n  gradientDifference,\n  paramFunction\n) {\n  const n = params.length;\n  const m = data.x.length;\n\n  var ans = new Array(n);\n\n  for (var param = 0; param < n; param++) {\n    ans[param] = new Array(m);\n    var auxParams = params.concat();\n    auxParams[param] += gradientDifference;\n    var funcParam = paramFunction(auxParams);\n\n    for (var point = 0; point < m; point++) {\n      ans[param][point] = evaluatedData[point] - funcParam(data.x[point]);\n    }\n  }\n  return new Matrix(ans);\n}\n\n/**\n * Matrix function over the samples\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} evaluatedData - Array of previous evaluated function values\n * @return {Matrix}\n */\nfunction matrixFunction(data, evaluatedData) {\n  const m = data.x.length;\n\n  var ans = new Array(m);\n\n  for (var point = 0; point < m; point++) {\n    ans[point] = [data.y[point] - evaluatedData[point]];\n  }\n\n  return new Matrix(ans);\n}\n\n/**\n * Iteration for Levenberg-Marquardt\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} params - Array of previous parameter values\n * @param {number} damping - Levenberg-Marquardt parameter\n * @param {number} gradientDifference - Adjustment for decrease the damping parameter\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {Array<number>}\n */\nexport default function step(\n  data,\n  params,\n  damping,\n  gradientDifference,\n  parameterizedFunction\n) {\n  var value = damping * gradientDifference * gradientDifference;\n  var identity = Matrix.eye(params.length, params.length, value);\n\n  const func = parameterizedFunction(params);\n  var evaluatedData = data.x.map((e) => func(e));\n\n  var gradientFunc = gradientFunction(\n    data,\n    evaluatedData,\n    params,\n    gradientDifference,\n    parameterizedFunction\n  );\n  var matrixFunc = matrixFunction(data, evaluatedData);\n  var inverseMatrix = inverse(\n    identity.add(gradientFunc.mmul(gradientFunc.transpose()))\n  );\n\n  params = new Matrix([params]);\n  params = params.sub(\n    inverseMatrix\n      .mmul(gradientFunc)\n      .mmul(matrixFunc)\n      .mul(gradientDifference)\n      .transpose()\n  );\n\n  return params.to1DArray();\n}\n","import errorCalculation from './errorCalculation';\nimport step from './step';\n\n/**\n * Curve fitting algorithm\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @param {object} [options] - Options object\n * @param {number} [options.damping] - Levenberg-Marquardt parameter\n * @param {number} [options.gradientDifference = 10e-2] - Adjustment for decrease the damping parameter\n * @param {Array<number>} [options.minValues] - Minimum allowed values for parameters\n * @param {Array<number>} [options.maxValues] - Maximum allowed values for parameters\n * @param {Array<number>} [options.initialValues] - Array of initial parameter values\n * @param {number} [options.maxIterations = 100] - Maximum of allowed iterations\n * @param {number} [options.errorTolerance = 10e-3] - Minimum uncertainty allowed for each point\n * @return {{parameterValues: Array<number>, parameterError: number, iterations: number}}\n */\nexport default function levenbergMarquardt(\n  data,\n  parameterizedFunction,\n  options = {}\n) {\n  let {\n    maxIterations = 100,\n    gradientDifference = 10e-2,\n    damping = 0,\n    errorTolerance = 10e-3,\n    minValues,\n    maxValues,\n    initialValues\n  } = options;\n\n  if (damping <= 0) {\n    throw new Error('The damping option must be a positive number');\n  } else if (!data.x || !data.y) {\n    throw new Error('The data parameter must have x and y elements');\n  } else if (\n    !Array.isArray(data.x) ||\n    data.x.length < 2 ||\n    !Array.isArray(data.y) ||\n    data.y.length < 2\n  ) {\n    throw new Error(\n      'The data parameter elements must be an array with more than 2 points'\n    );\n  } else if (data.x.length !== data.y.length) {\n    throw new Error('The data parameter elements must have the same size');\n  }\n\n  var parameters =\n    initialValues || new Array(parameterizedFunction.length).fill(1);\n  let parLen = parameters.length;\n  maxValues = maxValues || new Array(parLen).fill(Number.MAX_SAFE_INTEGER);\n  minValues = minValues || new Array(parLen).fill(Number.MIN_SAFE_INTEGER);\n\n  if (maxValues.length !== minValues.length) {\n    throw new Error('minValues and maxValues must be the same size');\n  }\n\n  if (!Array.isArray(parameters)) {\n    throw new Error('initialValues must be an array');\n  }\n\n  var error = errorCalculation(data, parameters, parameterizedFunction);\n\n  var converged = error <= errorTolerance;\n\n  for (\n    var iteration = 0;\n    iteration < maxIterations && !converged;\n    iteration++\n  ) {\n    parameters = step(\n      data,\n      parameters,\n      damping,\n      gradientDifference,\n      parameterizedFunction\n    );\n\n    for (let k = 0; k < parLen; k++) {\n      parameters[k] = Math.min(\n        Math.max(minValues[k], parameters[k]),\n        maxValues[k]\n      );\n    }\n\n    error = errorCalculation(data, parameters, parameterizedFunction);\n    if (isNaN(error)) break;\n    converged = error <= errorTolerance;\n  }\n\n  return {\n    parameterValues: parameters,\n    parameterError: error,\n    iterations: iteration\n  };\n}\n","/**\n * Returns a new array based on extraction of specific indices of an array\n * @private\n * @param {Array} vector\n * @param {Array} indices\n */\nexport default function selection(vector, indices) {\n  let u = []; //new Float64Array(indices.length);\n  for (let i = 0; i < indices.length; i++) {\n    u[i] = vector[indices[i]];\n  }\n  return u;\n}\n","/**\n *\n * @private\n * @param {Array of arrays} collection\n */\nexport default function sortCollectionSet(collection) {\n  let objectCollection = collection\n    .map((value, index) => {\n      let key = BigInt(0);\n      value.forEach((item) => (key |= BigInt(1) << BigInt(item)));\n      return { value, index, key };\n    })\n    .sort((a, b) => {\n      if (a.key - b.key < 0) return -1;\n      return 1;\n    });\n\n  let sorted = [];\n  let indices = [];\n\n  let key;\n  for (let set of objectCollection) {\n    if (set.key !== key) {\n      key = set.key;\n      indices.push([]);\n      sorted.push(set.value);\n    }\n    indices[indices.length - 1].push(set.index);\n  }\n\n  let result = {\n    values: sorted,\n    indices: indices,\n  };\n  return result;\n}\n","import {\n  Matrix,\n  LuDecomposition,\n  solve,\n  CholeskyDecomposition,\n} from 'ml-matrix';\n\nimport sortCollectionSet from './util/sortCollectionSet';\n\n/**\n * (Combinatorial Subspace Least Squares) - subfunction for the FC-NNLS\n * @private\n * @param {Matrix} XtX\n * @param {Matrix} XtY\n * @param {Array} Pset\n * @param {Numbers} l\n * @param {Numbers} p\n */\nexport default function cssls(XtX, XtY, Pset, l, p) {\n  // Solves the set of equation XtX*K = XtY for the variables in Pset\n  // if XtX (or XtX(vars,vars)) is singular, performs the svd and find pseudoinverse, otherwise (even if ill-conditioned) finds inverse with LU decomposition and solves the set of equation\n  // it is consistent with matlab results for ill-conditioned matrices (at least consistent with test 'ill-conditionned square X rank 2, Y 3x1' in cssls.test)\n\n  let K = Matrix.zeros(l, p);\n  if (Pset === null) {\n    let choXtX = new CholeskyDecomposition(XtX);\n    if (choXtX.isPositiveDefinite() === true) {\n      K = choXtX.solve(XtY);\n    } else {\n      let luXtX = new LuDecomposition(XtX);\n      if (luXtX.isSingular() === false) {\n        K = luXtX.solve(Matrix.eye(l)).mmul(XtY);\n      } else {\n        K = solve(XtX, XtY, { useSVD: true });\n      }\n    }\n  } else {\n    let sortedPset = sortCollectionSet(Pset).values;\n    let sortedEset = sortCollectionSet(Pset).indices;\n    if (\n      sortedPset.length === 1 &&\n      sortedPset[0].length === 0 &&\n      sortedEset[0].length === p\n    ) {\n      return K;\n    } else if (\n      sortedPset.length === 1 &&\n      sortedPset[0].length === l &&\n      sortedEset[0].length === p\n    ) {\n      let choXtX = new CholeskyDecomposition(XtX);\n      if (choXtX.isPositiveDefinite() === true) {\n        K = choXtX.solve(XtY);\n      } else {\n        let luXtX = new LuDecomposition(XtX);\n        if (luXtX.isSingular() === false) {\n          K = luXtX.solve(Matrix.eye(l)).mmul(XtY);\n        } else {\n          K = solve(XtX, XtY, { useSVD: true });\n        }\n      }\n    } else {\n      for (let k = 0; k < sortedPset.length; k++) {\n        let cols2Solve = sortedEset[k];\n        let vars = sortedPset[k];\n        let L;\n        let choXtX = new CholeskyDecomposition(XtX.selection(vars, vars));\n        if (choXtX.isPositiveDefinite() === true) {\n          L = choXtX.solve(XtY.selection(vars, cols2Solve));\n        } else {\n          let luXtX = new LuDecomposition(XtX.selection(vars, vars));\n          if (luXtX.isSingular() === false) {\n            L = luXtX\n              .solve(Matrix.eye(vars.length))\n              .mmul(XtY.selection(vars, cols2Solve));\n          } else {\n            L = solve(\n              XtX.selection(vars, vars),\n              XtY.selection(vars, cols2Solve),\n              { useSVD: true },\n            );\n          }\n        }\n        for (let i = 0; i < L.rows; i++) {\n          for (let j = 0; j < L.columns; j++) {\n            K.set(vars[i], cols2Solve[j], L.get(i, j));\n          }\n        }\n      }\n    }\n  }\n  return K;\n}\n","import { Matrix } from 'ml-matrix';\n\nimport cssls from './cssls';\n\nexport default function initialisation(X, Y) {\n  let n = X.rows;\n  let l = X.columns;\n  let p = Y.columns;\n  let iter = 0;\n\n  if (Y.rows !== n) throw new Error('ERROR: matrix size not compatible');\n\n  let W = Matrix.zeros(l, p);\n\n  // precomputes part of pseudoinverse\n  let XtX = X.transpose().mmul(X);\n  let XtY = X.transpose().mmul(Y);\n\n  let K = cssls(XtX, XtY, null, l, p); // K is lxp\n  let Pset = [];\n  for (let j = 0; j < p; j++) {\n    Pset[j] = [];\n    for (let i = 0; i < l; i++) {\n      if (K.get(i, j) > 0) {\n        Pset[j].push(i);\n      } else {\n        K.set(i, j, 0);\n      } //This is our initial solution, it's the solution found by overwriting the unconstrained least square solution\n    }\n  }\n  let Fset = [];\n  for (let j = 0; j < p; j++) {\n    if (Pset[j].length !== l) {\n      Fset.push(j);\n    }\n  }\n\n  let D = K.clone();\n\n  return { n, l, p, iter, W, XtX, XtY, K, Pset, Fset, D };\n}\n","/**\n * Computes the set difference A\\B\n * @private\n * @param {A} set A as an array\n * @param {B} set B as an array\n */\nexport default function setDifference(A, B) {\n  let C = [];\n  for (let i of A) {\n    if (!B.includes(i)) C.push(i);\n  }\n  return C;\n}\n","import setDifference from './util/setDifference';\n\n// Makes sure the solution has converged\nexport default function optimality(\n  iter,\n  maxIter,\n  XtX,\n  XtY,\n  Fset,\n  Pset,\n  W,\n  K,\n  l,\n  p,\n  D,\n) {\n  if (iter === maxIter) {\n    throw new Error('Maximum number of iterations exceeded');\n  }\n\n  // Check solution for optimality\n  let V = XtY.subMatrixColumn(Fset).subtract(XtX.mmul(K.subMatrixColumn(Fset)));\n  for (let j = 0; j < Fset.length; j++) {\n    W.setColumn(Fset[j], V.subMatrixColumn([j]));\n  }\n  let Jset = [];\n  let fullSet = [];\n  for (let i = 0; i < l; i++) {\n    fullSet.push(i);\n  }\n  for (let j = 0; j < Fset.length; j++) {\n    let notPset = setDifference(fullSet, Pset[Fset[j]]);\n    if (notPset.length === 0) {\n      Jset.push(Fset[j]);\n    } else if (W.selection(notPset, [Fset[j]]).max() <= 0) {\n      Jset.push(Fset[j]);\n    }\n  }\n  Fset = setDifference(Fset, Jset);\n\n  // For non-optimal solutions, add the appropriate variables to Pset\n  if (Fset.length !== 0) {\n    for (let j = 0; j < Fset.length; j++) {\n      for (let i = 0; i < l; i++) {\n        if (Pset[Fset[j]].includes(i)) W.set(i, Fset[j], -Infinity);\n      }\n      Pset[Fset[j]].push(W.subMatrixColumn(Fset).maxColumnIndex(j)[0]);\n    }\n    for (let j = 0; j < Fset.length; j++) {\n      D.setColumn(Fset[j], K.getColumn(Fset[j]));\n    }\n  }\n  for (let j = 0; j < p; j++) {\n    Pset[j].sort((a, b) => a - b);\n  }\n  return { Pset, Fset, W };\n}\n","import { Matrix } from 'ml-matrix';\n\nimport selection from './util/selection';\nimport cssls from './cssls';\nimport initialisation from './initialisation';\nimport optimality from './optimality';\n\n/**\n * Fast Combinatorial Non-negative Least Squares with multiple Right Hand Side\n * @param {Matrix|number[][]} X\n * @param {Matrix|number[][]} Y\n * @param {object} [options={}]\n * @param {number} [options.maxIterations] if empty maxIterations is set at 3 times the number of columns of X\n * @returns {Matrix} K\n */\nexport default function fcnnls(X, Y, options = {}) {\n  X = Matrix.checkMatrix(X);\n  Y = Matrix.checkMatrix(Y);\n  let { l, p, iter, W, XtX, XtY, K, Pset, Fset, D } = initialisation(X, Y);\n  const { maxIterations = X.columns * 3 } = options;\n\n  // Active set algorithm for NNLS main loop\n  while (Fset.length > 0) {\n    // Solves for the passive variables (uses subroutine below)\n    let L = cssls(\n      XtX,\n      XtY.subMatrixColumn(Fset),\n      selection(Pset, Fset),\n      l,\n      Fset.length,\n    );\n    for (let i = 0; i < l; i++) {\n      for (let j = 0; j < Fset.length; j++) {\n        K.set(i, Fset[j], L.get(i, j));\n      }\n    }\n\n    // Finds any infeasible solutions\n    let infeasIndex = [];\n    for (let j = 0; j < Fset.length; j++) {\n      for (let i = 0; i < l; i++) {\n        if (L.get(i, j) < 0) {\n          infeasIndex.push(j);\n          break;\n        }\n      }\n    }\n    let Hset = selection(Fset, infeasIndex);\n\n    // Makes infeasible solutions feasible (standard NNLS inner loop)\n    if (Hset.length > 0) {\n      let m = Hset.length;\n      let alpha = Matrix.ones(l, m);\n\n      while (m > 0 && iter < maxIterations) {\n        iter++;\n\n        alpha.mul(Infinity);\n\n        // Finds indices of negative variables in passive set\n        let hRowColIdx = [[], []]; // Indexes work in pairs, each pair reprensents a single element, first array is row index, second array is column index\n        let negRowColIdx = [[], []]; // Same as before\n        for (let j = 0; j < m; j++) {\n          for (let i = 0; i < Pset[Hset[j]].length; i++) {\n            if (K.get(Pset[Hset[j]][i], Hset[j]) < 0) {\n              hRowColIdx[0].push(Pset[Hset[j]][i]); // i\n              hRowColIdx[1].push(j);\n              negRowColIdx[0].push(Pset[Hset[j]][i]); // i\n              negRowColIdx[1].push(Hset[j]);\n            } // Compared to matlab, here we keep the row/column indexing (we are not taking the linear indexing)\n          }\n        }\n\n        for (let k = 0; k < hRowColIdx[0].length; k++) {\n          // could be hRowColIdx[1].length as well\n          alpha.set(\n            hRowColIdx[0][k],\n            hRowColIdx[1][k],\n            D.get(negRowColIdx[0][k], negRowColIdx[1][k]) /\n              (D.get(negRowColIdx[0][k], negRowColIdx[1][k]) -\n                K.get(negRowColIdx[0][k], negRowColIdx[1][k])),\n          );\n        }\n\n        let alphaMin = [];\n        let minIdx = [];\n        for (let j = 0; j < m; j++) {\n          alphaMin[j] = alpha.minColumn(j);\n          minIdx[j] = alpha.minColumnIndex(j)[0];\n        }\n\n        alphaMin = Matrix.rowVector(alphaMin);\n        for (let i = 0; i < l; i++) {\n          alpha.setSubMatrix(alphaMin, i, 0);\n        }\n\n        let E = new Matrix(l, m);\n        E = D.subMatrixColumn(Hset).subtract(\n          alpha\n            .subMatrix(0, l - 1, 0, m - 1)\n            .mul(D.subMatrixColumn(Hset).subtract(K.subMatrixColumn(Hset))),\n        );\n        for (let j = 0; j < m; j++) {\n          D.setColumn(Hset[j], E.subMatrixColumn([j]));\n        }\n\n        let idx2zero = [minIdx, Hset];\n        for (let k = 0; k < m; k++) {\n          D.set(idx2zero[0][k], idx2zero[1][k], 0);\n        }\n\n        for (let j = 0; j < m; j++) {\n          Pset[Hset[j]].splice(\n            Pset[Hset[j]].findIndex((item) => item === minIdx[j]),\n            1,\n          );\n        }\n\n        L = cssls(XtX, XtY.subMatrixColumn(Hset), selection(Pset, Hset), l, m);\n        for (let j = 0; j < m; j++) {\n          K.setColumn(Hset[j], L.subMatrixColumn([j]));\n        }\n\n        Hset = [];\n        for (let j = 0; j < K.columns; j++) {\n          for (let i = 0; i < l; i++) {\n            if (K.get(i, j) < 0) {\n              Hset.push(j);\n\n              break;\n            }\n          }\n        }\n        m = Hset.length;\n      }\n    }\n\n    let newParam = optimality(\n      iter,\n      maxIterations,\n      XtX,\n      XtY,\n      Fset,\n      Pset,\n      W,\n      K,\n      l,\n      p,\n      D,\n    );\n    Pset = newParam.Pset;\n    Fset = newParam.Fset;\n    W = newParam.W;\n  }\n\n  return K;\n}\n","import { Matrix } from 'ml-matrix';\n\nimport fcnnls from './fcnnls';\n\n/**\n * Fast Combinatorial Non-negative Least Squares with single Right Hand Side\n * @param {Matrix|number[][]} X\n * @param {number[]} y\n * @param {object} [options={}]\n * @param {boolean} [maxIterations] if true or empty maxIterations is set at 3 times the number of columns of X\n * @returns {Array} k\n */\nexport default function fcnnlsVector(X, y, options = {}) {\n  if (Array.isArray(y) === false) {\n    throw new TypeError('y must be a 1D Array');\n  }\n  let Y = Matrix.columnVector(y);\n  let K = fcnnls(X, Y, options);\n  let k = K.to1DArray();\n  return k;\n}\n","module.exports = function(haystack, needle, comparator, low, high) {\n  var mid, cmp;\n\n  if(low === undefined)\n    low = 0;\n\n  else {\n    low = low|0;\n    if(low < 0 || low >= haystack.length)\n      throw new RangeError(\"invalid lower bound\");\n  }\n\n  if(high === undefined)\n    high = haystack.length - 1;\n\n  else {\n    high = high|0;\n    if(high < low || high >= haystack.length)\n      throw new RangeError(\"invalid upper bound\");\n  }\n\n  while(low <= high) {\n    // The naive `low + high >>> 1` could fail for array lengths > 2**31\n    // because `>>>` converts its operands to int32. `low + (high - low >>> 1)`\n    // works for array lengths <= 2**32-1 which is also Javascript's max array\n    // length.\n    mid = low + ((high - low) >>> 1);\n    cmp = +comparator(haystack[mid], needle, mid, haystack);\n\n    // Too low.\n    if(cmp < 0.0)\n      low  = mid + 1;\n\n    // Too high.\n    else if(cmp > 0.0)\n      high = mid - 1;\n\n    // Key found.\n    else\n      return mid;\n  }\n\n  // Key not found.\n  return ~low;\n}\n","'use strict';\n\nfunction assertNumber(number) {\n\tif (typeof number !== 'number' || Number.isNaN(number)) {\n\t\tthrow new TypeError('Expected a number');\n\t}\n}\n\nexports.ascending = (left, right) => {\n\tassertNumber(left);\n\tassertNumber(right);\n\treturn left - right;\n};\n\nexports.descending = (left, right) => {\n\tassertNumber(left);\n\tassertNumber(right);\n\treturn right - left;\n};\n","import binarySearch from 'binary-search';\nimport { ascending } from 'num-sort';\n\nexport const largestPrime = 0x7fffffff;\n\nconst primeNumbers = [\n  // chunk #0\n  largestPrime, // 2^31-1\n\n  // chunk #1\n  5,\n  11,\n  23,\n  47,\n  97,\n  197,\n  397,\n  797,\n  1597,\n  3203,\n  6421,\n  12853,\n  25717,\n  51437,\n  102877,\n  205759,\n  411527,\n  823117,\n  1646237,\n  3292489,\n  6584983,\n  13169977,\n  26339969,\n  52679969,\n  105359939,\n  210719881,\n  421439783,\n  842879579,\n  1685759167,\n\n  // chunk #2\n  433,\n  877,\n  1759,\n  3527,\n  7057,\n  14143,\n  28289,\n  56591,\n  113189,\n  226379,\n  452759,\n  905551,\n  1811107,\n  3622219,\n  7244441,\n  14488931,\n  28977863,\n  57955739,\n  115911563,\n  231823147,\n  463646329,\n  927292699,\n  1854585413,\n\n  // chunk #3\n  953,\n  1907,\n  3821,\n  7643,\n  15287,\n  30577,\n  61169,\n  122347,\n  244703,\n  489407,\n  978821,\n  1957651,\n  3915341,\n  7830701,\n  15661423,\n  31322867,\n  62645741,\n  125291483,\n  250582987,\n  501165979,\n  1002331963,\n  2004663929,\n\n  // chunk #4\n  1039,\n  2081,\n  4177,\n  8363,\n  16729,\n  33461,\n  66923,\n  133853,\n  267713,\n  535481,\n  1070981,\n  2141977,\n  4283963,\n  8567929,\n  17135863,\n  34271747,\n  68543509,\n  137087021,\n  274174111,\n  548348231,\n  1096696463,\n\n  // chunk #5\n  31,\n  67,\n  137,\n  277,\n  557,\n  1117,\n  2237,\n  4481,\n  8963,\n  17929,\n  35863,\n  71741,\n  143483,\n  286973,\n  573953,\n  1147921,\n  2295859,\n  4591721,\n  9183457,\n  18366923,\n  36733847,\n  73467739,\n  146935499,\n  293871013,\n  587742049,\n  1175484103,\n\n  // chunk #6\n  599,\n  1201,\n  2411,\n  4831,\n  9677,\n  19373,\n  38747,\n  77509,\n  155027,\n  310081,\n  620171,\n  1240361,\n  2480729,\n  4961459,\n  9922933,\n  19845871,\n  39691759,\n  79383533,\n  158767069,\n  317534141,\n  635068283,\n  1270136683,\n\n  // chunk #7\n  311,\n  631,\n  1277,\n  2557,\n  5119,\n  10243,\n  20507,\n  41017,\n  82037,\n  164089,\n  328213,\n  656429,\n  1312867,\n  2625761,\n  5251529,\n  10503061,\n  21006137,\n  42012281,\n  84024581,\n  168049163,\n  336098327,\n  672196673,\n  1344393353,\n\n  // chunk #8\n  3,\n  7,\n  17,\n  37,\n  79,\n  163,\n  331,\n  673,\n  1361,\n  2729,\n  5471,\n  10949,\n  21911,\n  43853,\n  87719,\n  175447,\n  350899,\n  701819,\n  1403641,\n  2807303,\n  5614657,\n  11229331,\n  22458671,\n  44917381,\n  89834777,\n  179669557,\n  359339171,\n  718678369,\n  1437356741,\n\n  // chunk #9\n  43,\n  89,\n  179,\n  359,\n  719,\n  1439,\n  2879,\n  5779,\n  11579,\n  23159,\n  46327,\n  92657,\n  185323,\n  370661,\n  741337,\n  1482707,\n  2965421,\n  5930887,\n  11861791,\n  23723597,\n  47447201,\n  94894427,\n  189788857,\n  379577741,\n  759155483,\n  1518310967,\n\n  // chunk #10\n  379,\n  761,\n  1523,\n  3049,\n  6101,\n  12203,\n  24407,\n  48817,\n  97649,\n  195311,\n  390647,\n  781301,\n  1562611,\n  3125257,\n  6250537,\n  12501169,\n  25002389,\n  50004791,\n  100009607,\n  200019221,\n  400038451,\n  800076929,\n  1600153859,\n\n  // chunk #11\n  13,\n  29,\n  59,\n  127,\n  257,\n  521,\n  1049,\n  2099,\n  4201,\n  8419,\n  16843,\n  33703,\n  67409,\n  134837,\n  269683,\n  539389,\n  1078787,\n  2157587,\n  4315183,\n  8630387,\n  17260781,\n  34521589,\n  69043189,\n  138086407,\n  276172823,\n  552345671,\n  1104691373,\n\n  // chunk #12\n  19,\n  41,\n  83,\n  167,\n  337,\n  677,\n  1361,\n  2729,\n  5471,\n  10949,\n  21911,\n  43853,\n  87719,\n  175447,\n  350899,\n  701819,\n  1403641,\n  2807303,\n  5614657,\n  11229331,\n  22458671,\n  44917381,\n  89834777,\n  179669557,\n  359339171,\n  718678369,\n  1437356741,\n\n  // chunk #13\n  53,\n  107,\n  223,\n  449,\n  907,\n  1823,\n  3659,\n  7321,\n  14653,\n  29311,\n  58631,\n  117269,\n  234539,\n  469099,\n  938207,\n  1876417,\n  3752839,\n  7505681,\n  15011389,\n  30022781,\n  60045577,\n  120091177,\n  240182359,\n  480364727,\n  960729461,\n  1921458943\n];\n\nprimeNumbers.sort(ascending);\n\nexport function nextPrime(value) {\n  let index = binarySearch(primeNumbers, value, ascending);\n  if (index < 0) {\n    index = ~index;\n  }\n  return primeNumbers[index];\n}\n","import { largestPrime, nextPrime } from './primeFinder';\n\nconst FREE = 0;\nconst FULL = 1;\nconst REMOVED = 2;\n\nconst defaultInitialCapacity = 150;\nconst defaultMinLoadFactor = 1 / 6;\nconst defaultMaxLoadFactor = 2 / 3;\n\nexport default class HashTable {\n  constructor(options = {}) {\n    if (options instanceof HashTable) {\n      this.table = options.table.slice();\n      this.values = options.values.slice();\n      this.state = options.state.slice();\n      this.minLoadFactor = options.minLoadFactor;\n      this.maxLoadFactor = options.maxLoadFactor;\n      this.distinct = options.distinct;\n      this.freeEntries = options.freeEntries;\n      this.lowWaterMark = options.lowWaterMark;\n      this.highWaterMark = options.maxLoadFactor;\n      return;\n    }\n\n    const initialCapacity =\n      options.initialCapacity === undefined\n        ? defaultInitialCapacity\n        : options.initialCapacity;\n    if (initialCapacity < 0) {\n      throw new RangeError(\n        `initial capacity must not be less than zero: ${initialCapacity}`\n      );\n    }\n\n    const minLoadFactor =\n      options.minLoadFactor === undefined\n        ? defaultMinLoadFactor\n        : options.minLoadFactor;\n    const maxLoadFactor =\n      options.maxLoadFactor === undefined\n        ? defaultMaxLoadFactor\n        : options.maxLoadFactor;\n    if (minLoadFactor < 0 || minLoadFactor >= 1) {\n      throw new RangeError(`invalid minLoadFactor: ${minLoadFactor}`);\n    }\n    if (maxLoadFactor <= 0 || maxLoadFactor >= 1) {\n      throw new RangeError(`invalid maxLoadFactor: ${maxLoadFactor}`);\n    }\n    if (minLoadFactor >= maxLoadFactor) {\n      throw new RangeError(\n        `minLoadFactor (${minLoadFactor}) must be smaller than maxLoadFactor (${maxLoadFactor})`\n      );\n    }\n\n    let capacity = initialCapacity;\n    // User wants to put at least capacity elements. We need to choose the size based on the maxLoadFactor to\n    // avoid the need to rehash before this capacity is reached.\n    // actualCapacity * maxLoadFactor >= capacity\n    capacity = (capacity / maxLoadFactor) | 0;\n    capacity = nextPrime(capacity);\n    if (capacity === 0) capacity = 1;\n\n    this.table = newArray(capacity);\n    this.values = newArray(capacity);\n    this.state = newArray(capacity);\n\n    this.minLoadFactor = minLoadFactor;\n    if (capacity === largestPrime) {\n      this.maxLoadFactor = 1;\n    } else {\n      this.maxLoadFactor = maxLoadFactor;\n    }\n\n    this.distinct = 0;\n    this.freeEntries = capacity;\n\n    this.lowWaterMark = 0;\n    this.highWaterMark = chooseHighWaterMark(capacity, this.maxLoadFactor);\n  }\n\n  clone() {\n    return new HashTable(this);\n  }\n\n  get size() {\n    return this.distinct;\n  }\n\n  get(key) {\n    const i = this.indexOfKey(key);\n    if (i < 0) return 0;\n    return this.values[i];\n  }\n\n  set(key, value) {\n    let i = this.indexOfInsertion(key);\n    if (i < 0) {\n      i = -i - 1;\n      this.values[i] = value;\n      return false;\n    }\n\n    if (this.distinct > this.highWaterMark) {\n      const newCapacity = chooseGrowCapacity(\n        this.distinct + 1,\n        this.minLoadFactor,\n        this.maxLoadFactor\n      );\n      this.rehash(newCapacity);\n      return this.set(key, value);\n    }\n\n    this.table[i] = key;\n    this.values[i] = value;\n    if (this.state[i] === FREE) this.freeEntries--;\n    this.state[i] = FULL;\n    this.distinct++;\n\n    if (this.freeEntries < 1) {\n      const newCapacity = chooseGrowCapacity(\n        this.distinct + 1,\n        this.minLoadFactor,\n        this.maxLoadFactor\n      );\n      this.rehash(newCapacity);\n    }\n\n    return true;\n  }\n\n  remove(key, noRehash) {\n    const i = this.indexOfKey(key);\n    if (i < 0) return false;\n\n    this.state[i] = REMOVED;\n    this.distinct--;\n\n    if (!noRehash) this.maybeShrinkCapacity();\n\n    return true;\n  }\n\n  delete(key, noRehash) {\n    const i = this.indexOfKey(key);\n    if (i < 0) return false;\n\n    this.state[i] = FREE;\n    this.distinct--;\n\n    if (!noRehash) this.maybeShrinkCapacity();\n\n    return true;\n  }\n\n  maybeShrinkCapacity() {\n    if (this.distinct < this.lowWaterMark) {\n      const newCapacity = chooseShrinkCapacity(\n        this.distinct,\n        this.minLoadFactor,\n        this.maxLoadFactor\n      );\n      this.rehash(newCapacity);\n    }\n  }\n\n  containsKey(key) {\n    return this.indexOfKey(key) >= 0;\n  }\n\n  indexOfKey(key) {\n    const table = this.table;\n    const state = this.state;\n    const length = this.table.length;\n\n    const hash = key & 0x7fffffff;\n    let i = hash % length;\n    let decrement = hash % (length - 2);\n    if (decrement === 0) decrement = 1;\n\n    while (state[i] !== FREE && (state[i] === REMOVED || table[i] !== key)) {\n      i -= decrement;\n      if (i < 0) i += length;\n    }\n\n    if (state[i] === FREE) return -1;\n    return i;\n  }\n\n  containsValue(value) {\n    return this.indexOfValue(value) >= 0;\n  }\n\n  indexOfValue(value) {\n    const values = this.values;\n    const state = this.state;\n\n    for (var i = 0; i < state.length; i++) {\n      if (state[i] === FULL && values[i] === value) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  indexOfInsertion(key) {\n    const table = this.table;\n    const state = this.state;\n    const length = table.length;\n\n    const hash = key & 0x7fffffff;\n    let i = hash % length;\n    let decrement = hash % (length - 2);\n    if (decrement === 0) decrement = 1;\n\n    while (state[i] === FULL && table[i] !== key) {\n      i -= decrement;\n      if (i < 0) i += length;\n    }\n\n    if (state[i] === REMOVED) {\n      const j = i;\n      while (state[i] !== FREE && (state[i] === REMOVED || table[i] !== key)) {\n        i -= decrement;\n        if (i < 0) i += length;\n      }\n      if (state[i] === FREE) i = j;\n    }\n\n    if (state[i] === FULL) {\n      return -i - 1;\n    }\n\n    return i;\n  }\n\n  ensureCapacity(minCapacity) {\n    if (this.table.length < minCapacity) {\n      const newCapacity = nextPrime(minCapacity);\n      this.rehash(newCapacity);\n    }\n  }\n\n  rehash(newCapacity) {\n    const oldCapacity = this.table.length;\n\n    if (newCapacity <= this.distinct) throw new Error('Unexpected');\n\n    const oldTable = this.table;\n    const oldValues = this.values;\n    const oldState = this.state;\n\n    const newTable = newArray(newCapacity);\n    const newValues = newArray(newCapacity);\n    const newState = newArray(newCapacity);\n\n    this.lowWaterMark = chooseLowWaterMark(newCapacity, this.minLoadFactor);\n    this.highWaterMark = chooseHighWaterMark(newCapacity, this.maxLoadFactor);\n\n    this.table = newTable;\n    this.values = newValues;\n    this.state = newState;\n    this.freeEntries = newCapacity - this.distinct;\n\n    for (var i = 0; i < oldCapacity; i++) {\n      if (oldState[i] === FULL) {\n        var element = oldTable[i];\n        var index = this.indexOfInsertion(element);\n        newTable[index] = element;\n        newValues[index] = oldValues[i];\n        newState[index] = FULL;\n      }\n    }\n  }\n\n  forEachKey(callback) {\n    for (var i = 0; i < this.state.length; i++) {\n      if (this.state[i] === FULL) {\n        if (!callback(this.table[i])) return false;\n      }\n    }\n    return true;\n  }\n\n  forEachValue(callback) {\n    for (var i = 0; i < this.state.length; i++) {\n      if (this.state[i] === FULL) {\n        if (!callback(this.values[i])) return false;\n      }\n    }\n    return true;\n  }\n\n  forEachPair(callback) {\n    for (var i = 0; i < this.state.length; i++) {\n      if (this.state[i] === FULL) {\n        if (!callback(this.table[i], this.values[i])) return false;\n      }\n    }\n    return true;\n  }\n}\n\nfunction chooseLowWaterMark(capacity, minLoad) {\n  return (capacity * minLoad) | 0;\n}\n\nfunction chooseHighWaterMark(capacity, maxLoad) {\n  return Math.min(capacity - 2, (capacity * maxLoad) | 0);\n}\n\nfunction chooseGrowCapacity(size, minLoad, maxLoad) {\n  return nextPrime(\n    Math.max(size + 1, ((4 * size) / (3 * minLoad + maxLoad)) | 0)\n  );\n}\n\nfunction chooseShrinkCapacity(size, minLoad, maxLoad) {\n  return nextPrime(\n    Math.max(size + 1, ((4 * size) / (minLoad + 3 * maxLoad)) | 0)\n  );\n}\n\nfunction newArray(size) {\n  return Array(size).fill(0);\n}\n","import HashTable from 'ml-hash-table';\n\nexport class SparseMatrix {\n  constructor(rows, columns, options = {}) {\n    if (rows instanceof SparseMatrix) {\n      // clone\n      const other = rows;\n      this._init(\n        other.rows,\n        other.columns,\n        other.elements.clone(),\n        other.threshold\n      );\n      return;\n    }\n\n    if (Array.isArray(rows)) {\n      const matrix = rows;\n      rows = matrix.length;\n      options = columns || {};\n      columns = matrix[0].length;\n      this._init(rows, columns, new HashTable(options), options.threshold);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          var value = matrix[i][j];\n          if (this.threshold && Math.abs(value) < this.threshold) value = 0;\n          if (value !== 0) {\n            this.elements.set(i * columns + j, matrix[i][j]);\n          }\n        }\n      }\n    } else {\n      this._init(rows, columns, new HashTable(options), options.threshold);\n    }\n  }\n\n  _init(rows, columns, elements, threshold) {\n    this.rows = rows;\n    this.columns = columns;\n    this.elements = elements;\n    this.threshold = threshold || 0;\n  }\n\n  static eye(rows = 1, columns = rows) {\n    const min = Math.min(rows, columns);\n    const matrix = new SparseMatrix(rows, columns, { initialCapacity: min });\n    for (var i = 0; i < min; i++) {\n      matrix.set(i, i, 1);\n    }\n    return matrix;\n  }\n\n  clone() {\n    return new SparseMatrix(this);\n  }\n\n  to2DArray() {\n    const copy = new Array(this.rows);\n    for (var i = 0; i < this.rows; i++) {\n      copy[i] = new Array(this.columns);\n      for (var j = 0; j < this.columns; j++) {\n        copy[i][j] = this.get(i, j);\n      }\n    }\n    return copy;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isSymmetric() {\n    if (!this.isSquare()) return false;\n\n    var symmetric = true;\n    this.forEachNonZero((i, j, v) => {\n      if (this.get(j, i) !== v) {\n        symmetric = false;\n        return false;\n      }\n      return v;\n    });\n    return symmetric;\n  }\n\n  /**\n   * Search for the wither band in the main diagonals\n   * @return {number}\n   */\n  bandWidth() {\n    let min = this.columns;\n    let max = -1;\n    this.forEachNonZero((i, j, v) => {\n      let diff = i - j;\n      min = Math.min(min, diff);\n      max = Math.max(max, diff);\n      return v;\n    });\n    return max - min;\n  }\n\n  /**\n   * Test if a matrix is consider banded using a threshold\n   * @param {number} width\n   * @return {boolean}\n   */\n  isBanded(width) {\n    let bandWidth = this.bandWidth();\n    return bandWidth <= width;\n  }\n\n  get cardinality() {\n    return this.elements.size;\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  get(row, column) {\n    return this.elements.get(row * this.columns + column);\n  }\n\n  set(row, column, value) {\n    if (this.threshold && Math.abs(value) < this.threshold) value = 0;\n    if (value === 0) {\n      this.elements.remove(row * this.columns + column);\n    } else {\n      this.elements.set(row * this.columns + column, value);\n    }\n    return this;\n  }\n\n  mmul(other) {\n    if (this.columns !== other.rows) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Number of columns of left matrix are not equal to number of rows of right matrix.'\n      );\n    }\n\n    const m = this.rows;\n    const p = other.columns;\n\n    const result = new SparseMatrix(m, p);\n    this.forEachNonZero((i, j, v1) => {\n      other.forEachNonZero((k, l, v2) => {\n        if (j === k) {\n          result.set(i, l, result.get(i, l) + v1 * v2);\n        }\n        return v2;\n      });\n      return v1;\n    });\n    return result;\n  }\n\n  kroneckerProduct(other) {\n    const m = this.rows;\n    const n = this.columns;\n    const p = other.rows;\n    const q = other.columns;\n\n    const result = new SparseMatrix(m * p, n * q, {\n      initialCapacity: this.cardinality * other.cardinality\n    });\n    this.forEachNonZero((i, j, v1) => {\n      other.forEachNonZero((k, l, v2) => {\n        result.set(p * i + k, q * j + l, v1 * v2);\n        return v2;\n      });\n      return v1;\n    });\n    return result;\n  }\n\n  forEachNonZero(callback) {\n    this.elements.forEachPair((key, value) => {\n      const i = (key / this.columns) | 0;\n      const j = key % this.columns;\n      let r = callback(i, j, value);\n      if (r === false) return false; // stop iteration\n      if (this.threshold && Math.abs(r) < this.threshold) r = 0;\n      if (r !== value) {\n        if (r === 0) {\n          this.elements.remove(key, true);\n        } else {\n          this.elements.set(key, r);\n        }\n      }\n      return true;\n    });\n    this.elements.maybeShrinkCapacity();\n    return this;\n  }\n\n  getNonZeros() {\n    const cardinality = this.cardinality;\n    const rows = new Array(cardinality);\n    const columns = new Array(cardinality);\n    const values = new Array(cardinality);\n    var idx = 0;\n    this.forEachNonZero((i, j, value) => {\n      rows[idx] = i;\n      columns[idx] = j;\n      values[idx] = value;\n      idx++;\n      return value;\n    });\n    return { rows, columns, values };\n  }\n\n  setThreshold(newThreshold) {\n    if (newThreshold !== 0 && newThreshold !== this.threshold) {\n      this.threshold = newThreshold;\n      this.forEachNonZero((i, j, v) => v);\n    }\n    return this;\n  }\n\n  /**\n   * @return {SparseMatrix} - New transposed sparse matrix\n   */\n  transpose() {\n    let trans = new SparseMatrix(this.columns, this.rows, {\n      initialCapacity: this.cardinality\n    });\n    this.forEachNonZero((i, j, value) => {\n      trans.set(j, i, value);\n      return value;\n    });\n    return trans;\n  }\n}\n\nSparseMatrix.prototype.klass = 'Matrix';\n\nSparseMatrix.identity = SparseMatrix.eye;\nSparseMatrix.prototype.tensorProduct = SparseMatrix.prototype.kroneckerProduct;\n\n/*\n Add dynamically instance and static methods for mathematical operations\n */\n\nvar inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\nvar inplaceOperatorScalar = `\n(function %name%S(value) {\n    this.forEachNonZero((i, j, v) => v %op% value);\n    return this;\n})\n`;\n\nvar inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix.forEachNonZero((i, j, v) => {\n        this.set(i, j, this.get(i, j) %op% v);\n        return v;\n    });\n    return this;\n})\n`;\n\nvar staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new SparseMatrix(matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\nvar inplaceMethod = `\n(function %name%() {\n    this.forEachNonZero((i, j, v) => %method%(v));\n    return this;\n})\n`;\n\nvar staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new SparseMatrix(matrix);\n    return newMatrix.%name%();\n})\n`;\n\nconst operators = [\n  // Arithmetic operators\n  ['+', 'add'],\n  ['-', 'sub', 'subtract'],\n  ['*', 'mul', 'multiply'],\n  ['/', 'div', 'divide'],\n  ['%', 'mod', 'modulus'],\n  // Bitwise operators\n  ['&', 'and'],\n  ['|', 'or'],\n  ['^', 'xor'],\n  ['<<', 'leftShift'],\n  ['>>', 'signPropagatingRightShift'],\n  ['>>>', 'rightShift', 'zeroFillRightShift']\n];\n\nfor (const operator of operators) {\n  for (let i = 1; i < operator.length; i++) {\n    SparseMatrix.prototype[operator[i]] = eval(\n      fillTemplateFunction(inplaceOperator, {\n        name: operator[i],\n        op: operator[0]\n      })\n    );\n    SparseMatrix.prototype[`${operator[i]}S`] = eval(\n      fillTemplateFunction(inplaceOperatorScalar, {\n        name: `${operator[i]}S`,\n        op: operator[0]\n      })\n    );\n    SparseMatrix.prototype[`${operator[i]}M`] = eval(\n      fillTemplateFunction(inplaceOperatorMatrix, {\n        name: `${operator[i]}M`,\n        op: operator[0]\n      })\n    );\n\n    SparseMatrix[operator[i]] = eval(\n      fillTemplateFunction(staticOperator, { name: operator[i] })\n    );\n  }\n}\n\nvar methods = [['~', 'not']];\n\n[\n  'abs',\n  'acos',\n  'acosh',\n  'asin',\n  'asinh',\n  'atan',\n  'atanh',\n  'cbrt',\n  'ceil',\n  'clz32',\n  'cos',\n  'cosh',\n  'exp',\n  'expm1',\n  'floor',\n  'fround',\n  'log',\n  'log1p',\n  'log10',\n  'log2',\n  'round',\n  'sign',\n  'sin',\n  'sinh',\n  'sqrt',\n  'tan',\n  'tanh',\n  'trunc'\n].forEach(function (mathMethod) {\n  methods.push([`Math.${mathMethod}`, mathMethod]);\n});\n\nfor (const method of methods) {\n  for (let i = 1; i < method.length; i++) {\n    SparseMatrix.prototype[method[i]] = eval(\n      fillTemplateFunction(inplaceMethod, {\n        name: method[i],\n        method: method[0]\n      })\n    );\n    SparseMatrix[method[i]] = eval(\n      fillTemplateFunction(staticMethod, { name: method[i] })\n    );\n  }\n}\n\nfunction fillTemplateFunction(template, values) {\n  for (const i in values) {\n    template = template.replace(new RegExp(`%${i}%`, 'g'), values[i]);\n  }\n  return template;\n}\n","export default function additiveSymmetric(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i]) * (a[i] + b[i])) / (a[i] * b[i]);\n  }\n  return 2 * d;\n}\n","export default function avg(a, b) {\n  var ii = a.length;\n  var max = 0;\n  var ans = 0;\n  var aux = 0;\n  for (var i = 0; i < ii; i++) {\n    aux = Math.abs(a[i] - b[i]);\n    ans += aux;\n    if (max < aux) {\n      max = aux;\n    }\n  }\n  return (max + ans) / 2;\n}\n","export default function bhattacharyya(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return -Math.log(ans);\n}\n","export default function canberra(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.abs(a[i] - b[i]) / (a[i] + b[i]);\n  }\n  return ans;\n}\n","export default function chebyshev(a, b) {\n  var ii = a.length;\n  var max = 0;\n  var aux = 0;\n  for (var i = 0; i < ii; i++) {\n    aux = Math.abs(a[i] - b[i]);\n    if (max < aux) {\n      max = aux;\n    }\n  }\n  return max;\n}\n","export default function clark(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += Math.sqrt(\n      ((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i]))\n    );\n  }\n  return 2 * d;\n}\n","export default function czekanowskiSimilarity(a, b) {\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < a.length; i++) {\n    up += Math.min(a[i], b[i]);\n    down += a[i] + b[i];\n  }\n  return (2 * up) / down;\n}\n","import czekanowskiSimilarity from '../similarities/czekanowski';\n\nexport default function czekanowskiDistance(a, b) {\n  return 1 - czekanowskiSimilarity(a, b);\n}\n","export default function dice(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var q1 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * a[i];\n    q1 += b[i] * b[i];\n    q2 += (a[i] - b[i]) * (a[i] - b[i]);\n  }\n  return q2 / (p + q1);\n}\n","export default function divergence(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i]));\n  }\n  return 2 * d;\n}\n","export default function fidelity(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return ans;\n}\n","export default function gower(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.abs(a[i] - b[i]);\n  }\n  return ans / ii;\n}\n","export default function harmonicMean(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += (a[i] * b[i]) / (a[i] + b[i]);\n  }\n  return 2 * ans;\n}\n","export default function hellinger(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return 2 * Math.sqrt(1 - ans);\n}\n","export default function innerProduct(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += a[i] * b[i];\n  }\n  return ans;\n}\n","export default function intersection(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.min(a[i], b[i]);\n  }\n  return 1 - ans;\n}\n","export default function jaccard(a, b) {\n  var ii = a.length;\n  var p1 = 0;\n  var p2 = 0;\n  var q1 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p1 += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q1 += b[i] * b[i];\n    q2 += (a[i] - b[i]) * (a[i] - b[i]);\n  }\n  return q2 / (p2 + q1 - p1);\n}\n","export default function jeffreys(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += (a[i] - b[i]) * Math.log(a[i] / b[i]);\n  }\n  return ans;\n}\n","export default function jensenDifference(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      (a[i] * Math.log(a[i]) + b[i] * Math.log(b[i])) / 2 -\n      ((a[i] + b[i]) / 2) * Math.log((a[i] + b[i]) / 2);\n  }\n  return ans;\n}\n","export default function jensenShannon(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var q = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * Math.log((2 * a[i]) / (a[i] + b[i]));\n    q += b[i] * Math.log((2 * b[i]) / (a[i] + b[i]));\n  }\n  return (p + q) / 2;\n}\n","export default function kdivergence(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += a[i] * Math.log((2 * a[i]) / (a[i] + b[i]));\n  }\n  return ans;\n}\n","export default function kulczynski(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.abs(a[i] - b[i]);\n    down += Math.min(a[i], b[i]);\n  }\n  return up / down;\n}\n","export default function kullbackLeibler(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += a[i] * Math.log(a[i] / b[i]);\n  }\n  return ans;\n}\n","export default function kumarHassebrook(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var p2 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q2 += b[i] * b[i];\n  }\n  return p / (p2 + q2 - p);\n}\n","export default function kumarJohnson(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      Math.pow(a[i] * a[i] - b[i] * b[i], 2) / (2 * Math.pow(a[i] * b[i], 1.5));\n  }\n  return ans;\n}\n","export default function lorentzian(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.log(Math.abs(a[i] - b[i]) + 1);\n  }\n  return ans;\n}\n","export default function manhattan(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += Math.abs(a[i] - b[i]);\n  }\n  return d;\n}\n","export default function matusita(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return Math.sqrt(2 - 2 * ans);\n}\n","export default function minkowski(a, b, p) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += Math.pow(Math.abs(a[i] - b[i]), p);\n  }\n  return Math.pow(d, 1 / p);\n}\n","export default function motyka(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.min(a[i], b[i]);\n    down += a[i] + b[i];\n  }\n  return 1 - up / down;\n}\n","export default function neyman(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / a[i];\n  }\n  return d;\n}\n","export default function pearson(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / b[i];\n  }\n  return d;\n}\n","export default function probabilisticSymmetric(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);\n  }\n  return 2 * d;\n}\n","export default function ruzicka(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.min(a[i], b[i]);\n    down += Math.max(a[i], b[i]);\n  }\n  return up / down;\n}\n","export default function soergel(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.abs(a[i] - b[i]);\n    down += Math.max(a[i], b[i]);\n  }\n  return up / down;\n}\n","export default function sorensen(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.abs(a[i] - b[i]);\n    down += a[i] + b[i];\n  }\n  return up / down;\n}\n","export default function squared(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);\n  }\n  return d;\n}\n","export default function squaredChord(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      (Math.sqrt(a[i]) - Math.sqrt(b[i])) * (Math.sqrt(a[i]) - Math.sqrt(b[i]));\n  }\n  return ans;\n}\n","export default function taneja(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      ((a[i] + b[i]) / 2) *\n      Math.log((a[i] + b[i]) / (2 * Math.sqrt(a[i] * b[i])));\n  }\n  return ans;\n}\n","export default function tanimoto(a, b, bitvector) {\n  if (bitvector) {\n    var inter = 0;\n    var union = 0;\n    for (var j = 0; j < a.length; j++) {\n      inter += a[j] && b[j];\n      union += a[j] || b[j];\n    }\n    if (union === 0) {\n      return 1;\n    }\n    return inter / union;\n  } else {\n    var ii = a.length;\n    var p = 0;\n    var q = 0;\n    var m = 0;\n    for (var i = 0; i < ii; i++) {\n      p += a[i];\n      q += b[i];\n      m += Math.min(a[i], b[i]);\n    }\n    return 1 - (p + q - 2 * m) / (p + q - m);\n  }\n}\n","import tanimotoS from '../similarities/tanimoto';\n\nexport default function tanimoto(a, b, bitvector) {\n  if (bitvector) {\n    return 1 - tanimotoS(a, b, bitvector);\n  } else {\n    var ii = a.length;\n    var p = 0;\n    var q = 0;\n    var m = 0;\n    for (var i = 0; i < ii; i++) {\n      p += a[i];\n      q += b[i];\n      m += Math.min(a[i], b[i]);\n    }\n    return (p + q - 2 * m) / (p + q - m);\n  }\n}\n","export default function topsoe(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      a[i] * Math.log((2 * a[i]) / (a[i] + b[i])) +\n      b[i] * Math.log((2 * b[i]) / (a[i] + b[i]));\n  }\n  return ans;\n}\n","export default function waveHedges(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += 1 - Math.min(a[i], b[i]) / Math.max(a[i], b[i]);\n  }\n  return ans;\n}\n","import binarySearch from 'binary-search';\nimport { ascending } from 'num-sort';\n\n/**\n * Function that creates the tree\n * @param {Array<Array<number>>} spectrum\n * @param {object} [options]\n * @return {Tree|null}\n * left and right have the same structure than the parent,\n * or are null if they are leaves\n */\nexport function createTree(spectrum, options = {}) {\n  var X = spectrum[0];\n  const {\n    minWindow = 0.16,\n    threshold = 0.01,\n    from = X[0],\n    to = X[X.length - 1]\n  } = options;\n\n  return mainCreateTree(\n    spectrum[0],\n    spectrum[1],\n    from,\n    to,\n    minWindow,\n    threshold\n  );\n}\n\nfunction mainCreateTree(X, Y, from, to, minWindow, threshold) {\n  if (to - from < minWindow) {\n    return null;\n  }\n\n  // search first point\n  var start = binarySearch(X, from, ascending);\n  if (start < 0) {\n    start = ~start;\n  }\n\n  // stop at last point\n  var sum = 0;\n  var center = 0;\n  for (var i = start; i < X.length; i++) {\n    if (X[i] >= to) {\n      break;\n    }\n    sum += Y[i];\n    center += X[i] * Y[i];\n  }\n\n  if (sum < threshold) {\n    return null;\n  }\n\n  center /= sum;\n  if (center - from < 1e-6 || to - center < 1e-6) {\n    return null;\n  }\n  if (center - from < minWindow / 4) {\n    return mainCreateTree(X, Y, center, to, minWindow, threshold);\n  } else {\n    if (to - center < minWindow / 4) {\n      return mainCreateTree(X, Y, from, center, minWindow, threshold);\n    } else {\n      return new Tree(\n        sum,\n        center,\n        mainCreateTree(X, Y, from, center, minWindow, threshold),\n        mainCreateTree(X, Y, center, to, minWindow, threshold)\n      );\n    }\n  }\n}\n\nclass Tree {\n  constructor(sum, center, left, right) {\n    this.sum = sum;\n    this.center = center;\n    this.left = left;\n    this.right = right;\n  }\n}\n","import { createTree } from './createTree';\n\n/**\n * Similarity between two nodes\n * @param {Tree|Array<Array<number>>} a - tree A node\n * @param {Tree|Array<Array<number>>} b - tree B node\n * @param {object} [options]\n * @return {number} similarity measure between tree nodes\n */\nexport function getSimilarity(a, b, options = {}) {\n  const { alpha = 0.1, beta = 0.33, gamma = 0.001 } = options;\n\n  if (a === null || b === null) {\n    return 0;\n  }\n  if (Array.isArray(a)) {\n    a = createTree(a);\n  }\n  if (Array.isArray(b)) {\n    b = createTree(b);\n  }\n\n  var C =\n    (alpha * Math.min(a.sum, b.sum)) / Math.max(a.sum, b.sum) +\n    (1 - alpha) * Math.exp(-gamma * Math.abs(a.center - b.center));\n\n  return (\n    beta * C +\n    ((1 - beta) *\n      (getSimilarity(a.left, b.left, options) +\n        getSimilarity(a.right, b.right, options))) /\n      2\n  );\n}\n","import { getSimilarity } from './getSimilarity';\n\nexport { createTree } from './createTree';\n\nexport function treeSimilarity(A, B, options = {}) {\n  return getSimilarity(A, B, options);\n}\n\nexport function getFunction(options = {}) {\n  return (A, B) => getSimilarity(A, B, options);\n}\n","export default function cosine(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var p2 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q2 += b[i] * b[i];\n  }\n  return p / (Math.sqrt(p2) * Math.sqrt(q2));\n}\n","import diceD from '../distances/dice';\n\nexport default function dice(a, b) {\n  return 1 - diceD(a, b);\n}\n","import intersectionD from '../distances/intersection';\n\nexport default function intersection(a, b) {\n  return 1 - intersectionD(a, b);\n}\n","import jaccardD from '../distances/jaccard';\n\nexport default function jaccard(a, b) {\n  return 1 - jaccardD(a, b);\n}\n","import kulczynskiD from '../distances/kulczynski';\n\nexport default function kulczynski(a, b) {\n  return 1 / kulczynskiD(a, b);\n}\n","import motykaD from '../distances/motyka';\n\nexport default function motyka(a, b) {\n  return 1 - motykaD(a, b);\n}\n","import mean from 'ml-array-mean';\n\nimport cosine from './cosine';\n\nexport default function pearson(a, b) {\n  var avgA = mean(a);\n  var avgB = mean(b);\n\n  var newA = new Array(a.length);\n  var newB = new Array(b.length);\n  for (var i = 0; i < newA.length; i++) {\n    newA[i] = a[i] - avgA;\n    newB[i] = b[i] - avgB;\n  }\n\n  return cosine(newA, newB);\n}\n","import squaredChordD from '../distances/squaredChord';\n\nexport default function squaredChord(a, b) {\n  return 1 - squaredChordD(a, b);\n}\n","'use strict';\n\n// Accuracy\nexports.acc = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.tn[i] + pred.tp[i]) / (l - 1);\n    }\n    return result;\n};\n\n// Error rate\nexports.err = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fn[i] + pred.fp[i] / (l - 1));\n    }\n    return result;\n};\n\n// False positive rate\nexports.fpr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.fp[i] / pred.nNeg;\n    }\n    return result;\n};\n\n// True positive rate\nexports.tpr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.tp[i] / pred.nPos;\n    }\n    return result;\n};\n\n// False negative rate\nexports.fnr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.fn[i] / pred.nPos;\n    }\n    return result;\n};\n\n// True negative rate\nexports.tnr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.tn[i] / pred.nNeg;\n    }\n    return result;\n};\n\n// Positive predictive value\nexports.ppv = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fp[i] + pred.tp[i] !== 0) ? (pred.tp[i] / (pred.fp[i] + pred.tp[i])) : 0;\n    }\n    return result;\n};\n\n// Negative predictive value\nexports.npv = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fn[i] + pred.tn[i] !== 0) ? (pred.tn[i] / (pred.fn[i] + pred.tn[i])) : 0;\n    }\n    return result;\n};\n\n// Prediction conditioned fallout\nexports.pcfall = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fp[i] + pred.tp[i] !== 0) ? 1 - (pred.tp[i] / (pred.fp[i] + pred.tp[i])) : 1;\n    }\n    return result;\n};\n\n// Prediction conditioned miss\nexports.pcmiss = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fn[i] + pred.tn[i] !== 0) ? 1 - (pred.tn[i] / (pred.fn[i] + pred.tn[i])) : 1;\n    }\n    return result;\n};\n\n// Lift value\nexports.lift = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.nPosPred[i] !== 0) ? ((pred.tp[i] / pred.nPos) / (pred.nPosPred[i] / pred.nSamples)) : 0;\n    }\n    return result;\n};\n\n// Rate of positive predictions\nexports.rpp = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.nPosPred[i] / pred.nSamples;\n    }\n    return result;\n};\n\n// Rate of negative predictions\nexports.rnp = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.nNegPred[i] / pred.nSamples;\n    }\n    return result;\n};\n\n// Threshold\nexports.threshold = pred => {\n    const clone = pred.cutoffs.slice();\n    clone[0] = clone[1]; // Remove the infinite value\n    return clone;\n};\n","'use strict';\n\nconst measures = require('./measures');\n\nclass Performance {\n    /**\n     *\n     * @param prediction - The prediction matrix\n     * @param target - The target matrix (values: truthy for same class, falsy for different class)\n     * @param options\n     *\n     * @option    all    True if the entire matrix must be used. False to ignore the diagonal and lower part (default is false, for similarity/distance matrices)\n     * @option    max    True if the max value corresponds to a perfect match (like in similarity matrices), false if it is the min value (default is false, like in distance matrices. All values will be multiplied by -1)\n     */\n    constructor(prediction, target, options) {\n        options = options || {};\n        if (prediction.length !== target.length || prediction[0].length !== target[0].length) {\n            throw new Error('dimensions of prediction and target do not match');\n        }\n        const rows = prediction.length;\n        const columns = prediction[0].length;\n        const isDistance = !options.max;\n\n        const predP = [];\n\n        if (options.all) {\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    predP.push({\n                        pred: prediction[i][j],\n                        targ: target[i][j]\n                    });\n                }\n            }\n        } else {\n            if (rows < 3 || rows !== columns) {\n                throw new Error('When \"all\" option is false, the prediction matrix must be square and have at least 3 columns');\n            }\n            for (var i = 0; i < rows - 1; i++) {\n                for (var j = i + 1; j < columns; j++) {\n                    predP.push({\n                        pred: prediction[i][j],\n                        targ: target[i][j]\n                    });\n                }\n            }\n        }\n\n        if (isDistance) {\n            predP.sort((a, b) => a.pred - b.pred);\n        } else {\n            predP.sort((a, b) => b.pred - a.pred);\n        }\n        \n        const cutoffs = this.cutoffs = [isDistance ? Number.MIN_VALUE : Number.MAX_VALUE];\n        const fp = this.fp = [0];\n        const tp = this.tp = [0];\n\n        var nPos = 0;\n        var nNeg = 0;\n\n        var currentPred = predP[0].pred;\n        var nTp = 0;\n        var nFp = 0;\n        for (var i = 0; i < predP.length; i++) {\n            if (predP[i].pred !== currentPred) {\n                cutoffs.push(currentPred);\n                fp.push(nFp);\n                tp.push(nTp);\n                currentPred = predP[i].pred;\n            }\n            if (predP[i].targ) {\n                nPos++;\n                nTp++;\n            } else {\n                nNeg++;\n                nFp++;\n            }\n        }\n        cutoffs.push(currentPred);\n        fp.push(nFp);\n        tp.push(nTp);\n\n        const l = cutoffs.length;\n        const fn = this.fn = new Array(l);\n        const tn = this.tn = new Array(l);\n        const nPosPred = this.nPosPred = new Array(l);\n        const nNegPred = this.nNegPred = new Array(l);\n\n        for (var i = 0; i < l; i++) {\n            fn[i] = nPos - tp[i];\n            tn[i] = nNeg - fp[i];\n\n            nPosPred[i] = tp[i] + fp[i];\n            nNegPred[i] = tn[i] + fn[i];\n        }\n\n        this.nPos = nPos;\n        this.nNeg = nNeg;\n        this.nSamples = nPos + nNeg;\n    }\n\n    /**\n     * Computes a measure from the prediction object.\n     *\n     * Many measures are available and can be combined :\n     * To create a ROC curve, you need fpr and tpr\n     * To create a DET curve, you need fnr and fpr\n     * To create a Lift chart, you need rpp and lift\n     *\n     * Possible measures are : threshold (Threshold), acc (Accuracy), err (Error rate),\n     * fpr (False positive rate), tpr (True positive rate), fnr (False negative rate), tnr (True negative rate), ppv (Positive predictive value),\n     * npv (Negative predictive value), pcfall (Prediction-conditioned fallout), pcmiss (Prediction-conditioned miss), lift (Lift value), rpp (Rate of positive predictions), rnp (Rate of negative predictions)\n     *\n     * @param measure - The short name of the measure\n     *\n     * @return [number]\n     */\n    getMeasure(measure) {\n        if (typeof measure !== 'string') {\n            throw new Error('No measure specified');\n        }\n        if (!measures[measure]) {\n            throw new Error(`The specified measure (${measure}) does not exist`);\n        }\n        return measures[measure](this);\n    }\n\n    /**\n     * Returns the area under the ROC curve\n     */\n    getAURC() {\n        const l = this.cutoffs.length;\n        const x = new Array(l);\n        const y = new Array(l);\n        for (var i = 0; i < l; i++) {\n            x[i] = this.fp[i] / this.nNeg;\n            y[i] = this.tp[i] / this.nPos;\n        }\n        var auc = 0;\n        for (i = 1; i < l; i++) {\n            auc += 0.5 * (x[i] - x[i - 1]) * (y[i] + y[i - 1]);\n        }\n        return auc;\n    }\n\n    /**\n     * Returns the area under the DET curve\n     */\n    getAUDC() {\n        const l = this.cutoffs.length;\n        const x = new Array(l);\n        const y = new Array(l);\n        for (var i = 0; i < l; i++) {\n            x[i] = this.fn[i] / this.nPos;\n            y[i] = this.fp[i] / this.nNeg;\n        }\n        var auc = 0;\n        for (i = 1; i < l; i++) {\n            auc += 0.5 * (x[i] + x[i - 1]) * (y[i] - y[i - 1]);\n        }\n        return auc;\n    }\n\n    getDistribution(options) {\n        options = options || {};\n        var cutLength = this.cutoffs.length;\n        var cutLow = options.xMin || Math.floor(this.cutoffs[cutLength - 1] * 100) / 100;\n        var cutHigh = options.xMax || Math.ceil(this.cutoffs[1] * 100) / 100;\n        var interval = options.interval || Math.floor(((cutHigh - cutLow) / 20 * 10000000) - 1) / 10000000; // Trick to avoid the precision problem of float numbers\n\n        var xLabels = [];\n        var interValues = [];\n        var intraValues = [];\n        var interCumPercent = [];\n        var intraCumPercent = [];\n\n        var nTP = this.tp[cutLength - 1], currentTP = 0;\n        var nFP = this.fp[cutLength - 1], currentFP = 0;\n\n        for (var i = cutLow, j = (cutLength - 1); i <= cutHigh; i += interval) {\n            while (this.cutoffs[j] < i)\n                j--;\n\n            xLabels.push(i);\n\n            var thisTP = nTP - currentTP - this.tp[j];\n            var thisFP = nFP - currentFP - this.fp[j];\n\n            currentTP += thisTP;\n            currentFP += thisFP;\n\n            interValues.push(thisFP);\n            intraValues.push(thisTP);\n\n            interCumPercent.push(100 - (nFP - this.fp[j]) / nFP * 100);\n            intraCumPercent.push(100 - (nTP - this.tp[j]) / nTP * 100);\n        }\n\n        return {\n            xLabels: xLabels,\n            interValues: interValues,\n            intraValues: intraValues,\n            interCumPercent: interCumPercent,\n            intraCumPercent: intraCumPercent\n        };\n    }\n}\n\nPerformance.names = {\n    acc: 'Accuracy',\n    err: 'Error rate',\n    fpr: 'False positive rate',\n    tpr: 'True positive rate',\n    fnr: 'False negative rate',\n    tnr: 'True negative rate',\n    ppv: 'Positive predictive value',\n    npv: 'Negative predictive value',\n    pcfall: 'Prediction-conditioned fallout',\n    pcmiss: 'Prediction-conditioned miss',\n    lift: 'Lift value',\n    rpp: 'Rate of positive predictions',\n    rnp: 'Rate of negative predictions',\n    threshold: 'Threshold'\n};\n\nmodule.exports = Performance;\n","'use strict';\n\nvar defaultOptions = {\n  size: 1,\n  value: 0\n};\n\n/**\n * Case when the entry is an array\n * @param data\n * @param options\n * @returns {Array}\n */\nfunction arrayCase(data, options) {\n  var len = data.length;\n  if (typeof options.size === 'number') {\n    options.size = [options.size, options.size];\n  }\n\n  var cond = len + options.size[0] + options.size[1];\n\n  var output;\n  if (options.output) {\n    if (options.output.length !== cond) {\n      throw new RangeError('Wrong output size');\n    }\n    output = options.output;\n  } else {\n    output = new Array(cond);\n  }\n\n  var i;\n  if (options.value === 'circular') {\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) {\n        output[i] = data[(len - (options.size[0] % len) + i) % len];\n      } else if (i < options.size[0] + len) {\n        output[i] = data[i - options.size[0]];\n      } else {\n        output[i] = data[(i - options.size[0]) % len];\n      }\n    }\n  } else if (options.value === 'replicate') {\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) output[i] = data[0];\n      else if (i < options.size[0] + len) output[i] = data[i - options.size[0]];\n      else output[i] = data[len - 1];\n    }\n  } else if (options.value === 'symmetric') {\n    if (options.size[0] > len || options.size[1] > len) {\n      throw new RangeError(\n        'expanded value should not be bigger than the data length'\n      );\n    }\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) output[i] = data[options.size[0] - 1 - i];\n      else if (i < options.size[0] + len) output[i] = data[i - options.size[0]];\n      else output[i] = data[2 * len + options.size[0] - i - 1];\n    }\n  } else {\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) output[i] = options.value;\n      else if (i < options.size[0] + len) output[i] = data[i - options.size[0]];\n      else output[i] = options.value;\n    }\n  }\n\n  return output;\n}\n\n/**\n * Case when the entry is a matrix\n * @param data\n * @param options\n * @returns {Array}\n */\nfunction matrixCase(data, options) {\n  // var row = data.length;\n  // var col = data[0].length;\n  if (options.size[0] === undefined) {\n    options.size = [options.size, options.size, options.size, options.size];\n  }\n  throw new Error('matrix not supported yet, sorry');\n}\n\n/**\n * Pads and array\n * @param {Array <number>} data\n * @param {object} options\n */\nfunction padArray(data, options) {\n  options = Object.assign({}, defaultOptions, options);\n  if (Array.isArray(data)) {\n    if (Array.isArray(data[0])) return matrixCase(data, options);\n    else return arrayCase(data, options);\n  } else {\n    throw new TypeError('data should be an array');\n  }\n}\n\nmodule.exports = padArray;\n","'use strict';\n\nconst { Matrix, MatrixTransposeView, inverse } = require('ml-matrix');\nconst padArray = require('ml-pad-array');\n\nconst defaultOptions = {\n  windowSize: 5,\n  derivative: 1,\n  polynomial: 2,\n  pad: 'none',\n  padValue: 'replicate'\n};\n\n/**\n * Savitzky-Golay filter\n * @param {Array <number>} data\n * @param {number} h\n * @param {Object} options\n * @returns {Array}\n */\nfunction SavitzkyGolay(data, h, options) {\n  options = Object.assign({}, defaultOptions, options);\n  if (\n    options.windowSize % 2 === 0 ||\n    options.windowSize < 5 ||\n    !Number.isInteger(options.windowSize)\n  ) {\n    throw new RangeError(\n      'Invalid window size (should be odd and at least 5 integer number)'\n    );\n  }\n  if (options.derivative < 0 || !Number.isInteger(options.derivative)) {\n    throw new RangeError('Derivative should be a positive integer');\n  }\n  if (options.polynomial < 1 || !Number.isInteger(options.polynomial)) {\n    throw new RangeError('Polynomial should be a positive integer');\n  }\n\n  var C, norm;\n  var step = Math.floor(options.windowSize / 2);\n\n  if (options.pad === 'pre') {\n    data = padArray(data, { size: step, value: options.padValue });\n  }\n\n  var ans = new Array(data.length - 2 * step);\n\n  if (\n    options.windowSize === 5 &&\n    options.polynomial === 2 &&\n    (options.derivative === 1 || options.derivative === 2)\n  ) {\n    if (options.derivative === 1) {\n      C = [-2, -1, 0, 1, 2];\n      norm = 10;\n    } else {\n      C = [2, -1, -2, -1, 2];\n      norm = 7;\n    }\n  } else {\n    var J = Matrix.ones(options.windowSize, options.polynomial + 1);\n    var inic = -(options.windowSize - 1) / 2;\n    for (var i = 0; i < J.rows; i++) {\n      for (var j = 0; j < J.columns; j++) {\n        if (inic + 1 !== 0 || j !== 0) J.set(i, j, Math.pow(inic + i, j));\n      }\n    }\n    var Jtranspose = new MatrixTransposeView(J);\n    var Jinv = inverse(Jtranspose.mmul(J));\n    C = Jinv.mmul(Jtranspose);\n    C = C.getRow(options.derivative);\n    norm = 1;\n  }\n  var det = norm * Math.pow(h, options.derivative);\n  for (var k = step; k < data.length - step; k++) {\n    var d = 0;\n    for (var l = 0; l < C.length; l++) d += (C[l] * data[l + k - step]) / det;\n    ans[k - step] = d;\n  }\n\n  if (options.pad === 'post') {\n    ans = padArray(ans, { size: step, value: options.padValue });\n  }\n\n  return ans;\n}\n\nmodule.exports = SavitzkyGolay;\n","// auxiliary file to create the 256 look at table elements\n\nvar ans = new Array(256);\nfor (var i = 0; i < 256; i++) {\n    var num = i;\n    var c = 0;\n    while (num) {\n        num = num & (num - 1);\n        c++;\n    }\n    ans[i] = c;\n}\n\nmodule.exports = ans;","'use strict';\n\nvar eightBits = require('./creator');\n\n/**\n * Count the number of true values in an array\n * @param {Array} arr\n * @return {number}\n */\nfunction count(arr) {\n    var c = 0;\n    for (var i = 0; i < arr.length; i++) {\n        c += eightBits[arr[i] & 0xff] + eightBits[(arr[i] >> 8) & 0xff] + eightBits[(arr[i] >> 16) & 0xff] + eightBits[(arr[i] >> 24) & 0xff];\n    }\n    return c;\n}\n\n/**\n * Logical AND operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction and(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] & arr2[i];\n    return ans;\n}\n\n/**\n * Logical OR operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction or(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] | arr2[i];\n    return ans;\n}\n\n/**\n * Logical XOR operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction xor(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] ^ arr2[i];\n    return ans;\n}\n\n/**\n * Logical NOT operation\n * @param {Array} arr\n * @return {Array}\n */\nfunction not(arr) {\n    var ans = new Array(arr.length);\n    for (var i = 0; i < ans.length; i++)\n        ans[i] = ~arr[i];\n    return ans;\n}\n\n/**\n * Gets the n value of array arr\n * @param {Array} arr\n * @param {number} n\n * @return {boolean}\n */\nfunction getBit(arr, n) {\n    var index = n >> 5; // Same as Math.floor(n/32)\n    var mask = 1 << (31 - n % 32);\n    return Boolean(arr[index] & mask);\n}\n\n/**\n * Sets the n value of array arr to the value val\n * @param {Array} arr\n * @param {number} n\n * @param {boolean} val\n * @return {Array}\n */\nfunction setBit(arr, n, val) {\n    var index = n >> 5; // Same as Math.floor(n/32)\n    var mask = 1 << (31 - n % 32);\n    if (val)\n        arr[index] = mask | arr[index];\n    else\n        arr[index] = ~mask & arr[index];\n    return arr;\n}\n\n/**\n * Translates an array of numbers to a string of bits\n * @param {Array} arr\n * @returns {string}\n */\nfunction toBinaryString(arr) {\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        var obj = (arr[i] >>> 0).toString(2);\n        str += '00000000000000000000000000000000'.substr(obj.length) + obj;\n    }\n    return str;\n}\n\n/**\n * Creates an array of numbers based on a string of bits\n * @param {string} str\n * @returns {Array}\n */\nfunction parseBinaryString(str) {\n    var len = str.length / 32;\n    var ans = new Array(len);\n    for (var i = 0; i < len; i++) {\n        ans[i] = parseInt(str.substr(i*32, 32), 2) | 0;\n    }\n    return ans;\n}\n\n/**\n * Translates an array of numbers to a hex string\n * @param {Array} arr\n * @returns {string}\n */\nfunction toHexString(arr) {\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        var obj = (arr[i] >>> 0).toString(16);\n        str += '00000000'.substr(obj.length) + obj;\n    }\n    return str;\n}\n\n/**\n * Creates an array of numbers based on a hex string\n * @param {string} str\n * @returns {Array}\n */\nfunction parseHexString(str) {\n    var len = str.length / 8;\n    var ans = new Array(len);\n    for (var i = 0; i < len; i++) {\n        ans[i] = parseInt(str.substr(i*8, 8), 16) | 0;\n    }\n    return ans;\n}\n\n/**\n * Creates a human readable string of the array\n * @param {Array} arr\n * @returns {string}\n */\nfunction toDebug(arr) {\n    var binary = toBinaryString(arr);\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        str += '0000'.substr((i * 32).toString(16).length) + (i * 32).toString(16) + ':';\n        for (var j = 0; j < 32; j += 4) {\n            str += ' ' + binary.substr(i * 32 + j, 4);\n        }\n        if (i < arr.length - 1) str += '\\n';\n    }\n    return str\n}\n\nmodule.exports = {\n    count: count,\n    and: and,\n    or: or,\n    xor: xor,\n    not: not,\n    getBit: getBit,\n    setBit: setBit,\n    toBinaryString: toBinaryString,\n    parseBinaryString: parseBinaryString,\n    toHexString: toHexString,\n    parseHexString: parseHexString,\n    toDebug: toDebug\n};\n","import isArray from 'is-any-array';\n\n/**\n * Computes the mode of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction mode(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var maxValue = 0;\n  var maxCount = 0;\n  var count = 0;\n  var counts = {};\n\n  for (var i = 0; i < input.length; ++i) {\n    var element = input[i];\n    count = counts[element];\n\n    if (count) {\n      counts[element]++;\n      count++;\n    } else {\n      counts[element] = count = 1;\n    }\n\n    if (count > maxCount) {\n      maxCount = count;\n      maxValue = input[i];\n    }\n  }\n\n  return maxValue;\n}\n\nexport default mode;\n","/**\n * Computes the norm of the given values\n * @param {Array<number>} input\n * @param {object} [options={}]\n * @param {string} [algorithm='absolute']\n * @return {number}\n */\nfunction norm(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$algorithm = options.algorithm,\n      algorithm = _options$algorithm === void 0 ? 'absolute' : _options$algorithm;\n\n  if (!Array.isArray(input)) {\n    throw new Error('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new Error('input must not be empty');\n  }\n\n  switch (algorithm.toLowerCase()) {\n    case 'absolute':\n      var sum = absoluteSum(input);\n      if (sum === 0) return input.slice(0);\n      return input.map(function (element) {\n        return element / sum;\n      });\n\n    default:\n      throw new Error(\"norm: unknown algorithm: \".concat(algorithm));\n  }\n}\n\nfunction absoluteSum(input) {\n  var sum = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    sum += Math.abs(input[i]);\n  }\n\n  return sum;\n}\n\nexport default norm;\n","import isArray from 'is-any-array';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\n/**\n * Fill an array with sequential numbers\n * @param {Array<number>} [input] - optional destination array (if not provided a new array will be created)\n * @param {object} [options={}]\n * @param {number} [options.from=0] - first value in the array\n * @param {number} [options.to=10] - last value in the array\n * @param {number} [options.size=input.length] - size of the array (if not provided calculated from step)\n * @param {number} [options.step] - if not provided calculated from size\n * @return {Array<number>}\n */\n\nfunction sequentialFill() {\n  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (_typeof(input) === 'object' && !isArray(input)) {\n    options = input;\n    input = [];\n  }\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  var _options = options,\n      _options$from = _options.from,\n      from = _options$from === void 0 ? 0 : _options$from,\n      _options$to = _options.to,\n      to = _options$to === void 0 ? 10 : _options$to,\n      _options$size = _options.size,\n      size = _options$size === void 0 ? input.length : _options$size,\n      step = _options.step;\n\n  if (size && step) {\n    throw new Error('step is defined by the array size');\n  }\n\n  if (!size) {\n    if (step) {\n      size = Math.floor((to - from) / step) + 1;\n    } else {\n      size = to - from + 1;\n    }\n  }\n\n  if (!step && size) {\n    step = (to - from) / (size - 1);\n  }\n\n  if (Array.isArray(input)) {\n    input.length = 0; // only works with normal array\n\n    for (var i = 0; i < size; i++) {\n      input.push(from);\n      from += step;\n    }\n  } else {\n    if (input.length !== size) {\n      throw new Error('sequentialFill typed array must have the correct length');\n    }\n\n    for (var _i = 0; _i < size; _i++) {\n      input[_i] = from;\n      from += step;\n    }\n  }\n\n  return input;\n}\n\nexport default sequentialFill;\n","import arrayMean from 'ml-array-mean';\nimport isArray from 'is-any-array';\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {object} [options]\n * @param {boolean} [options.unbiased = true] - if true, divide by (n-1); if false, divide by n.\n * @param {number} [options.mean = arrayMean] - precalculated mean, if any.\n * @return {number}\n */\n\nfunction variance(values) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(values)) {\n    throw new TypeError('input must be an array');\n  }\n\n  var _options$unbiased = options.unbiased,\n      unbiased = _options$unbiased === void 0 ? true : _options$unbiased,\n      _options$mean = options.mean,\n      mean = _options$mean === void 0 ? arrayMean(values) : _options$mean;\n  var sqrError = 0;\n\n  for (var i = 0; i < values.length; i++) {\n    var x = values[i] - mean;\n    sqrError += x * x;\n  }\n\n  if (unbiased) {\n    return sqrError / (values.length - 1);\n  } else {\n    return sqrError / values.length;\n  }\n}\n\nexport default variance;\n","import variance from 'ml-array-variance';\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {object} [options]\n * @param {boolean} [options.unbiased = true] - if true, divide by (n-1); if false, divide by n.\n * @param {number} [options.mean = arrayMean] - precalculated mean, if any.\n * @return {number}\n */\n\nfunction standardDeviation(values) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Math.sqrt(variance(values, options));\n}\n\nexport default standardDeviation;\n","/**\n * Merge abscissa values if the ordinate value is in a list of centroids\n * @param {object} originalPoints\n * @param {Array<number>} originalPoints.x\n * @param {Array<number>} originalPoints.y\n * @param {Array<number>} centroids\n * @param {object} [options]\n * @param {number} [options.window = 0.01] - has to be a positive number\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function mergeByCentroids(\n  originalPoints,\n  centroids,\n  options = {}\n) {\n  const { window = 0.01 } = options;\n\n  var mergedPoints = {\n    x: centroids.slice(),\n    y: new Array(centroids.length).fill(0)\n  };\n\n  var originalIndex = 0;\n  var mergedIndex = 0;\n  while (\n    originalIndex < originalPoints.x.length &&\n    mergedIndex < centroids.length\n  ) {\n    var diff = originalPoints.x[originalIndex] - centroids[mergedIndex];\n    if (Math.abs(diff) < window) {\n      mergedPoints.y[mergedIndex] += originalPoints.y[originalIndex++];\n    } else if (diff < 0) {\n      originalIndex++;\n    } else {\n      mergedIndex++;\n    }\n  }\n\n  return mergedPoints;\n}\n","import binarySearch from 'binary-search';\nimport { ascending, descending } from 'num-sort';\n\n/**\n *\n * @param {object} points\n * @param {Array<number>} originalPoints.x\n * @param {Array<number>} originalPoints.y\n * @param {*} options\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function closestX(points, options) {\n  const { x, y } = points;\n  const { target = x[0], reverse = false } = options;\n\n  let index;\n  if (reverse) {\n    index = binarySearch(x, target, descending);\n  } else {\n    index = binarySearch(x, target, ascending);\n  }\n\n  if (index >= 0) {\n    return {\n      x: x[index],\n      y: y[index]\n    };\n  } else {\n    index = ~index;\n    if (\n      (index !== 0 && Math.abs(x[index] - target) > 0.5) ||\n      index === x.length\n    ) {\n      return {\n        x: x[index - 1],\n        y: y[index - 1]\n      };\n    } else {\n      return {\n        x: x[index],\n        y: y[index]\n      };\n    }\n  }\n}\n","/**\n * Merge abscissas values on similar ordinates and weight the group of abscissas\n * @param {object} points\n * @param {Array<number>} points.x - sorted abscissas values\n * @param {Array<number>} points.y - ordinates values\n * @param {object} [options]\n * @param {number} [options.groupWidth = 0.001] - window for abscissas to merge\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function maxMerge(points, options = {}) {\n  const { x, y } = points;\n  const { groupWidth = 0.001 } = options;\n\n  var merged = { x: [], y: [] };\n  var maxAbscissa = { x: [], y: [] };\n  var size = 0;\n  var index = 0;\n\n  while (index < x.length) {\n    if (size === 0 || x[index] - merged.x[size - 1] > groupWidth) {\n      maxAbscissa.x.push(x[index]);\n      maxAbscissa.y.push(y[index]);\n      merged.x.push(x[index]);\n      merged.y.push(y[index]);\n      index++;\n      size++;\n    } else {\n      if (y[index] > maxAbscissa.y[size - 1]) {\n        maxAbscissa.x[size - 1] = x[index];\n        maxAbscissa.y[size - 1] = y[index];\n      }\n      merged.x[size - 1] = x[index];\n      merged.y[size - 1] += y[index];\n      index++;\n    }\n  }\n\n  merged.x = maxAbscissa.x.slice();\n\n  return merged;\n}\n","import binarySearch from 'binary-search';\nimport { ascending, descending } from 'num-sort';\n\n/**\n * @param {object} points\n * @param {Array<number>} points.x - sorted abscissas values\n * @param {Array<number>} points.y - ordinates values\n * @param {object} [options]\n * @param {object} [options.from = {index: 0}]\n * @param {object} [options.to = {index: x.length-1}]\n * @param {boolean} [options.reverse = false]\n * @return {{index: number, value: number}}\n */\nexport default function maxY(points, options = {}) {\n  const { x, y } = points;\n  let {\n    from = { index: 0 },\n    to = { index: x.length },\n    reverse = false\n  } = options;\n\n  if (from.value !== undefined && from.index === undefined) {\n    from.index = calculateIndex(from.value, x, reverse);\n  }\n\n  if (to.value !== undefined && to.index === undefined) {\n    to.index = calculateIndex(to.value, x, reverse);\n  }\n\n  var currentMax = Number.MIN_VALUE;\n  var currentIndex;\n  for (var i = from.index; i < to.index; i++) {\n    if (currentMax < y[i]) {\n      currentMax = y[i];\n      currentIndex = i;\n    }\n  }\n\n  return {\n    index: currentIndex,\n    value: currentMax\n  };\n}\n\n/**\n * @param {number} value\n * @param {Array<number>} x\n * @param {boolean} reverse\n * @return {number} index of the value in the array\n */\nfunction calculateIndex(value, x, reverse) {\n  let index;\n  if (reverse) {\n    index = binarySearch(x, value, descending);\n  } else {\n    index = binarySearch(x, value, ascending);\n  }\n\n  if (index < 0) {\n    throw new Error(`the value ${value} doesn't belongs to the abscissa value`);\n  }\n\n  return index;\n}\n","export default function sortX(points, options = {}) {\n  const { x, y } = points;\n  const { reverse = false } = options;\n\n  var sortFunc;\n  if (!reverse) {\n    sortFunc = (a, b) => a.x - b.x;\n  } else {\n    sortFunc = (a, b) => b.x - a.x;\n  }\n\n  var grouped = x\n    .map((val, index) => ({\n      x: val,\n      y: y[index]\n    }))\n    .sort(sortFunc);\n\n  var response = { x: x.slice(), y: y.slice() };\n  for (var i = 0; i < x.length; i++) {\n    response.x[i] = grouped[i].x;\n    response.y[i] = grouped[i].y;\n  }\n\n  return response;\n}\n","\n/**\n * In place modification of the 2 arrays to make X unique and sum the Y if X has the same value\n * @param {object} [points={}] : Object of points contains property x (an array) and y (an array)\n * @return points\n */\n\nexport default function uniqueX(points = {}) {\n  const { x, y } = points;\n  if (x.length < 2) return;\n  if (x.length !== y.length) {\n    throw new Error('The X and Y arrays mush have the same length');\n  }\n\n  let current = x[0];\n  let counter = 0;\n\n  for (let i = 1; i < x.length; i++) {\n    if (current !== x[i]) {\n      counter++;\n      current = x[i];\n      x[counter] = x[i];\n      if (i !== counter) {\n        y[counter] = 0;\n      }\n    }\n    if (i !== counter) {\n      y[counter] += y[i];\n    }\n  }\n\n  x.length = counter + 1;\n  y.length = counter + 1;\n}\n","/**\n * Merge abscissas values on similar ordinates and weight the group of abscissas\n * @param {object} points\n * @param {Array<number>} points.x - sorted abscissas values\n * @param {Array<number>} points.y - ordinates values\n * @param {object} [options]\n * @param {number} [options.groupWidth = 0.001] - window for abscissas to merge\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function weightedMerge(points, options = {}) {\n  const { x, y } = points;\n  const { groupWidth = 0.001 } = options;\n\n  var merged = { x: [], y: [] };\n  var weightedAbscissa = { x: [], y: [] };\n  var size = 0;\n  var index = 0;\n\n  while (index < x.length) {\n    if (size === 0 || x[index] - merged.x[size - 1] > groupWidth) {\n      weightedAbscissa.x.push(x[index] * y[index]);\n      weightedAbscissa.y.push(y[index]);\n      merged.x.push(x[index]);\n      merged.y.push(y[index]);\n      index++;\n      size++;\n    } else {\n      weightedAbscissa.x[size - 1] += x[index] * y[index];\n      weightedAbscissa.y[size - 1] += y[index];\n      merged.x[size - 1] = x[index];\n      merged.y[size - 1] += y[index];\n      index++;\n    }\n  }\n\n  for (var i = 0; i < merged.x.length; i++) {\n    merged.x[i] = weightedAbscissa.x[i] / weightedAbscissa.y[i];\n  }\n\n  return merged;\n}\n","/**\n * Function that calculates the integral of the line between two\n * x-coordinates, given the slope and intercept of the line.\n * @param {number} x0\n * @param {number} x1\n * @param {number} slope\n * @param {number} intercept\n * @return {number} integral value.\n */\nexport default function integral(x0, x1, slope, intercept) {\n  return (\n    0.5 * slope * x1 * x1 +\n    intercept * x1 -\n    (0.5 * slope * x0 * x0 + intercept * x0)\n  );\n}\n","import integral from './integral';\n\n/**\n * function that retrieves the getEquallySpacedData with the variant \"smooth\"\n *\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} from - Initial point\n * @param {number} to - Final point\n * @param {number} numberOfPoints\n * @return {Array} - Array of y's equally spaced with the variant \"smooth\"\n */\nexport default function equallySpacedSmooth(x, y, from, to, numberOfPoints) {\n  var xLength = x.length;\n\n  var step = (to - from) / (numberOfPoints - 1);\n  var halfStep = step / 2;\n\n  var output = new Array(numberOfPoints);\n\n  var initialOriginalStep = x[1] - x[0];\n  var lastOriginalStep = x[xLength - 1] - x[xLength - 2];\n\n  // Init main variables\n  var min = from - halfStep;\n  var max = from + halfStep;\n\n  var previousX = Number.MIN_VALUE;\n  var previousY = 0;\n  var nextX = x[0] - initialOriginalStep;\n  var nextY = 0;\n\n  var currentValue = 0;\n  var slope = 0;\n  var intercept = 0;\n  var sumAtMin = 0;\n  var sumAtMax = 0;\n\n  var i = 0; // index of input\n  var j = 0; // index of output\n\n  function getSlope(x0, y0, x1, y1) {\n    return (y1 - y0) / (x1 - x0);\n  }\n\n  main: while (true) {\n    if (previousX <= min && min <= nextX) {\n      add = integral(0, min - previousX, slope, previousY);\n      sumAtMin = currentValue + add;\n    }\n\n    while (nextX - max >= 0) {\n      // no overlap with original point, just consume current value\n      var add = integral(0, max - previousX, slope, previousY);\n      sumAtMax = currentValue + add;\n\n      output[j++] = (sumAtMax - sumAtMin) / step;\n\n      if (j === numberOfPoints) {\n        break main;\n      }\n\n      min = max;\n      max += step;\n      sumAtMin = sumAtMax;\n    }\n\n    currentValue += integral(previousX, nextX, slope, intercept);\n\n    previousX = nextX;\n    previousY = nextY;\n\n    if (i < xLength) {\n      nextX = x[i];\n      nextY = y[i];\n      i++;\n    } else if (i === xLength) {\n      nextX += lastOriginalStep;\n      nextY = 0;\n    }\n\n    slope = getSlope(previousX, previousY, nextX, nextY);\n    intercept = -slope * previousX + previousY;\n  }\n\n  return output;\n}\n","/**\n * function that retrieves the getEquallySpacedData with the variant \"slot\"\n *\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} from - Initial point\n * @param {number} to - Final point\n * @param {number} numberOfPoints\n * @return {Array} - Array of y's equally spaced with the variant \"slot\"\n */\nexport default function equallySpacedSlot(x, y, from, to, numberOfPoints) {\n  var xLength = x.length;\n\n  var step = (to - from) / (numberOfPoints - 1);\n  var halfStep = step / 2;\n  var lastStep = x[x.length - 1] - x[x.length - 2];\n\n  var start = from - halfStep;\n  var output = new Array(numberOfPoints);\n\n  // Init main variables\n  var min = start;\n  var max = start + step;\n\n  var previousX = -Number.MAX_VALUE;\n  var previousY = 0;\n  var nextX = x[0];\n  var nextY = y[0];\n  var frontOutsideSpectra = 0;\n  var backOutsideSpectra = true;\n\n  var currentValue = 0;\n\n  // for slot algorithm\n  var currentPoints = 0;\n\n  var i = 1; // index of input\n  var j = 0; // index of output\n\n  main: while (true) {\n    if (previousX >= nextX) throw new Error('x must be an increasing serie');\n    while (previousX - max > 0) {\n      // no overlap with original point, just consume current value\n      if (backOutsideSpectra) {\n        currentPoints++;\n        backOutsideSpectra = false;\n      }\n\n      output[j] = currentPoints <= 0 ? 0 : currentValue / currentPoints;\n      j++;\n\n      if (j === numberOfPoints) {\n        break main;\n      }\n\n      min = max;\n      max += step;\n      currentValue = 0;\n      currentPoints = 0;\n    }\n\n    if (previousX > min) {\n      currentValue += previousY;\n      currentPoints++;\n    }\n\n    if (previousX === -Number.MAX_VALUE || frontOutsideSpectra > 1) {\n      currentPoints--;\n    }\n\n    previousX = nextX;\n    previousY = nextY;\n\n    if (i < xLength) {\n      nextX = x[i];\n      nextY = y[i];\n      i++;\n    } else {\n      nextX += lastStep;\n      nextY = 0;\n      frontOutsideSpectra++;\n    }\n  }\n\n  return output;\n}\n","export default function getZones(from, to, numberOfPoints, exclusions = []) {\n  if (from > to) {\n    [from, to] = [to, from];\n  }\n\n  // in exclusions from and to have to be defined\n  exclusions = exclusions.filter(\n    (exclusion) => exclusion.from !== undefined && exclusion.to !== undefined\n  );\n\n  exclusions = JSON.parse(JSON.stringify(exclusions));\n  // we ensure that from before to\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from > exclusion.to) {\n      [exclusion.to, exclusion.from] = [exclusion.from, exclusion.to];\n    }\n  });\n\n  exclusions.sort((a, b) => a.from - b.from);\n\n  // we will rework the exclusions in order to remove overlap and outside range (from / to)\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from < from) exclusion.from = from;\n    if (exclusion.to > to) exclusion.to = to;\n  });\n  for (let i = 0; i < exclusions.length - 1; i++) {\n    if (exclusions[i].to > exclusions[i + 1].from) {\n      exclusions[i].to = exclusions[i + 1].from;\n    }\n  }\n  exclusions = exclusions.filter((exclusion) => exclusion.from < exclusion.to);\n\n  if (!exclusions || exclusions.length === 0) {\n    return [{ from, to, numberOfPoints }];\n  }\n\n  // need to deal with overlapping exclusions and out of bound exclusions\n\n  let toRemove = exclusions.reduce(\n    (previous, exclusion) => (previous += exclusion.to - exclusion.from),\n    0\n  );\n  let total = to - from;\n  let unitsPerPoint = (total - toRemove) / numberOfPoints;\n  let zones = [];\n  let currentFrom = from;\n  let totalPoints = 0;\n  for (let exclusion of exclusions) {\n    let currentNbPoints = Math.round(\n      (exclusion.from - currentFrom) / unitsPerPoint\n    );\n    totalPoints += currentNbPoints;\n    if (currentNbPoints > 0) {\n      zones.push({\n        from: currentFrom,\n        to: exclusion.from,\n        numberOfPoints: currentNbPoints\n      });\n    }\n\n    currentFrom = exclusion.to;\n  }\n  if (numberOfPoints - totalPoints > 0) {\n    zones.push({\n      from: currentFrom,\n      to: to,\n      numberOfPoints: numberOfPoints - totalPoints\n    });\n  }\n\n  return zones;\n}\n","import sequentialFill from 'ml-array-sequential-fill';\n\nimport equallySpacedSmooth from './equallySpacedSmooth';\nimport equallySpacedSlot from './equallySpacedSlot';\nimport getZones from './getZones';\n\n/**\n * Function that returns a Number array of equally spaced numberOfPoints\n * containing a representation of intensities of the spectra arguments x\n * and y.\n *\n * The options parameter contains an object in the following form:\n * from: starting point\n * to: last point\n * numberOfPoints: number of points between from and to\n * variant: \"slot\" or \"smooth\" - smooth is the default option\n *\n * The slot variant consist that each point in the new array is calculated\n * averaging the existing points between the slot that belongs to the current\n * value. The smooth variant is the same but takes the integral of the range\n * of the slot and divide by the step size between two points in the new array.\n *\n * @param {object} [arrayXY={}] - object containing 2 properties x and y (both an array)\n * @param {object} [options={}]\n * @param {number} [options.from=x[0]]\n * @param {number} [options.to=x[x.length-1]]\n * @param {string} [options.variant='smooth']\n * @param {number} [options.numberOfPoints=100]\n * @param {Array} [options.exclusions=[]] array of from / to that should be skipped for the generation of the points\n * @return {object<x: Array, y:Array>} new object with x / y array with the equally spaced data.\n */\n\nexport default function equallySpaced(arrayXY = {}, options = {}) {\n  let { x, y } = arrayXY;\n  let xLength = x.length;\n  let reverse = false;\n  if (x.length > 1 && x[0] > x[1]) {\n    x = x.slice().reverse();\n    y = y.slice().reverse();\n    reverse = true;\n  }\n\n  let {\n    from = x[0],\n    to = x[xLength - 1],\n    variant = 'smooth',\n    numberOfPoints = 100,\n    exclusions = []\n  } = options;\n\n  if (xLength !== y.length) {\n    throw new RangeError(\"the x and y vector doesn't have the same size.\");\n  }\n\n  if (typeof from !== 'number' || isNaN(from)) {\n    throw new RangeError(\"'from' option must be a number\");\n  }\n\n  if (typeof to !== 'number' || isNaN(to)) {\n    throw new RangeError(\"'to' option must be a number\");\n  }\n\n  if (typeof numberOfPoints !== 'number' || isNaN(numberOfPoints)) {\n    throw new RangeError(\"'numberOfPoints' option must be a number\");\n  }\n\n  let zones = getZones(from, to, numberOfPoints, exclusions);\n\n  let xResult = [];\n  let yResult = [];\n  for (let zone of zones) {\n    let zoneResult = processZone(\n      x,\n      y,\n      zone.from,\n      zone.to,\n      zone.numberOfPoints,\n      variant,\n      reverse\n    );\n    xResult.push(...zoneResult.x);\n    yResult.push(...zoneResult.y);\n  }\n\n  if (reverse) {\n    if (from < to) {\n      return { x: xResult.reverse(), y: yResult.reverse() };\n    } else {\n      return { x: xResult, y: yResult };\n    }\n  } else {\n    if (from < to) {\n      return { x: xResult, y: yResult };\n    } else {\n      return { x: xResult.reverse(), y: yResult.reverse() };\n    }\n  }\n}\n\nfunction processZone(x, y, from, to, numberOfPoints, variant) {\n  if (numberOfPoints < 1) {\n    throw new RangeError('the number of points must be at least 1');\n  }\n\n  var output =\n    variant === 'slot'\n      ? equallySpacedSlot(x, y, from, to, numberOfPoints)\n      : equallySpacedSmooth(x, y, from, to, numberOfPoints);\n\n  return {\n    x: sequentialFill({\n      from,\n      to,\n      size: numberOfPoints\n    }),\n    y: output\n  };\n}\n","export default function getZones(from, to, exclusions = []) {\n  if (from > to) {\n    [from, to] = [to, from];\n  }\n\n  // in exclusions from and to have to be defined\n  exclusions = exclusions.filter(\n    (exclusion) => exclusion.from !== undefined && exclusion.to !== undefined\n  );\n\n  exclusions = JSON.parse(JSON.stringify(exclusions));\n  // we ensure that from before to\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from > exclusion.to) {\n      [exclusion.to, exclusion.from] = [exclusion.from, exclusion.to];\n    }\n  });\n\n  exclusions.sort((a, b) => a.from - b.from);\n\n  // we will rework the exclusions in order to remove overlap and outside range (from / to)\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from < from) exclusion.from = from;\n    if (exclusion.to > to) exclusion.to = to;\n  });\n  for (let i = 0; i < exclusions.length - 1; i++) {\n    if (exclusions[i].to > exclusions[i + 1].from) {\n      exclusions[i].to = exclusions[i + 1].from;\n    }\n  }\n  exclusions = exclusions.filter((exclusion) => exclusion.from < exclusion.to);\n\n  if (!exclusions || exclusions.length === 0) {\n    return [{ from, to }];\n  }\n\n  let zones = [];\n  let currentFrom = from;\n  for (let exclusion of exclusions) {\n    if (currentFrom < exclusion.from) {\n      zones.push({\n        from: currentFrom,\n        to: exclusion.from\n      });\n    }\n\n    currentFrom = exclusion.to;\n  }\n  if (currentFrom < to) {\n    zones.push({\n      from: currentFrom,\n      to: to\n    });\n  }\n\n  return zones;\n}\n","import getZones from './getZones';\n\n/**\n * Filter an array x/y based on various criteria\n * x points are expected to be sorted\n *\n * @param {object} points\n * @param {object} [options={}]\n * @param {array} [options.from]\n * @param {array} [options.to]\n * @param {array} [options.exclusions=[]]\n * @return {{x: Array<number>, y: Array<number>}}\n */\n\nexport default function filterX(points, options = {}) {\n  const { x, y } = points;\n  const { from = x[0], to = x[x.length - 1], exclusions = [] } = options;\n\n  let zones = getZones(from, to, exclusions);\n\n\n  let currentZoneIndex = 0;\n  let newX = [];\n  let newY = [];\n  let position = 0;\n  while (position < x.length) {\n    if (\n      x[position] <= zones[currentZoneIndex].to &&\n      x[position] >= zones[currentZoneIndex].from\n    ) {\n      newX.push(x[position]);\n      newY.push(y[position]);\n    } else {\n      if (x[position] > zones[currentZoneIndex].to) {\n        currentZoneIndex++;\n        if (!zones[currentZoneIndex]) break;\n      }\n    }\n    position++;\n  }\n\n  return {\n    x: newX,\n    y: newY\n  };\n}\n","import { DecisionTreeClassifier, DecisionTreeRegression } from 'ml-cart';\nimport {\n  RandomForestClassifier,\n  RandomForestRegression\n} from 'ml-random-forest';\n\n// Try to keep this list in the same structure as the README.\n\n// Unsupervised learning\nexport { PCA } from 'ml-pca';\nimport * as HClust from 'ml-hclust';\nexport { HClust };\nexport { default as KMeans } from 'ml-kmeans';\n\n// Supervised learning\nimport * as NaiveBayes from 'ml-naivebayes';\nexport { NaiveBayes };\nexport { default as KNN } from 'ml-knn';\nexport { PLS, KOPLS } from 'ml-pls';\nexport { default as CrossValidation } from 'ml-cross-validation';\nexport { default as ConfusionMatrix } from 'ml-confusion-matrix';\nexport { DecisionTreeClassifier };\nexport { RandomForestClassifier };\n\n// Artificial neural networks\nexport { default as FNN } from 'ml-fnn';\nexport { default as SOM } from 'ml-som';\n\n// Regression\nexport {\n  SimpleLinearRegression,\n  PolynomialRegression,\n  MultivariateLinearRegression,\n  PowerRegression,\n  ExponentialRegression,\n  TheilSenRegression,\n  RobustPolynomialRegression\n} from 'ml-regression';\nexport { DecisionTreeRegression };\nexport { RandomForestRegression };\n\n// Optimization\nexport { default as levenbergMarquardt } from 'ml-levenberg-marquardt';\nimport * as FCNNLS from 'ml-fcnnls';\nexport { FCNNLS };\n\n// Math\nimport * as MatrixLib from 'ml-matrix';\nconst {\n  Matrix,\n  SVD,\n  EVD,\n  CholeskyDecomposition,\n  LuDecomposition,\n  QrDecomposition\n} = MatrixLib;\nexport {\n  MatrixLib,\n  Matrix,\n  SVD,\n  EVD,\n  CholeskyDecomposition,\n  LuDecomposition,\n  QrDecomposition\n};\n\nexport { SparseMatrix } from 'ml-sparse-matrix';\nexport { default as Kernel } from 'ml-kernel';\nimport { distance, similarity } from 'ml-distance';\nexport { distance as Distance, similarity as Similarity };\nexport { default as distanceMatrix } from 'ml-distance-matrix';\nexport { default as XSadd } from 'ml-xsadd';\n\n// Statistics\nexport { default as Performance } from 'ml-performance';\n\n// Data preprocessing\nexport { default as savitzkyGolay } from 'ml-savitzky-golay';\n\n// Utility\nexport { default as BitArray } from 'ml-bit-array';\nexport { default as HashTable } from 'ml-hash-table';\nexport { default as padArray } from 'ml-pad-array';\nexport { default as binarySearch } from 'binary-search';\nimport * as numSort from 'num-sort';\nexport { numSort };\nexport { default as Random } from 'ml-random';\n\nimport min from 'ml-array-min';\nimport max from 'ml-array-max';\nimport median from 'ml-array-median';\nimport mean from 'ml-array-mean';\nimport mode from 'ml-array-mode';\nimport normed from 'ml-array-normed';\nimport rescale from 'ml-array-rescale';\nimport sequentialFill from 'ml-array-sequential-fill';\nimport standardDeviation from 'ml-array-standard-deviation';\nimport variance from 'ml-array-variance';\nexport const Array = {\n  min,\n  max,\n  median,\n  mean,\n  mode,\n  normed,\n  rescale,\n  sequentialFill,\n  standardDeviation,\n  variance\n};\n\nimport centroidsMerge from 'ml-array-xy-centroids-merge';\nimport closestX from 'ml-arrayxy-closestx';\nimport maxMerge from 'ml-array-xy-max-merge';\nimport maxY from 'ml-array-xy-max-y';\nimport sortX from 'ml-array-xy-sort-x';\nimport uniqueX from 'ml-arrayxy-uniquex';\nimport weightedMerge from 'ml-array-xy-weighted-merge';\nimport equallySpaced from 'ml-array-xy-equally-spaced';\nimport filterX from 'ml-array-xy-filter-x';\nexport const ArrayXY = {\n  centroidsMerge,\n  closestX,\n  maxMerge,\n  maxY,\n  sortX,\n  uniqueX,\n  weightedMerge,\n  equallySpaced,\n  filterX\n};\n"],"names":["toString","Object","prototype","isAnyArray","object","call","endsWith","max","input","isArray","TypeError","length","i","min","rescale","output","options","arguments","undefined","Array","currentMin","currentMax","RangeError","_options$min","minValue","autoMinMax","_options$max","maxValue","factor","checkRowIndex","matrix","index","outer","rows","checkColumnIndex","columns","checkRowVector","vector","to1DArray","checkColumnVector","checkIndices","rowIndices","columnIndices","row","checkRowIndices","column","checkColumnIndices","some","r","from","c","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","value","array","push","name","sumByRow","sum","j","get","sumByColumn","sumAll","v","productByRow","productByColumn","productAll","varianceByRow","unbiased","mean","cols","variance","sum1","sum2","x","varianceByColumn","varianceAll","size","centerByRow","set","centerByColumn","centerAll","getScaleByRow","scale","Math","pow","sqrt","scaleByRow","getScaleByColumn","scaleByColumn","getScaleAll","divider","scaleAll","inspectMatrix","indent","repeat","indentData","this","constructor","inspectData","maxRows","maxColumns","maxNumSize","maxI","maxJ","result","line","formatNumber","join","num","numStr","String","padEnd","precise","toPrecision","exponential","toExponential","eIndex","indexOf","e","substring","installMathOperations","AbstractMatrix","Matrix","add","addS","addM","checkMatrix","sub","subS","subM","subtract","subtractS","subtractM","mul","mulS","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","abs","acos","acosh","asin","asinh","atan","atanh","cbrt","ceil","clz32","cos","cosh","exp","expm1","floor","fround","log","log1p","log10","log2","round","sign","sin","sinh","tan","tanh","trunc","arg0","powS","powM","newRows","newColumns","newData","newMatrix","fill","random","Number","isInteger","interval","zeros","data","l","matrix1","matrix2","isMatrix","klass","apply","callback","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","isEchelonForm","previousColumn","checked","isReducedEchelonForm","k","echelonForm","clone","h","iMax","swapRows","tmp","reducedEchelonForm","m","n","maxRow","p","pivot","Error","setSubMatrix","neg","getRow","getRowVector","rowVector","setRow","row1","row2","temp","getColumn","getColumnVector","columnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","maxIndex","idx","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","diag","norm","type","cumulativeSum","dot","vector2","vector1","mmul","other","Bcolj","Float64Array","s","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","mmulStrassen","y","r1","c1","r2","c2","embed","mat","resultat","console","warn","blockMult","a","b","halfRows","parseInt","halfCols","subMatrix","scaleRows","isFinite","scaleColumns","flipRows","middle","first","last","flipColumns","kroneckerProduct","q","transpose","sortRows","compareFunction","compareNumbers","sort","sortColumns","subMatrixRow","indices","subMatrixColumn","selection","rowIndex","columnIndex","trace","by","product","standardDeviation","center","Symbol","for","rand","randomInt","randInt","diagonal","identity","eye","negate","tensorProduct","nRows","nColumns","arrayData","removeRow","splice","addRow","removeColumn","newRow","addColumn","BaseView","MatrixColumnView","MatrixColumnSelectionView","MatrixFlipColumnView","MatrixFlipRowView","MatrixRowView","MatrixRowSelectionView","MatrixSelectionView","MatrixSubView","MatrixTransposeView","WrapperMatrix1D","_calculateIndex","WrapperMatrix2D","wrap","LuDecomposition","t","LUcolj","kmax","lu","pivotVector","pivotSign","LU","isSingular","col","solve","count","X","determinant","hypotenuse","QrDecomposition","qr","rdiag","nrm","QR","Rdiag","isFullRank","SingularValueDecomposition","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","Boolean","wantv","swapped","aux","nu","ni","U","V","work","si","nct","nrt","mrc","pp","eps","EPSILON","kase","alpha","MIN_VALUE","isNaN","ks","f","cs","sn","sp","spm1","epm1","sk","ek","shift","g","Y","threshold","scols","Ls","rightSingularVectors","VL","vrows","urows","VLU","solveForDiagonal","inverse","vcols","ucols","tol","ii","useSVD","leftHandSide","rightHandSide","d","subMatrix0","subMatrix1","subMatrix2","xrange","exception","range","dependenciesOneRow","error","thresholdValue","returnArray","linearDependencies","thresholdError","results","Abis","pseudoInverse","svdSolution","SVD","leftSingularVectors","covariance","xMatrix","yMatrix","yIsSame","cov","correlation","sdx","sdy","corr","EigenvalueDecomposition","assumeSymmetric","tred2","tql2","H","ort","orthes","hqr2","hh","dl1","c3","el1","s2","tst1","high","low","nn","w","ra","sa","vr","vi","notlast","cdivres","exshift","z","iter","cdiv","xr","xi","yr","yi","CholeskyDecomposition","dimension","positiveDefinite","L","isPositiveDefinite","B","nipals","scaleScores","maxIterations","terminationCriteria","u","tOld","diff","counter","xResidual","residual","yResidual","betas","toDiscreteDistribution","numberOfClasses","counts","giniImpurity","probabilities","getNumberOfClasses","filter","val","arr","giniGain","splitted","splitsImpurity","splits","currentSplit","squaredError","meanArray","currentElement","regressionError","matrixSplitter","lesserX","greaterX","lesserY","greaterY","zip","ret","gainFunctions","gini","Utils","regression","splitFunctions","TreeNode","kind","gainFunction","splitFunction","minNumSamples","maxDepth","bestSplit","XTranspose","bestGain","Infinity","check","currentFeature","splitValues","featureSplit","currentSplitVal","split","gain","maxGain","splitValue","lesser","greater","calculatePrediction","distribution","train","currentDepth","parentGain","splitColumn","splittedMatrix","left","right","classify","setNodeParameters","node","defaultOptions","DecisionTreeClassifier","model","root","Tree","assign","trainingSet","trainingLabels","predict","toPredict","predictions","DecisionTreeRegression","trainingValues","SMALLEST_UNSAFE_INTEGER","LARGEST_SAFE_INTEGER","UINT32_MAX","UINT32_SIZE","INT32_SIZE","INT32_MAX","UINT21_SIZE","UINT21_MAX","checkFloat","examplesBaggingWithReplacement","trainingValue","seed","engine","Random","autoSeed","Xr","featureBagging","replacement","toRet","usedIndex","Set","has","RandomForestBase","maxFeatures","nEstimators","treeOptions","isClassifier","indexes","useSampleBagging","Estimator","DTClassifier","DTRegression","estimators","map","est","load","res","values","predictionValues","RandomForestClassifier","baseModel","mode","super","pop","_ref","module","exports","window","median","quickSelectMedian","slice","selectionMethods","arrayMean","arrayMedian","selectionMethod","RandomForestRegression","PCA","dataset","means","stdevs","S","R","excludedFeatures","isCovarianceMatrix","method","nCompNIPALS","ignoreZeroVariance","_computeFromCovarianceMatrix","_adjust","covarianceMatrix","_computeWithNIPALS","svd","singularValues","eigenvalues","singularValue","nComponents","invert","getExplainedVariance","getCumulativeVariance","explained","getEigenvectors","getEigenvalues","getStandardDeviations","getLoadings","evd","EVD","eigenvectorMatrix","realEigenvalues","reverse","dc","NIPALS","squaredEuclidean","euclidean","distanceMatrix","distanceFn","getMatrix","Heap","defaultCmp","heapify","heappop","heappush","heappushpop","heapreplace","insort","nlargest","nsmallest","updateItem","_siftdown","_siftup","lo","hi","cmp","mid","concat","item","lastelt","returnitem","_i","_j","_ref1","_results","_results1","_len","pos","elem","los","startpos","newitem","parent","parentpos","childpos","endpos","rightpos","nodes","replace","pushpop","peek","contains","clear","empty","heap","toArray","insert","top","front","require$$0","Cluster","children","height","isLeaf","cut","list","ans","group","groups","forEach","child","traverse","cb","visit","cluster","singleLink","dKI","dKJ","completeLink","averageLink","dIJ","nj","weightedAverageLink","centroidLink","medianLink","wardLink","nk","wardLink2","ai","aj","agnes","distanceFunction","isDistanceMatrix","updateFunc","getDistanceMatrix","numLeaves","toLowerCase","clusters","distance","getSmallestDistance","cluster1","cluster2","newCluster","newClusters","newDistanceMatrix","previous","newIndex","getPreviousIndex","prevI","prevICluster","smallest","smallestI","smallestJ","prev1","prev2","nearestVector","listVectors","similarityFunction","vectorIndex","maxSim","sim","minDist","MAX_VALUE","dist","calculateDistanceMatrix","updateClusterID","centers","clusterID","updateCenters","prevCenters","K","nDim","centersLen","dim","id","hasConverged","oldCenters","tolerance","LOOP","FLOAT_MUL","sh1","sh2","sh3","multiply_uint32","nlo","XSadd","Date","now","state","Uint32Array","init","getFloat","bind","getUint32","nextState","periodCertification","PROB_TOLERANCE","randomChoice","valuesArr","cumSum","getArray","randomIndex","seedOrRandom","xsadd","XSAdd","randomGenerator","choice","randomSample","mostDistant","maxDist","minDistCent","kmeanspp","nSamples","localTrials","firstCenterIdx","closestDistSquared","cumSumClosestDistSquared","candidateIdx","distanceToCandidates","euclideanDistances","bestCandidate","bestPot","bestDistSquared","newDistSquared","newPot","A","distanceSymbol","KMeansResult","centroids","converged","iterations","nearest","centroid","computeInformation","enrichedCentroids","withIterations","initialization","step","newCenters","kmeansGenerator","stepResult","stepNumber","kmeans","separateClasses","features","classes","totalPerClasses","separatedClasses","currentIndex","GaussianNB","reload","calculateProbabilities","C1","PI","std","logPriorProbability","currentStd","getCurrentClass","modelName","currentCase","maxProbability","predictedClass","currentProbability","calculateLogProbability","C2","MultinomialNB","conditionalProbability","priorProbability","separateClass","classValues","divisor","matrixLog","Node","obj","KDTree","points","metric","dimensions","buildTree","restoreParent","toJSONImpl","point","maxNodes","maxDistance","bestNodes","BinaryHeap","nearestSearch","ownDistance","linearPoint","bestChild","linearDistance","otherChild","saveNode","content","src","dest","depth","scoreFunction","element","bubbleUp","end","sinkDown","parentN","elemScore","child2N","child1N","swap","child1","child1Score","child2","KNN","labels","kdTree","isEuclidean","euclideanDistance","getSinglePrediction","knn","nearestPoints","pointsPerClass","maxPoints","lastElement","currentClass","currentPoints","pow2array","initializeMatrices","PLS","meanX","stdDevX","meanY","stdDevY","PBQ","R2X","scaleMethod","latentVectors","rx","cx","ry","cy","ssqXcal","sumOfSquaresY","T","P","Q","W","transposeX","transposeY","tIndex","maxSumColIndex","uIndex","t1","den","pnorm","ssqYcal","E","F","KOPLS","YLoadingMat","SigmaPow","YScoreMat","predScoreMat","YOrthLoadingVec","YOrthEigen","YOrthScoreMat","toNorm","TURegressionCoeff","kernelX","kernel","orthogonalComp","predictiveComp","predictiveComponents","orthogonalComponents","compute","Identity","Sigma","diagonalMatrix","YOrthScoreNorm","TpiPrime","CoTemp","SoTemp","toiPrime","ITo","lastScoreMat","lastTpPrime","KTestTrain","YOrthScoreVector","scoreMatPrime","p1","p2","p3","prediction","predYOrthVectors","ConfusionMatrix","actual","predicted","distinctLabels","actualIdx","predictedIdx","getLabels","getTotalCount","getTrueCount","getFalseCount","getTruePositiveCount","label","getIndex","getTrueNegativeCount","getFalsePositiveCount","getFalseNegativeCount","getPositiveCount","getNegativeCount","getTruePositiveRate","getTrueNegativeRate","getPositivePredictiveValue","TP","getNegativePredictiveValue","TN","getFalseNegativeRate","getFalsePositiveRate","getFalseDiscoveryRate","FP","getFalseOmissionRate","FN","getF1Score","getMatthewsCorrelationCoefficient","getInformedness","getMarkedness","getConfusionTable","getAccuracy","correct","incorrect","getCount","actualIndex","predictedIndex","M","N","twiddle","CV","initMatrix","getDistinct","validate","Classifier","classifierOptions","testIdx","trainIdx","confusionMatrix","distinct","testFeatures","trainFeatures","testLabels","trainLabels","getTrainTest","classifier","updateConfusionMatrix","validateWithCallback","predictedLabels","leaveOneOut","leavePOut","gen","combinations","allIdx","kFold","current","folds","randi","logistic","expELU","param","softExponential","softExponentialPrime","ACTIVATION_FUNCTIONS","activation","derivate","arctan","softsign","relu","softplus","bent","sinusoid","sinc","gaussian","Layer","inputSize","outputSize","regularization","epsilon","activationParam","selectedFunction","params","actFunction","derFunction","activationFunction","mlMatrix","forward","backpropagation","delta","dW","db","aCopy","update","OutputLayer","FeedForwardNeuralNetworks","hiddenLayers","learningRate","dicts","layers","keys","buildNetwork","dictOutputs","inputs","propagate","outputs","NodeSquare","weights","som","neighbors","adjustWeights","target","influence","getDistance","otherNode","getDistanceTorus","distX","distY","gridDim","getNeighbors","xy","torus","getPos","bestNeighbor","direction","simA","simB","getPosition","NodeHexagonal","hX","distZ","fields","randomizer","squareEuclidean","gridType","SOM","hasOwnProperty","numWeights","converters","getConverters","extractor","creator","nodeType","hx","distanceMethod","getMaxDistance","times","findBMU","adjust","iterationCount","startLearningRate","mapRadius","algorithmMethod","_initNodes","done","normalizers","denormalizers","getNormalizer","getDenormalizer","minMax","getRandomValue","zero","one","loadModel","eval","export","includeDistance","initNodes","setTraining","convertedSet","numIterations","timeConstant","trainOne","neighbourhoodRadius","trainingSetFactor","bmu","_findBestMatchingUnit","now2","radiusLimit","xMin","xMax","yMin","yMax","theX","theY","getConvertedNodes","candidate","lowest","computePosition","self","_predict","getQuantizationError","fit","getFit","maybeToPrecision","digits","checkArraySize","BaseRegression","toLaTeX","score","y2","xSum","ySum","chi2","rmsd","xSquared","ySquared","xY","PolynomialRegression","degree","powers","coefficients","checkArrayLength","regress","precision","_toFormula","isLaTeX","sup","closeSup","fn","str","charAt","json","pr","FT","SimpleLinearRegression","slope","intercept","computeX","xFactor","absIntercept","operator","slr","numerator","ExponentialRegression","er","yl","linear","PowerRegression","newInputs","latex","xl","MultivariateLinearRegression","statistics","xt","xx","invxx","beta","fittedValues","ri","reduce","stdError","stdErrorMatrix","stdErrors","tStats","summary","regressionStatistics","standardError","observations","variables","tStat","sigma","GaussianKernel","constant","PolynomialKernel","SigmoidKernel","ANOVAKernel","len","CauchyKernel","ExponentialKernel","HistogramIntersectionKernel","LaplacianKernel","MultiquadraticKernel","RationalQuadraticKernel","kernelType","rbf","polynomial","poly","anova","cauchy","histogram","HistogramKernel","laplacian","multiquadratic","rational","RationalKernel","sigmoid","mlp","Kernel","KernelConstructor","kernelFunction","landmarks","kernelMatrix","TheilSenRegression","theilSen","slopes","medianSlope","cuts","RobustPolynomialRegression","robustPolynomial","_","tuples","getRandomTuples","calcCoefficients","residuals","residualsMedian","tuple","half","errorCalculation","parameters","parameterizedFunction","func","gradientFunction","evaluatedData","gradientDifference","paramFunction","auxParams","funcParam","matrixFunction","damping","gradientFunc","matrixFunc","inverseMatrix","levenbergMarquardt","errorTolerance","minValues","maxValues","initialValues","parLen","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","iteration","parameterValues","parameterError","sortCollectionSet","collection","key","objectCollection","BigInt","sorted","cssls","XtX","XtY","Pset","choXtX","luXtX","sortedPset","sortedEset","cols2Solve","vars","initialisation","Fset","D","setDifference","C","includes","optimality","maxIter","Jset","fullSet","notPset","fcnnls","infeasIndex","Hset","ones","hRowColIdx","negRowColIdx","alphaMin","minIdx","idx2zero","findIndex","newParam","fcnnlsVector","haystack","needle","comparator","assertNumber","number","largestPrime","primeNumbers","nextPrime","binarySearch","ascending","FREE","FULL","REMOVED","defaultInitialCapacity","defaultMinLoadFactor","defaultMaxLoadFactor","HashTable","table","minLoadFactor","maxLoadFactor","freeEntries","lowWaterMark","highWaterMark","initialCapacity","capacity","chooseHighWaterMark","indexOfKey","indexOfInsertion","newCapacity","chooseGrowCapacity","rehash","remove","noRehash","maybeShrinkCapacity","delete","chooseShrinkCapacity","containsKey","hash","decrement","containsValue","indexOfValue","ensureCapacity","minCapacity","oldCapacity","oldTable","oldValues","oldState","newTable","newValues","newState","chooseLowWaterMark","forEachKey","forEachValue","forEachPair","minLoad","maxLoad","SparseMatrix","_init","elements","symmetric","forEachNonZero","bandWidth","isBanded","width","v1","v2","cardinality","getNonZeros","setThreshold","newThreshold","trans","inplaceOperator","inplaceOperatorScalar","inplaceOperatorMatrix","staticOperator","inplaceMethod","staticMethod","operators","fillTemplateFunction","op","methods","mathMethod","template","RegExp","additiveSymmetric","avg","bhattacharyya","canberra","chebyshev","clark","czekanowskiSimilarity","up","down","czekanowskiDistance","dice","q1","q2","divergence","fidelity","gower","harmonicMean","hellinger","innerProduct","intersection","jaccard","jeffreys","jensenDifference","jensenShannon","kdivergence","kulczynski","kullbackLeibler","kumarHassebrook","kumarJohnson","lorentzian","manhattan","matusita","minkowski","motyka","neyman","pearson","probabilisticSymmetric","ruzicka","soergel","sorensen","squared","squaredChord","taneja","tanimoto","bitvector","inter","union","tanimotoS","topsoe","waveHedges","createTree","spectrum","minWindow","to","mainCreateTree","start","getSimilarity","gamma","treeSimilarity","getFunction","cosine","diceD","intersectionD","jaccardD","kulczynskiD","motykaD","avgA","avgB","newA","newB","squaredChordD","pred","cutoffs","tn","tp","fp","nNeg","nPos","nPosPred","nNegPred","Performance","isDistance","predP","all","targ","currentPred","nTp","nFp","getMeasure","measure","measures","getAURC","auc","getAUDC","getDistribution","cutLength","cutLow","cutHigh","xLabels","interValues","intraValues","interCumPercent","intraCumPercent","nTP","currentTP","nFP","currentFP","thisTP","thisFP","names","acc","err","fpr","tpr","fnr","tnr","ppv","npv","pcfall","pcmiss","lift","rpp","rnp","arrayCase","cond","matrixCase","padArray","windowSize","derivative","pad","padValue","SavitzkyGolay","J","inic","Jtranspose","det","eightBits","arr1","arr2","getBit","mask","setBit","toBinaryString","substr","parseBinaryString","toHexString","parseHexString","toDebug","binary","maxCount","_options$algorithm","algorithm","absoluteSum","_typeof","iterator","sequentialFill","_options","_options$from","_options$to","_options$size","_options$unbiased","_options$mean","sqrError","mergeByCentroids","originalPoints","mergedPoints","originalIndex","mergedIndex","closestX","descending","maxMerge","groupWidth","merged","maxAbscissa","maxY","calculateIndex","sortX","sortFunc","grouped","response","uniqueX","weightedMerge","weightedAbscissa","integral","x0","x1","equallySpacedSmooth","numberOfPoints","xLength","halfStep","initialOriginalStep","lastOriginalStep","previousX","previousY","nextX","nextY","currentValue","sumAtMin","sumAtMax","main","equallySpacedSlot","lastStep","frontOutsideSpectra","backOutsideSpectra","getZones","exclusions","exclusion","JSON","parse","stringify","toRemove","unitsPerPoint","zones","currentFrom","totalPoints","currentNbPoints","equallySpaced","arrayXY","variant","xResult","yResult","zone","zoneResult","processZone","filterX","currentZoneIndex","newX","newY","position","MatrixLib","normed","ArrayXY","centroidsMerge"],"mappings":"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"}